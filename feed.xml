<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://agenttroll.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://agenttroll.github.io/blog/" rel="alternate" type="text/html" /><updated>2018-01-06T11:50:55-08:00</updated><id>https://agenttroll.github.io/blog/</id><title type="html">Inside a Troll</title><subtitle>Thoughts of a Java developer</subtitle><entry><title type="html">Status Update: Installing Arch for The First Time</title><link href="https://agenttroll.github.io/blog/2018/01/06/status-update-installing-arch-for-the-first-time.html" rel="alternate" type="text/html" title="Status Update: Installing Arch for The First Time" /><published>2018-01-05T23:46:00-08:00</published><updated>2018-01-05T23:46:00-08:00</updated><id>https://agenttroll.github.io/blog/2018/01/06/status-update-installing-arch-for-the-first-time</id><content type="html" xml:base="https://agenttroll.github.io/blog/2018/01/06/status-update-installing-arch-for-the-first-time.html">&lt;p&gt;It’s been draining on the soul, but luckily coming up with a “unique” title has been rejuvenating (rejuvinatig? rejuvenating? whatever).&lt;/p&gt;

&lt;p&gt;I don’t profess to be an expert on ArchLinux, or even Linux in general but based on my experience installing Arch on my MacBook Pro 11.something, I’d be even more wary of following a random blog post (because it probably won’t work). I don’t think any of the issues that I encountered were unique by any means, but I believe my own little successes are the result of the wealth of mainly online resources. I’m therefore very keen to share my own experience and perhaps someone might come along and save a few hours of their lifetime and hair-tearing.&lt;/p&gt;

&lt;h1 id=&quot;getting-over-the-hurdle&quot;&gt;Getting Over the Hurdle&lt;/h1&gt;

&lt;p&gt;For me, the primary challenge in the first place was connecting to the Internet. To go along with that, my MacBook carries with it a Broadcom Wireless interface, which requires a proprietary driver in order to work correctly. Fortunately, it was just the right hardware that happened to work with the proprietary driver. Unfortunately, the driver requires the Internet to obtain, and my USB was all occupied with carrying the bootable ISO. Therefore, the only way I can get the required packages is by exiting the Arch CLI and manually downloading on macOS, then going back and mounting whatever partition on which I downloaded the package.&lt;/p&gt;

&lt;p&gt;First lesson here: it is impossible to install Arch without access to another installation with Internet. Let me repeat that: &lt;strong&gt;IMPOSSIBLE&lt;/strong&gt;. If you are rich and can buy an ethernet/thunderbolt adapter, go nuts, save yourself some time. Otherwise, you must at least have a VM that boots the Arch ISO in order to download the packages. I’ll spare the gory details of trying to compile &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcom-wl&lt;/code&gt;, which consisted of failing to compile due to Internet requirements, not realizing that you can’t get the right kernel version without rebooting, and thinking that &lt;code class=&quot;highlighter-rouge&quot;&gt;mkinitcpio&lt;/code&gt; will save my butt (It didn’t).&lt;/p&gt;

&lt;p&gt;Secondly, to install packages on a different computer, you must A) Know how how to install Arch B) Get the built packages and C) Get those packages onto the laptop. Honestly, I messed up enough times without Internet access in the first place just dealing with A: formatting the wrong partition (luckily the USB /dev/sdb) multiple times before I figured out why my bootable USB wasn’t bootable anymore, dealing with &lt;code class=&quot;highlighter-rouge&quot;&gt;mount -o force ...&lt;/code&gt; in order to be able to write, and forgetting to mount the target partition. Needless to say, there was lots of &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -fR /&lt;/code&gt;, but at the same time, the repetition drilled in deep the commands required, so I got faster and faster at failing. Better to fail quickly than slowly I suppose.&lt;/p&gt;

&lt;p&gt;In short, the process went something like so for me: mount temp partition from the VirtualBox “disk,” then run the following:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Sy&lt;/span&gt;
pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cachdir&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--dbpath&lt;/span&gt; /tmp base base-devel linux-headers broadcom-wl-dkms wpa_supplicant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then transfer the all the &lt;code class=&quot;highlighter-rouge&quot;&gt;.pkg&lt;/code&gt; files onto macOS using &lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt;. Once I have them, I can then put them on a mounted transfer partition that I used to access those files more easily from the boot CLI.&lt;/p&gt;

&lt;h1 id=&quot;finally-installation&quot;&gt;Finally, Installation&lt;/h1&gt;

&lt;p&gt;The truth is that in order to install the base system, one only needs the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; package, and that’s it. In short, you need to do the following in order to “install” Arch:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cgdisk&lt;/code&gt; and format the partition&lt;/li&gt;
  &lt;li&gt;Mount desired partition&lt;/li&gt;
  &lt;li&gt;Mount the &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; partition&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pacstrap&lt;/code&gt; the desired repo with the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; arg&lt;/li&gt;
  &lt;li&gt;Chroot into the mount dir&lt;/li&gt;
  &lt;li&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; entry for the correct partition&lt;/li&gt;
  &lt;li&gt;Reboot&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I won’t go into specifics here, since firstly I’m not a very good source of info and secondly, because these are quite easy steps that you can find on the Internet. Again, needless to say, I messed up on multiple occaisions here: &lt;code class=&quot;highlighter-rouge&quot;&gt;cgdisk&lt;/code&gt; on the wrong disk, forgetting to mount &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; and ending up with an unbootable system, writing the wrong partition UUID to &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt;, etc…&lt;/p&gt;

&lt;p&gt;It is absolutely vital that you are able to reboot. This is the only way that you can update to the correct kernel version and access your modules, and I guarantee that a successful boot is the most important milestone here, even if you aren’t able to connect to the WiFi quite yet.&lt;/p&gt;

&lt;h1 id=&quot;the-wifi-problem&quot;&gt;The WiFi Problem&lt;/h1&gt;

&lt;p&gt;Back to our initial issue, although we have Arch installed without using the Internet on the target machine, we still do not have Internet access. Luckily, having the &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcom-wl-dkms&lt;/code&gt; file on our transfer partition, we can &lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S&lt;/code&gt; that very easily. Having already confirmed that the kernel has been updated, we can safely restart and see through &lt;code class=&quot;highlighter-rouge&quot;&gt;ip a&lt;/code&gt; that the driver has successfully detected the network interface - a good sign.&lt;/p&gt;

&lt;p&gt;For me, this all happened at school, where the WiFi setup was a little more complicated since we used WPA Enterprise, so I had to wait until I got home.&lt;/p&gt;

&lt;p&gt;The good news came late at night, when I was toying with &lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_supplicant&lt;/code&gt;. I was able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_password&lt;/code&gt; to generate the config, but not realizing that I needed to also set the &lt;code class=&quot;highlighter-rouge&quot;&gt;ap_scan&lt;/code&gt; and ssid scan in order to detect my network (which had SSID masking enabled), I was finally able to connect to the Internet. Content with Internet access for the time being, I got to installing and setting up a few other personal neccessities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xorg&lt;/li&gt;
  &lt;li&gt;Display Manager (LightDM)
    &lt;ul&gt;
      &lt;li&gt;Careful, you also need the locker (I used gtk) for it to work!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;i3wm, dmenu&lt;/li&gt;
  &lt;li&gt;Users&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chromium&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xfce4-terminal&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But since the entire idea of my laptop was that it was portable, and I already had a well-established Debain computer at home, I was bent on getting WiFi to work at my school. That wouldn’t happen for another several weeks though; it was winter break, and I didn’t plan on going to school at all to test whether or not my config worked.&lt;/p&gt;

&lt;h1 id=&quot;the-breakthrough&quot;&gt;The Breakthrough&lt;/h1&gt;

&lt;p&gt;It takes only a few seconds to look at the massive variety in responses to the “proper” config for WPA Enterprise one can find on Google, but as it turns out, whatever people say “works for them” is very blatantly BS. The config depends entirely on the network, and there is no way around having to try out different combinations of “WPA-EAP/IEEE801X…” and “CCMP/TKIP/…” and other options that I still have no interest in. However, recalling that I have a handy MacBook, I booted into macOS to see if I can get some hints by connecting to the WiFi, which I already knew worked splendidly without any hassle. From there, I knew that I could use “WPA-EAP” and “PEAP” options, and the rest goes guess-and-check.&lt;/p&gt;

&lt;p&gt;For my own future reference, this is what I used:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Description='Automatically generated profile by wifi-menu'
Interface=wlp2s0
Connection=wireless
Security=wpa-configsection
ESSID=$SSID
IP=dhcp
WPAConfigSection=(
        'ssid=&quot;$SSID&quot;'
        'proto=RSN'
        'key_mgmt=WPA-EAP'
        'eap=PEAP'
        'identity=&quot;$USERNAME&quot;'
        'password=&quot;$PASSWORD&quot;'
        'phase1=&quot;peaplabel=auto peapver=0&quot;'
        'phase2=&quot;auth=MSCHAPV2&quot;'
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;Although trying a CLI-based install for the first time was an interesting experience, and I felt like I learned a lot from it compared to a more graphical nod that Debian takes, it still was frustrating and uncooperative even at the best of times. I’m happy with the end result, even if it’s not perfect though, and as always, the pleasure and satisfaction that comes with finally wrangling something to work is much more powerful than the ordeal that it takes to acheive that.&lt;/p&gt;

&lt;p&gt;Although it &lt;em&gt;would&lt;/em&gt; be nice if I could actually see anything, I still haven’t figured out that HiDPI thing yet…&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s been draining on the soul, but luckily coming up with a “unique” title has been rejuvenating (rejuvinatig? rejuvenating? whatever).</summary></entry><entry><title type="html">New Years: Productivity</title><link href="https://agenttroll.github.io/blog/2017/12/31/new-years-productivity.html" rel="alternate" type="text/html" title="New Years: Productivity" /><published>2017-12-31T00:28:00-08:00</published><updated>2017-12-31T00:28:00-08:00</updated><id>https://agenttroll.github.io/blog/2017/12/31/new-years-productivity</id><content type="html" xml:base="https://agenttroll.github.io/blog/2017/12/31/new-years-productivity.html">&lt;p&gt;Perhaps we can take some time to look at productivity, in spirit of the (Eve of) New Year.&lt;/p&gt;

&lt;p&gt;Probably the most ironic thing about productivity is that discussing productivity is unproductive in itself. Sure, it’s great food for thought, but at the same time, let us consider that 1) you will read this and do nothing about it and 2) productivity is subjective. In fact, #1 probably isn’t even your fault; maybe you’ve already fixed whatever issue arose from that facet of productivity, or maybe it doesn’t even apply to you. I’m not saying that you aren’t lazy and stubborn, because you probably are as well. At least something might occur to you that has not before even if you won’t do anything about your own productivity after reading.&lt;/p&gt;

&lt;h1 id=&quot;what-does-it-mean-to-be-productive&quot;&gt;What Does It Mean to Be Productive?&lt;/h1&gt;

&lt;p&gt;In my view, there are two main types of productivity: problem-solving productivity and programming productivity. The former deals with solving problems and working out bugs, while the latter deals with literally writing out code more quickly. There’s a lot of overlap in terms of “working on a computer” in general, but for the most part, I will be touching on the latter form of productivity. The issue with dealing with the former is that problem-solving is almost purely mental gymnastics; some people “are just better” at solving problems than other people.&lt;/p&gt;

&lt;p&gt;I mean, in actuality, I don’t even know that much about productivity, I’m simply distributing my opinion based on my experience. So although I can’t help you in the solving-problems area, I’m sure it’s not the end of the line for you.&lt;/p&gt;

&lt;p&gt;There’s lots of debate on who might be a better programmer, the one who is good at problem solving, or the fast programmer. In an ideal world, you’d want someone to be strong in both areas, but there is a sort of division of labor between debuggers and programmers respectively in some cases. While I think that it is an interesting point of discussion, it’s out of scope of what will be covered here.&lt;/p&gt;

&lt;p&gt;To further elaborate on our topic of discussion, being “productive” in context means that you are able to edit code efficiently. You are able to put your ideas “onto paper” or out of your head and into an editor quickly. Assuming that you have the problem solved yourself, you’re able to “take action,” that is, you are not simply sitting at your chair staring at your code when you have your ideas down already.&lt;/p&gt;

&lt;p&gt;Keep in mind that productivity also depends on the person: there are lots of things (i.e. colors) that are based on preferences, and almost nothing is based on hard data or science. The idea behind productivity is to find what works for &lt;em&gt;you&lt;/em&gt;. I’m simply here to offer my own preferences and use myself as an example to what facets of productivity might be improved if things were different.&lt;/p&gt;

&lt;p&gt;Without further ado…&lt;/p&gt;

&lt;h1 id=&quot;touch-typing&quot;&gt;Touch-typing&lt;/h1&gt;

&lt;p&gt;The ultimate limit to how quickly you can write code is your typing speed. You cannot get faster at actually writing code if you can’t type very quickly. While autocomplete is a godsend to those who cannot type as quickly, it still pays to type more quickly and get what little you are typing in the first place done quickly. There are numerous online programs and websites that can help a slow typist, whether it be 10fastfingers or keybr or others. It also helps to type special symbols, such as in Java: &lt;code class=&quot;highlighter-rouge&quot;&gt;(){}&quot;\^&amp;amp;*+-&lt;/code&gt; and others.&lt;/p&gt;

&lt;h1 id=&quot;monitor-size&quot;&gt;Monitor Size&lt;/h1&gt;

&lt;p&gt;There’s also lots of debate on the best size of monitor, the best multi-monitor setup, etc…&lt;/p&gt;

&lt;p&gt;However, there is a lot of data that support the idea that humans are terrible multitaskers. The thing is that if you want to write code faster, you must be in your editor as much as possible, that means no browser open with the docs, your StackOverflow question, your GitHub milestone, whatever. If you work sequentially, as in you exclusively process what you have to do, then exclusively work on writing code, and then switching as necessary, you will find that you will be able to work much more quickly than if you looked through, say, the StackOverflow question as you forget key details while within your editor.&lt;/p&gt;

&lt;p&gt;That also means that your monitor, and by extension, your &lt;strong&gt;total screen estate&lt;/strong&gt; should be kept ot a minimum, while not being too small as to make it difficult or to require effort to read whatever you have written. The way I see it: toss your 2 additional monitors and settle with a single-monitor setup.&lt;/p&gt;

&lt;p&gt;Again, for me personally, the best monitor size is around a 24” (a little over 60 cm) diagonal on a 16:10. This way, I can fit a substantial amount of text and therefore be able to navigate more efficiently across larger distances, but at the same time, I do not need to change where I am looking at in order to see the edges of the screen. And yet again, this is not an exact science, but try to look for a monitor that is just large enough for your peripheral vision to process what is at the edge of your screen. If you are completely torn between two screen sizes, I’d go with the smaller screen, because over the long term, you will be focused on what you write anyways rather than anything surrounding it.&lt;/p&gt;

&lt;p&gt;To continue adding on to the focus idea, I would also recommend turning off music, at least why you are programming. There are some people who are unsettled by silence, but the fact that you are noticing silence or conversely, the music itself, means that you are not completley focused on the programming task. You probably won’t get rid of your music, and again, I don’t have any hard data to back me up on productivity with or without background noise, but going off the focus logic, it makes more sense to work in silence. Perhaps console yourself with the continous sound from your 100 decibel mechanical keyboard otherwise (just kidding, I do not condone replacing your keyboard with a jet engine).&lt;/p&gt;

&lt;h1 id=&quot;font&quot;&gt;Font&lt;/h1&gt;

&lt;p&gt;The code you write is literally written in the font that you are using, so it pays to use a font that is comfortable to the eye. There are tons and tons of good fonts out there, some meticulously designed, others based more on stylistic preference. I personally use a lot of Monaco, but many people use a less playful font like Menlo or a very blocky monospace. Whatever it is, you should have no trouble reading large amounts of text written in your selected font. You should avoid fonts that are too small or have poor balance although again, preference trumps pretty much everything so just be sure to get yourself a good font.&lt;/p&gt;

&lt;h1 id=&quot;editor&quot;&gt;Editor&lt;/h1&gt;

&lt;p&gt;Another productivity-booster is the editor that you use. For me, I use a combination of IntelliJ IDEA/IdeaViM and ViM. What made the difference was that Eclipse was too slow and its auto-completion was nowhere close to IDEA’s in terms of speed or intelligence. IntelliJ actually shows me that over a 3 month period, I had saved 100K characters from being typed, which is an astounding amount of time saved through auto-complete. Again, I’m not saying that you should switch editors, but that is by far one of the most effective productivity-booster for me.&lt;/p&gt;

&lt;p&gt;Secondly, ViM and counterparts, the whole idea of avoiding using your mouse is also very effective once you become used to the different mode of navigation. The fact is that using your mouse requires a very precise movement in comparison with the more granular keyboard-based movement that ViM is capable of. To add on to that, you must also remove one hand from the keyboard in order to move the mouse, and then place your hand again on the keyboard, and enough of these actions will eventually add up to a significant amount of time that could be saved remaining in the home position. Although it had/has a steep learning curve for me personally, I think that using IdeaViM has saved me on the magnitude of hours in the past few months from reaching for the mouse. I use ViM for most of my text-editing nowadays and the way I see it, “text-editing has never been better.”&lt;/p&gt;

&lt;p&gt;The one thing I have against ViM is that its support for Java is practically non-existant &lt;strong&gt;relative&lt;/strong&gt; at least to IntelliJ IDEA. The code completion is not as good and lacking IntelliSense and the more advanced features such as viewing documentation, library source code, Git/Maven wrappers, etc… will kill productivity. Instead of bringing Java to ViM, bring ViM to Java as said somewhere on the Internet.&lt;/p&gt;

&lt;h1 id=&quot;colors&quot;&gt;Colors&lt;/h1&gt;

&lt;p&gt;The color palette is also important for productivity. By using a more preferable palette, you will reduce your overall fatigue and increase your endurance for writing code efficiently. Avoid using a harsh, very light, flashy color palette. Many, many developers tend to prefer a high-contrast dark theme for their editors and environment backgrounds, because it makes the text both easy to read and easy on the eyes. These can be found on Google, along with other common “dark” themes such as Solarized. I use a slightly modified Google Code syntax on a grey background, although the contrast is exceedingly poor, it’s just that I haven’t found time to change it in the past, oh, 3 years. You probably won’t change your background either, so I don’t feel exceedingly bad about it myself.&lt;/p&gt;

&lt;p&gt;I say contrast is important because although it serves to detriment the general “easy-on-the-eyes” gospel, it will make it much easier to actually see the text. Over time, it’s more typical for eye strain to occur on text that is difficult to see than text that is “a harsh color.” Further, people using programs such as f.lux and redshift will have a difficult time reading the text if there is little contrast, which becomes more compounded as the color temperature decreases.&lt;/p&gt;

&lt;h1 id=&quot;breaks&quot;&gt;Breaks&lt;/h1&gt;

&lt;p&gt;Sitting at a computer and programming in itself is physically and mentally taxing. It is an absolute necessity to completely stop and take a break once in a while, no matter how close you are to “solving that one bug.” Looking a monitor for extended periods of times is strenuous on the eyes, poor for the back, and wreaks havoc on your hands and shoulders. You must also remain hydrated and satiated, and on top of that, you cannot solve problems effectively while at the same time being distracted by what is on your computer screen. Not only can you improve your productivity but having a self-check once in a while, but you will also become a better problem-solver if you do not continue to attack a problem in the same way you have the past 3 hours you have been sitting in an office chair.&lt;/p&gt;

&lt;p&gt;Stand up, stretch, drink some water, give your eyes a break, give your mind some time to relax. Over time, you will lose focus anyways, and giving yourself a break and continue to do something productive and healthy for your body is the absolute least that you can do rather than suffer from over-exerting yourself. I personally take a break whenever I feel the need to go use the restroom, and I immediately drink another cup of water so that I would be guaranteed to need to take a break in the future. What works for a lot of people, not just for software engineers but also students and other places that require long periods of focus is to take a 10-15 minute break every hour.&lt;/p&gt;

&lt;p&gt;Indeed, it may seem like a loss and counterproductive - exactly what we are fighting here - but trust me when I say that breaks are necessary to be productive. The hardest part about taking breaks is making sure you get back after treating yourself a bit. If you can at least keep yourself disciplined, then it should be no problem, incorporating breaks into your schedule should slowly, but surely improve your productivity.&lt;/p&gt;

&lt;h1 id=&quot;final-word&quot;&gt;Final Word&lt;/h1&gt;

&lt;p&gt;I’m sure there are many other factors that I’ve missed which could be vital to productivity, and I acknowledge that “programming productivity” isn’t the entire story. However, with the above noted thoughts on how I improved my own productivity over the years, perhaps the reader might at least have some background on how (yet another) developer works.&lt;/p&gt;</content><author><name></name></author><summary type="html">Perhaps we can take some time to look at productivity, in spirit of the (Eve of) New Year.</summary></entry><entry><title type="html">Multi Conditionals</title><link href="https://agenttroll.github.io/blog/2017/12/21/multi-conditionals.html" rel="alternate" type="text/html" title="Multi Conditionals" /><published>2017-12-21T01:25:00-08:00</published><updated>2017-12-21T01:25:00-08:00</updated><id>https://agenttroll.github.io/blog/2017/12/21/multi-conditionals</id><content type="html" xml:base="https://agenttroll.github.io/blog/2017/12/21/multi-conditionals.html">&lt;p&gt;There have been actually serveral times as I’m writing servers in things like my JDB project and the TridentSDK project in which the following scenario pops up: there is a single thread that manages incoming and outgoing messages. I need to block on an outgoing queue, as well as block until some bytes off the network are read.&lt;/p&gt;

&lt;p&gt;My situation looks something like the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BlockingQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incoming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BlockingQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outgoing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Read into incoming&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outgoing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Write from outgoing&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Block, wait for input or output&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitForInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeToOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Message consumers will block on the &lt;code class=&quot;highlighter-rouge&quot;&gt;incoming&lt;/code&gt; queue and wait for input from the socket to be read by the I/O loop in order to process those messages.&lt;/p&gt;

&lt;p&gt;Given this scenario, how might the I/O loop be implemented in order to block on network input as well as the &lt;code class=&quot;highlighter-rouge&quot;&gt;outgoing&lt;/code&gt; queue and wait until either of the two have I/O tasks to execute?&lt;/p&gt;

&lt;h1 id=&quot;naive-solution-subsequent-takes&quot;&gt;Naive Solution: Subsequent &lt;code class=&quot;highlighter-rouge&quot;&gt;take()&lt;/code&gt;s&lt;/h1&gt;

&lt;p&gt;A simple, first-thought, although naive solution might look something like the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;incoming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outgoing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeToOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will not work correctly. Because the loop must wait for input, the second blocking method, &lt;code class=&quot;highlighter-rouge&quot;&gt;outgoing.take()&lt;/code&gt;, will not be reached until a message is received. Therefore, a message that is queued to be sent cannot be unless something is received first - and what if the client is written in the same way? There will be a deadlock because the client must depend on input from the server in order to send a message, but the server is in fact also waiting to receive a message that will never come from the waiting client.&lt;/p&gt;

&lt;p&gt;So it can be seen that this method both does not work as intended and will cause risks with client-server deadlock.&lt;/p&gt;

&lt;h1 id=&quot;naive-solution-single-lockcondition&quot;&gt;Naive Solution: Single lock/&lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;A second tempting solution is to protect the &lt;code class=&quot;highlighter-rouge&quot;&gt;incoming&lt;/code&gt; queue and the &lt;code class=&quot;highlighter-rouge&quot;&gt;outgoing&lt;/code&gt; queue with a single lock/&lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Assuming the same context:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Condition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Await for a signal from a message producer&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// adding to the outgoing queue&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Spurious wakeup checked by conditions below&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;incoming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Signal the message consumer&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outgoing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writeToOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there still exists several issues with this code. Firstly, &lt;code class=&quot;highlighter-rouge&quot;&gt;cond.await()&lt;/code&gt; will block only on the outgoing queue, and ignore network input. This will have the opposite effect as the earlier naive solution in which there requires network input for there to be output; in this case, the I/O thread will, in fact, have to wait for output in order for input to be read.&lt;/p&gt;

&lt;p&gt;In truth, we can try all different kinds of combinations of switching different &lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt;s and different mechanisms of all sorts without succeeding, there is simply no way to wait on both the reading from socket and simultaneously the outgoing queue. Further, a thread blocked on network input is not blocked on a lock or &lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt; or whatever - it remains in &lt;code class=&quot;highlighter-rouge&quot;&gt;RUNNABLE&lt;/code&gt; mode, so it might as well be busy waiting for all other observers can care. After exhausting these ideas, I too thought that it would be impossible to act on events rather than having to use a timer and step over the other blocked method in order to check either input or output depending on what is blocked.&lt;/p&gt;

&lt;p&gt;Fortunately, there &lt;em&gt;is&lt;/em&gt; a way.&lt;/p&gt;

&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;/h1&gt;

&lt;p&gt;In order for my I/O thread to correctly handle I/O input, it must be interruptible. Thankfully, by switching to &lt;code class=&quot;highlighter-rouge&quot;&gt;java.nio&lt;/code&gt;, this functionality can be achieved with &lt;code class=&quot;highlighter-rouge&quot;&gt;InterruptibleChannel&lt;/code&gt;. I was able to override the default interrupt handler and use the following little utility I made to notify the I/O thread:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sun.nio.ch.Interruptible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.nio.channels.SocketChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Utility class used to modify {@link SocketChannel}s in
 * order to override the default behavior and allow for I/O
 * threads to capture {@link Signal}s passed while waiting
 * for input.
 *
 * &amp;lt;p&amp;gt;Be aware that this is an extremely egregious hack.
 * For the most part, it is a toy. I don't expect that
 * anyone would seriously consider using this in production,
 * but if there is any case where that occurs, I am not
 * responsible for what happens. Use at your own risk. You
 * have been warned.&amp;lt;/p&amp;gt;
 *
 * &amp;lt;p&amp;gt;To add further to the risks associated with this
 * class, one must &amp;lt;strong&amp;gt;NEVER&amp;lt;/strong&amp;gt; call {@link
 * Thread#interrupt()} on an I/O thread. Doing so may
 * result in undefined behavior. Capturing a {@link Signal}
 * also means that the I/O thread must use
 * {@link Thread#interrupted()} in order to clear the
 * interrupt state before the next signal. Finally,
 * {@link Thread#interrupt()} is used in order to propagate
 * signals to the I/O thread, and therefore, if any methods
 * that are interruptible must catch the exception and run
 * {@link Thread#interrupted()}.&amp;lt;/p&amp;gt;
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SocketInterruptUtil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** The cached field used to hack the SocketChannel */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERRUPTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** The signal used to notify readers */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGNAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.nio.channels.spi.AbstractInterruptibleChannel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;INTERRUPTOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;interruptor&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;INTERRUPTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No such field: interruptor&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Perhaps not running Oracle HotSpot?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No such class: AbstractInterruptibleChannel&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Perhaps not running Oracle HotSpot?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Suppress instantiation&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SocketInterruptUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Prepares the {@link SocketChannel} to receive
     * {@link Signal}s dispatched by another thread. This
     * is required in order for this to work correctly.
     *
     * @param ch the channel to prepare
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SocketChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;INTERRUPTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interruptible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGNAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IllegalAccessException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Signals the given I/O thread to unblock from ALL
     * blocking methods and proceed and throws a
     * {@link Signal} to be handled by the thread.
     *
     * @param thread the thread to unblock
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Thread probably not blocked on I/O&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNNABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * A signal dispatched by another thread to a target
     * I/O thread in order for targets to respond to
     * notifications.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Signal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;220295899772322553L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A correct usage of the class would look something like the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ServerSocketChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerSocketChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SocketChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SocketInterruptUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;incoming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Signal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outgoing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;writeToOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Normally you would also need to have another&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// catch for Signal/InterruptedException here&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// However, you'd also need to check to make&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// sure that there is an active connection, so&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// I can just check to make sure that there is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// at least a connected SocketChannel before&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// signalling and get rid of the try/catch.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And for the outgoing logic:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;outgoing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SocketInterruptUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ioThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;discussion&quot;&gt;Discussion&lt;/h1&gt;

&lt;p&gt;In order for this to work, I made a slightly (OK, &lt;em&gt;really&lt;/em&gt;) hacky solution to default &lt;code class=&quot;highlighter-rouge&quot;&gt;InterruptibleChannel&lt;/code&gt; functionality. I found that what &lt;code class=&quot;highlighter-rouge&quot;&gt;InterruptibleChannel&lt;/code&gt; did was put an interrupt listener before every single blocking call in order to close the socket if either the blocked thread is interrupted or if the socket was closed. I couldn’t put in my own handler because I can only override before or after the blocking method, in which my own handler would be overridden by the interrupt handler provided by the method itself. Therefore, I went one step deeper and overrode the cached instance of the interrupt handler inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;InterruptibleChannel&lt;/code&gt; to exit early and throw my own Signal which can be caught by the I/O thread.&lt;/p&gt;

&lt;p&gt;I  haven’t deeply investigated the performance of this method over perhaps timed busy waiting, but from testing, a blocked read can respond to signals in sub-millisecond times even when saturated with messages between “10 nanosecond intervals” on an i3-3240. A &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop probably takes more than 10ns to run which is why I mention that rate in quotes, but again, this time is very impressive even if it’s off by a bit. You wouldn’t want to be waking a thread every 1 millisecond in order to check for the other condition, which is why I say that it’s good in comparison with the alternative.&lt;/p&gt;

&lt;p&gt;Unfortunately, this technique is risky in many ways, first of all, because it depends on there being the AbstractInterruptibleChannel SPI class being available, as well as the field being available. The field probably won’t be going away because caching is required, but the class itself might. Additionally, the interrupt status of the thread is risky to play around with and requires &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.interrupted()&lt;/code&gt; to be called each time either Signal is thrown or InterruptedException is captured if the &lt;code class=&quot;highlighter-rouge&quot;&gt;signal(Thread)&lt;/code&gt; method misses the I/O portion. Otherwise, the thread itself might die. Finally, the only possible way to exit directly out of a blocking &lt;code class=&quot;highlighter-rouge&quot;&gt;read(...)&lt;/code&gt; is to throw the exception, but if a read is halfway done, then the behavior may be undefined. I will need to test further in order to determine what happens, but until then, this class still remains a very risky hack. I would highly advise against using it in a production environment, regardless of whatever performance gains may bear fruit through event-driven notifications rather than spurious wakeups. I have included a warning in the class javadoc comment to cover my ass, so please don’t push it :)&lt;/p&gt;

&lt;p&gt;In the end, even though I have acheived what I was hoping for, even if it isn’t really viable in the real-world, I guess I will just have to keep searching for a better solution.&lt;/p&gt;

&lt;h1 id=&quot;closing-words&quot;&gt;Closing Words&lt;/h1&gt;

&lt;p&gt;Figuring this all out was an interesting use of 3 hours. I’m completely done with this though, I’m not looking to play around anymore with it, but anyone else can feel free to do so themself. My plan is to update the “On Thread Safety” post very soon though, and there is more to come over winter break. Take care everyone!&lt;/p&gt;</content><author><name></name></author><summary type="html">There have been actually serveral times as I’m writing servers in things like my JDB project and the TridentSDK project in which the following scenario pops up: there is a single thread that manages incoming and outgoing messages. I need to block on an outgoing queue, as well as block until some bytes off the network are read.</summary></entry><entry><title type="html">Happy December</title><link href="https://agenttroll.github.io/blog/2017/12/17/happy-december.html" rel="alternate" type="text/html" title="Happy December" /><published>2017-12-17T22:55:00-08:00</published><updated>2017-12-17T22:55:00-08:00</updated><id>https://agenttroll.github.io/blog/2017/12/17/happy-december</id><content type="html" xml:base="https://agenttroll.github.io/blog/2017/12/17/happy-december.html">&lt;p&gt;I suppose it’s been a while.&lt;/p&gt;

&lt;p&gt;I think for lack of a better subject to write about, I may have put blogging by the wayside. I mean, 2/4 posts so far have been how I fixed some problem so the next time my computer breaks, I know what to install…&lt;/p&gt;

&lt;p&gt;But good news, Debian Stretch so far hasn’t broken since at least April because I don’t ever recall having to use the Stretch CD that I have on my desk since I upgraded. So even then my blog has been pretty dead.&lt;/p&gt;

&lt;p&gt;Although it’s not as if I run a well-known blog, it gives me warm feelings knowing that there’s a little nook in the Internet where I can reflect and vent whatever is in my head that I think is relevant, knowing that some random person (or more likely a bot) will look at it and possibly respond internally as a result of something that I write.&lt;/p&gt;

&lt;p&gt;Probably won’t happen though. The Internet’s a pretty big place.&lt;/p&gt;

&lt;p&gt;I’ve been thinking about writing a blog post for a while, but whenever computer time and thinking time coincide, it’s like I think “maybe later” or perhaps I need better ideas before wasting my own (or worse, a reader’s) time. So from here on out, I’ve set myself a goal to post something weekly or biweekly, whether or not somebody cares. Anything will probably go, from this melange of thoughts to some random meme dump from the past week.&lt;/p&gt;

&lt;p&gt;So in the process of writing that, I guess I’ll just make a mind dump of whatever I don’t forget over the next 30 or so minutes.&lt;/p&gt;

&lt;h1 id=&quot;flaming-vsauce&quot;&gt;Flaming Vsauce&lt;/h1&gt;

&lt;p&gt;As I’m writing this, I’m currently offline and I was actually going to look at other people explain why Vsauce is often used unironically to describe a bunch of ideas that have no relation to each other.&lt;/p&gt;

&lt;p&gt;I’ve watched my fair share of Vsauce videos, and yes, I do agree that there are a few (a lot?) of videos whose entire purpose is to go off on a huge tangent. But look at &lt;em&gt;me&lt;/em&gt;. This entire blog post has been a huge tangent, and none of the posts have any relation to each other. Yet. But hold on a minute. If I am correct in my conclusion that Vsauce is used to mock those that go off on tangents (as it is to mock the creator himself), could that not be the entire point of Vsauce videos? Could not even answering the question in full be the actual purpose of his videos?&lt;/p&gt;

&lt;p&gt;The point I’m arguing for is that Vsauce videos have nothing to do with being a Q&amp;amp;A type thing where he investigates and answers whatever is being asked in the title, but rather to make random connections so that viewers investigate &lt;em&gt;themselves&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Since I’m still offline, the only evidence I have is trying to remember whatever videos I watched, but bear with me here.&lt;/p&gt;

&lt;p&gt;By going off on tangents and only vaguely answering the question, I think that Vsauce is purposely trying to get viewers to think for themselves and become a little bit more curious about what was mentioned in the video. Could it not be possible that those who are even angered by Vsauce’s vagueness or style of discussion to do their own research in order to debunk his claim(s) and in doing so, learn a little bit in the process?&lt;/p&gt;

&lt;p&gt;But then again, why not have every inflammatory creator turn around and say “oh, that wasn’t the point, the point was to get you to learn and debunk my claims!”&lt;/p&gt;

&lt;p&gt;But then again, Vsauce hasn’t ever said specifically that instilling curiosity was the point of his videos either. Maybe he hasn’t realized how apparently stupid he sounds to some other viewers. I can’t speak for myself of the quality of his videos, but I myself do enjoy some of his content occaisionally, so I’m probably biased in favor of defending Vsauce.&lt;/p&gt;

&lt;p&gt;As a final note, for the love of God, do not make me the next Vsauce meme.&lt;/p&gt;

&lt;h1 id=&quot;vaguness-is-necessary&quot;&gt;Vaguness is Necessary&lt;/h1&gt;

&lt;p&gt;I recall from my social studies class that there are claims that the U.S. Constitution was written to be intentionally vauge. Now the merits of that claim or how useful vagueness has been to the U.S. as a nation is another topic for another time, but I think that intential vagueness is not only helpful, but absolutely &lt;strong&gt;necessary&lt;/strong&gt; for learning.&lt;/p&gt;

&lt;p&gt;So some backstory: I believe it was yesterday night, when I was finally able to get ArchLinux running on my MacBook, and I was just heading off to bed, right? And as I laid there, I still high on satisfaction and having finally been able to get the bootloader and the Wi-Fi and just everything in place, and I thought to myself:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why didn’t the ArchWiki just tell me everything I needed to do exactly as it needs to be done?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And from there, I realized how perhaps vagueness was connected to learning. Intentional, maybe not, but important? Most definitely. I recall conversations with some of the AP Computer Science students describing how the (unnamed) teacher was (to put in nice terms) “not a very good teacher.” I’m not sure how the Vsauce connection or the social studies connection came about, but through these connections, I realized that you don’t learn from instruction, you learn from what was missed during instruction.&lt;/p&gt;

&lt;p&gt;Now let me make clear that at the same time, what you don’t know must drive your curiosity. Vagueness will fail if students are not motivated to learn more about what they don’t understand, or what they don’t know. By allowing students to do their own learning, I think that they might be able to become more independent, be in charge, and feel more rewarded by knowledge than if they are spoonfed.&lt;/p&gt;

&lt;p&gt;On the contrary, it is is also important that there are some details that are spoonfed. You can’t learn from nothing, and there must still be the answer somewhere. If it is too difficult to find, or students are not motivated to find the answers themselves, or if students are not willing to create their own solutions, then vagueness has failed to work.&lt;/p&gt;

&lt;p&gt;There is a fine balance between teaching too much and not teaching at all. Vagueness should be a tool, and teachers a source of guidance rather than a source of information. I would even go as far as to say that teachers should learn not to teach their own subject, but to learn how to guide students.&lt;/p&gt;

&lt;p&gt;Make note that there is a reason why I chose to discuss vagueness before some of the sections below :)&lt;/p&gt;

&lt;h1 id=&quot;your-opinion-sucks&quot;&gt;Your Opinion Sucks&lt;/h1&gt;

&lt;p&gt;The section header probably inflamed at least more than one reader.&lt;/p&gt;

&lt;p&gt;The connection that some people have with their opinion should be thrown away. I think that opinions are agents of discussion, not the people who are proponents of that opinion. Pretty much 100% of the time, your opinion sucks and needs to be changed.&lt;/p&gt;

&lt;p&gt;Don’t get all offended because someone doesn’t agree with you. The idea of an opinion isn’t so other people agree with it, it is so that the existing state of humanity can be improved if is better than an existing idea. If people don’t agree with it, no need to get all butthurt. Their disagreement is an opinion as well, so both of your opinions suck.&lt;/p&gt;

&lt;p&gt;But then again… I’m voicing my own opinion on opinions, so I should piss off, right?&lt;/p&gt;

&lt;h1 id=&quot;machine-conciousness&quot;&gt;Machine Conciousness&lt;/h1&gt;

&lt;p&gt;I used to have to go to Costco a lot with my parents because, you know, they were those parents.&lt;/p&gt;

&lt;p&gt;Thing was, at Costco, there’s this big ol’ table filled with tons and tons of books, and whenever my parents would shop, I would pick up a book and read it while they did their thing, and one of those books happened to be Michio Kaku’s book that discussed time travel or some other baity Sci-Fi topic.&lt;/p&gt;

&lt;p&gt;Truth is, one of the things that the book I read that day talked about was human consciousness. Now I don’t recall that much from the book itself, so I’m looking to get my hands on it ASAP after I finish writing this.&lt;/p&gt;

&lt;p&gt;Anyways, I also happen to be fascinated with natural processes. Things like what the smallest subatomic particles are made of, what makes energy “energy,” etc… and human conciousness was something that I found mysterious, as well as it happens, neurologists and psychologists the world over. What makes us concious? What makes us/gives us the ability to be meta-cogniscent? Why (if they do not) do animals not think abstractly? And most importantly, what prevents lifeless objects from possessing consiousness?&lt;/p&gt;

&lt;p&gt;How mind-numbingly complex and unknown, the processes that go on inside of our little brains. The only thing I recall today about human consciousness is how people have attempted to preserve it through cryogenics and how it was related someehow to prediction, thinking about the future and being able to respond to how events might continue or change. It boggles the mind, thinking about the mind, in fact.&lt;/p&gt;

&lt;p&gt;I’d honestly love to find some free time to work on something along the same vein as machine consciousness someday. But for now I gotta finish the blog post.&lt;/p&gt;

&lt;h1 id=&quot;jdb&quot;&gt;JDB&lt;/h1&gt;

&lt;p&gt;Some keen observers might notice that I have a new JDB project on GitHub and this is actually for a post APCS course that I am currently in at school. In short, it’s just a CLI Java-debugger, but looking at jdb.md should give a clue as to what the goals are for the project.&lt;/p&gt;

&lt;p&gt;One of the services that I use as part of the class is something called Seesaw, which lets me write a bi/triweekly journal about my progress, but unfortunately, there’s a character limit!&lt;/p&gt;

&lt;p&gt;Since I like to elaborate and write, it turns out this is a relevant inconvenience for me. I think I will begin to incorporate those posts into my blog since it will allow me to add inline elements such as photos or videos without having to make a separate entry, something that writing to GitHub Gist and Seesaw itself did not allow.&lt;/p&gt;

&lt;p&gt;I think that by writing a public journal, others might also benefit from reading through how I think and be able to apply the same concepts to their own programming challenges as well. At the same time, I might also create the illusion that my blog is a little more active than it really is.&lt;/p&gt;

&lt;h1 id=&quot;on-thread-safety&quot;&gt;On Thread Safety&lt;/h1&gt;

&lt;p&gt;It’s been a &lt;strong&gt;long&lt;/strong&gt; while since I’ve looked at the “On Thread Safety” treatise that I had written back in May. I’ve started to look back at it over the past 2 days, so hopefully anyone who has been watching that will be excited for the changes that I’ve made so far, however miniscule. I’m very excited by the prospect of writing a finished product all, but I’m afraid that a single post may not be enough to explain as comprehensively as possible the mechanics of multithreading in Java. I’m not looking to replace other resources, but again, simply condensing and using the vaguness idea from above to help explain a few esoteric/quirky concepts pertaining to thread-safety.&lt;/p&gt;

&lt;p&gt;Again, I’m looking forward to continuing to update it, so stay tuned!&lt;/p&gt;

&lt;h1 id=&quot;octopress&quot;&gt;Octopress&lt;/h1&gt;

&lt;p&gt;As I was looking through the 3 photos on the blog so far, firstly, I noticed that each section in this post so far has been successively shorter than the previous.&lt;/p&gt;

&lt;p&gt;I also noticed this one photo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/octopress3mobile.png&quot; alt=&quot;Otopress3 on Mobile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GG @ The navbar button.&lt;/p&gt;

&lt;p&gt;Although it’s not necessarily related to the above bug (which I am sure is the fault of the theme rather than Octopress itself), I’m thinking of getting rid of Octopress3 perhaps in the near future and using pure Jekyll. There’s little that I think Octopress offers in terms of features vs. Jekyll and the barebones should be sufficient for me. On top of that, Jekyll is significantly more active in terms of development than Octopress so that is also another motivator.&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h1&gt;

&lt;p&gt;It’s been a while so I’ve got a lot of stuff to talk about, perhaps contributing to the length of today’s post. I guess my final message would be to stay tuned.&lt;/p&gt;

&lt;p&gt;If nothing of interest to you was written here, perhaps you might leave with a smile on your face. If failing to interest you, I hope your day gets better regardless :)&lt;/p&gt;</content><author><name></name></author><summary type="html">I suppose it’s been a while.</summary></entry><entry><title type="html">Status Update: Reinstalling Debian (for the Nth Time)</title><link href="https://agenttroll.github.io/blog/2017/04/22/status-update-reinstalling-debian-for-the-nth-time.html" rel="alternate" type="text/html" title="Status Update: Reinstalling Debian (for the Nth Time)" /><published>2017-04-22T23:30:03-07:00</published><updated>2017-04-22T23:30:03-07:00</updated><id>https://agenttroll.github.io/blog/2017/04/22/status-update-reinstalling-debian-for-the-nth-time</id><content type="html" xml:base="https://agenttroll.github.io/blog/2017/04/22/status-update-reinstalling-debian-for-the-nth-time.html">&lt;p&gt;It’s really not something I do everyday, but apparently, since I’ve broken my Debian computer so many damn times that I kinda have a routine of what programs to install and what packages to use. There were a few interesting changes and things that I’ve learned from my most recent failure (see &lt;a href=&quot;https://agenttroll.github.io/blog/2017/04/04/i-finally-figured-out-how-to-get-ffmpeg-to-work-on-mixed-jessie-sid.html&quot;&gt;my previous post for the retardation&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h1&gt;

&lt;p&gt;I’m forever in love with 3 tools in particular, &lt;a href=&quot;https://github.com/albertlauncher/albert&quot;&gt;Albert Launcher&lt;/a&gt;, tmux, and &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source&quot;&gt;compiled Vim&lt;/a&gt; (which I should note also requires Ruby and Python, which I use &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt; and &lt;a href=&quot;https://github.com/pyenv/pyenv&quot;&gt;pyenv&lt;/a&gt; respectively).&lt;/p&gt;

&lt;p&gt;I had no issues installing Albert, for it was a precompiled package. However, I had considerable trouble trying to get tmux to play nicely with &lt;a href=&quot;https://github.com/powerline/powerline&quot;&gt;powerline&lt;/a&gt;. One of the confusing things was the way you install powerline is actually using python’s pip, which came bundled with the &lt;code class=&quot;highlighter-rouge&quot;&gt;2.7.9&lt;/code&gt; version that I was using from &lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv&lt;/code&gt;. Depending on what you used to install powerline, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--user&lt;/code&gt; flag was used in the official documentation, which placed the package in a different directory than if you had installed it without (the &lt;code class=&quot;highlighter-rouge&quot;&gt;--user&lt;/code&gt; flag would place it in &lt;code class=&quot;highlighter-rouge&quot;&gt;.local&lt;/code&gt;, while without the flag, it would place the package in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.pyenv/versions/2.7.9/...&lt;/code&gt;). Using &lt;code class=&quot;highlighter-rouge&quot;&gt;pip show powerline-status&lt;/code&gt; will show you where the powerline directory is stored, and I finished the rest after finding this &lt;a href=&quot;https://askubuntu.com/a/283909&quot;&gt;well-written post on AskUbuntu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further, another little quirk about pyenv is that it does not automatically install its dependencies, you must look at what you need to install &lt;a href=&quot;https://github.com/pyenv/pyenv/wiki/Common-build-problems&quot;&gt;here&lt;/a&gt;. The same cannot be said for &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;, however you must also (ironically) &lt;a href=&quot;https://github.com/rbenv/ruby-build&quot;&gt;install the &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;&lt;/a&gt; command in order to install it in the first place.&lt;/p&gt;

&lt;p&gt;So back to actually installing tmux itself, the issue was trying to get the command prompt to render correctly, as it would be cut off after my username. I later also got the classic “everything is bold” bug in tmux, but both were fixed by adding the following to my &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xterm-256color
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, everything worked like charm. I then installed vim and XFCE, removing all the GNOME packages except for the theme (I like the theme actually).&lt;/p&gt;

&lt;h1 id=&quot;nvidia-drivers&quot;&gt;NVIDIA drivers&lt;/h1&gt;

&lt;p&gt;Ah, the bane of linux gaming, installing GPU drivers. For the past few years, I’ve used the proprietary ones off of the Nvidia site, but I decided to take the ones packaged in &lt;code class=&quot;highlighter-rouge&quot;&gt;jessie-backports&lt;/code&gt; for a spin this time (the reason being that they have the new 375 drivers). I ran into the same roadblock a few dozen times, when DKMS and the &lt;code class=&quot;highlighter-rouge&quot;&gt;xorg&lt;/code&gt; nvidia package kept getting stuck. Evidently, the way to fix this was actually to stop XDM, but my intuition was uh… Not exactly up to par the few dozen times that I did it. I even went so far as to attempt to build from source using the &lt;code class=&quot;highlighter-rouge&quot;&gt;deb-src&lt;/code&gt; repository for &lt;code class=&quot;highlighter-rouge&quot;&gt;jessie-backports&lt;/code&gt;, again getting stuck with the dependencies issue. However, just remember to shutoff your window manager for like 15 minutes while it installs, and then when &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt; finishes with an error on the &lt;code class=&quot;highlighter-rouge&quot;&gt;xorg&lt;/code&gt; package, just reboot and the problem should be solved (&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo dpkg --configure -a&lt;/code&gt; may be needed). The NVIDIA drivers are exceptionally awkward to resolve because one needs to keep rebooting and repeating the reconfiguration until the dependencies are resolved.&lt;/p&gt;

&lt;p&gt;As with the classic setup, I also &lt;a href=&quot;https://askubuntu.com/questions/481414/install-nvidia-driver-instead-nouveau&quot;&gt;blacklisted &lt;code class=&quot;highlighter-rouge&quot;&gt;nouveau&lt;/code&gt;&lt;/a&gt; as well.&lt;/p&gt;

&lt;h1 id=&quot;other-things-i-install&quot;&gt;Other things I install&lt;/h1&gt;

&lt;p&gt;Some of the other packages I install are Google Chrome, Jetbrains Toolbox (along with a few IDEs), and &lt;a href=&quot;https://github.com/cmpitg/infinality-debian-package&quot;&gt;Infinality&lt;/a&gt;. I also use &lt;a href=&quot;http://sdkman.io/&quot;&gt;sdkman&lt;/a&gt; for quite a few different things such as Java/Maven. I also do quite a bit of customization on other things such as installing a solarized-light theme for xfce-terminal, and other font related changes.&lt;/p&gt;

&lt;h1 id=&quot;back-to-the-ffmpeg-problem&quot;&gt;Back to the FFmpeg problem…&lt;/h1&gt;

&lt;p&gt;After breaking my system after that episode, I was eagar to reinstall FFmpeg and OBS the correct way this time. Ironically, I AGAIN broke my system in the process of writing this blog post by removing all the GNOME packages and borking with &lt;code class=&quot;highlighter-rouge&quot;&gt;polkit&lt;/code&gt;. So in fact, I had to redo everything previously written in the process of describing my installation process, and again got close to breaking the DM by forgetting to reconfigure.&lt;/p&gt;

&lt;p&gt;Anyways, with that debacle over, I found to my surprise that using &lt;a href=&quot;https://github.com/lutris/ffmpeg-nvenc&quot;&gt;the script&lt;/a&gt; I had used in the previous article did not work. However, with some digging around, I was finally able to get it to work after about a week:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first problem was dependency conflicts. &lt;code class=&quot;highlighter-rouge&quot;&gt;libvdpau-dev&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libva-dev&lt;/code&gt; and any other libraries that conflict with the &lt;code class=&quot;highlighter-rouge&quot;&gt;jessie&lt;/code&gt; packages need to be removed from the installer script and installed using:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; jessie-backports libvdpau-dev libva-dev &lt;span class=&quot;c&quot;&gt;# And any other conflicts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Run the script: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ./build.sh -o -d /usr/local&lt;/code&gt;. No problems here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optional: I replaced the NVENC header files with a newer version that I downloaded off the NVIDIA site.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Starting both &lt;code class=&quot;highlighter-rouge&quot;&gt;ffmpeg&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;obs&lt;/code&gt; should produce an error that looks something like:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;loading shared libraries: libavdevice.so.57: cannot open shared object file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Open up &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ld.so.conf&lt;/code&gt; and use the following lines (libav and nvenc links) - &lt;a href=&quot;https://forum.ivorde.com/ffmpeg-error-while-loading-shared-libraries-libavdevice-so-52-cannot-open-shared-object-file-no-t129.html&quot;&gt;Source&lt;/a&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include /etc/ld.so.conf.d/*.conf
/usr/local/lib
/usr/lib/x86_64-linux-gnu/nvidia/current
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;OBS should have an error having to do with not being able to find &lt;code class=&quot;highlighter-rouge&quot;&gt;libcuda.so&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libnvidia-encode.so&lt;/code&gt;. These files are provided by installing the following libraries:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; jessie-backports libnvidia-encode1 libcuda1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ldconfig&lt;/code&gt; to create the links&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open up OBS and profit&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Getting myself up to speed was a hell of a joyride…&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s really not something I do everyday, but apparently, since I’ve broken my Debian computer so many damn times that I kinda have a routine of what programs to install and what packages to use. There were a few interesting changes and things that I’ve learned from my most recent failure (see my previous post for the retardation).</summary></entry><entry><title type="html">GitHub Pages Screwed Me Over</title><link href="https://agenttroll.github.io/blog/2017/04/08/github-pages-screwed-me-over.html" rel="alternate" type="text/html" title="GitHub Pages Screwed Me Over" /><published>2017-04-08T14:16:13-07:00</published><updated>2017-04-08T14:16:13-07:00</updated><id>https://agenttroll.github.io/blog/2017/04/08/github-pages-screwed-me-over</id><content type="html" xml:base="https://agenttroll.github.io/blog/2017/04/08/github-pages-screwed-me-over.html">&lt;p&gt;So I restarted my blog for like the 13th time or whatever and ran into a few
minor issues…&lt;/p&gt;

&lt;h1 id=&quot;octopress-3&quot;&gt;Octopress 3&lt;/h1&gt;

&lt;p&gt;Some good stuff. I actually kinda liked the old design, but some things about the new stock theme such as the About page in the top right corner, as well as the feature to add custom pages rather than to have just blog posts is nice (although I myself do not have any particular use for them).&lt;/p&gt;

&lt;p&gt;The new Octopress gem is also a nice addition instead of having to use &lt;code class=&quot;highlighter-rouge&quot;&gt;rake&lt;/code&gt; to do whatever I needed. The only thing about it is that you cannot convert posts to drafts, for it throws an odd exception along the lines of:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;unpublish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`require': cannot load such file -- octopress/post (LoadError)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don’t know ruby so there’s nothing I can do about that ¯\_(ツ)_/¯&lt;/p&gt;

&lt;p&gt;Anyways, you might see that my huge “&lt;a href=&quot;https://agenttroll.github.io/blog/2017/03/20/on-thread-safety.html&quot;&gt;On Thread Safety&lt;/a&gt;” post is incomplete, so if you were wondering why, blame Octopress’s non-functional &lt;code class=&quot;highlighter-rouge&quot;&gt;unpublish&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Other than that, it’s the same old Octopress. Good stuff.&lt;/p&gt;

&lt;h1 id=&quot;github-pages-integration&quot;&gt;GitHub Pages integration&lt;/h1&gt;

&lt;p&gt;Just a minor technicality, an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file &lt;strong&gt;WILL NOT&lt;/strong&gt; be loaded if the site is pushed to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. It took about 10 minutes for me realize that my blog was not loading due to it being on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, rather than GitHub Pages just updating the page.&lt;/p&gt;

&lt;p&gt;Even though a GitHub Pages site works on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, if you want your index.html to show up on the root URL, then you must use &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Had I pushed to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, I would need to use the URL &lt;code class=&quot;highlighter-rouge&quot;&gt;https://agenttroll.github.io/blog/index.html&lt;/code&gt;, rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;https://agenttroll.github.io/blog&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Anyways, its just me complaining about a minor quirk with GitHub Pages and the way it resolves URLs and some updates with Octopress.&lt;/p&gt;

&lt;p&gt;BONUS EDIT:&lt;/p&gt;

&lt;p&gt;After reading through my blog, I found that Octopress &lt;strong&gt;DOES NOT&lt;/strong&gt; rebuild your pages when you do &lt;code class=&quot;highlighter-rouge&quot;&gt;octopress deploy&lt;/code&gt;. What essentially happened was because I was using &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; to preview the blog before publishing it, all the &lt;code class=&quot;highlighter-rouge&quot;&gt;https://agenttroll.github.io&lt;/code&gt; tags resolved to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; instead of the intended page URL. Therefore, if you want to get all the right page variables, use:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; octopress deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">So I restarted my blog for like the 13th time or whatever and ran into a few minor issues…</summary></entry><entry><title type="html">I Finally Figured Out How to Get FFmpeg to Work on Mixed Jessie/sid</title><link href="https://agenttroll.github.io/blog/2017/04/04/i-finally-figured-out-how-to-get-ffmpeg-to-work-on-mixed-jessie-sid.html" rel="alternate" type="text/html" title="I Finally Figured Out How to Get FFmpeg to Work on Mixed Jessie/sid" /><published>2017-04-04T23:42:58-07:00</published><updated>2017-04-04T23:42:58-07:00</updated><id>https://agenttroll.github.io/blog/2017/04/04/i-finally-figured-out-how-to-get-ffmpeg-to-work-on-mixed-jessie-sid</id><content type="html" xml:base="https://agenttroll.github.io/blog/2017/04/04/i-finally-figured-out-how-to-get-ffmpeg-to-work-on-mixed-jessie-sid.html">&lt;p&gt;&lt;strong&gt;MAJOR EDIT: &lt;a href=&quot;https://wiki.debian.org/DontBreakDebian&quot;&gt;DO NOT DO THIS&lt;/a&gt;!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PLEASE PLEASE avoid using sid/jessie repos at the same time, I SEVERELY broke the apt-get package manager by doing this and ended up not being able to recover. I ended up having to reinstall the entire Debian OS, lmao.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Recently adding the &lt;a href=&quot;&quot;&gt;Debian sid&lt;/a&gt; repos to my &lt;code class=&quot;highlighter-rouge&quot;&gt;sources.list&lt;/code&gt;, I found that upgrading a certain few packages related to &lt;a href=&quot;https://wiki.debian.org/iPhone&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libimobiledevice-dev&lt;/code&gt;&lt;/a&gt; (in order to transfer photos from my iPhone 6S to my computer) caused other libraries to be needed to be upated. Of course, out of all the possible libraries, one of the libraries that was updated broke FFmpeg.&lt;/del&gt;&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;&lt;del&gt;Background&lt;del&gt;&lt;/del&gt;&lt;/del&gt;&lt;/h1&gt;

&lt;p&gt;&lt;del&gt;I was led on this frustrating adventure by my desire to move pictures from my iPhone to my computer. I could have gone the simple way and just used iTunes or something on a Windows computer, but you know what? It just happens that I have a backup folder already with all my photos on my Debian computer.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Simply the most magical thing about Debian is how I was able to USB transfer all the earlier photos from my phone to my computer without trouble, but I’d get Unhandled lockdown errors whenever I mount my iPhone this time around.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Forgetting to read the portion about using the &lt;a href=&quot;https://wiki.debian.org/iPhone#backporting_libimobiledevice_1.1.1_to_Squeeze&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jessie-backports&lt;/code&gt; workaround&lt;/a&gt;, I rashly went to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;sid&lt;/code&gt; repos instead…&lt;/del&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;&lt;del&gt;The Problem&lt;/del&gt;&lt;/h1&gt;

&lt;p&gt;&lt;del&gt;A few packages later (using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get dist-upgrade&lt;/code&gt; I think?), I was rather surprised to find that &lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS&lt;/a&gt; had stopped working. Whenever I’d enter &lt;code class=&quot;highlighter-rouge&quot;&gt;obs&lt;/code&gt; into terminal, it would spit out something like the following:&lt;/del&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;obs: symbol lookup error: /usr/lib/x86_64-linux-gnu/libass.so.5
undefined symbol: FT_Outline_EmboldenXY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;No problem. Can’t be part of the package update, right… (it was)? I do a quick google search and discovered the &lt;a href=&quot;http://askubuntu.com/a/659630&quot;&gt;following&lt;/a&gt;:&lt;/del&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;This was related to FFmpeg, not actually OBS&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;This works:&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/lib/x86_64-linux-gnu
ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;The latter point was in particular, the most baffling thing about the whole issue. I couldn’t comprehend how being in a specific library directory ended up allowing FFmpeg to work. I did not want to have to switch into this directory every time I needed to use FFmpeg, so I decided to attempted to fix the issue by compiling a new version of FFmpeg…&lt;/del&gt;&lt;/p&gt;

&lt;h1 id=&quot;fixing-it&quot;&gt;&lt;del&gt;Fixing it&lt;/del&gt;&lt;/h1&gt;

&lt;p&gt;&lt;del&gt;I decided to recompile FFmpeg to try my luck and see if it is simply a minor library error (?? not even sure what I was thinking at the time).&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Now I tried a wide variety of different compile options, including &lt;a href=&quot;https://github.com/lutris/ffmpeg-nvenc&quot;&gt;this nifty script&lt;/a&gt; which I used previously to install OBS and FFmpeg.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Surprise, surprise. It didn’t work.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Knowing that it was a problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;libass&lt;/code&gt;, I was damned to find that even the FFmpeg build in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sid&lt;/code&gt; repos did not even work with the &lt;code class=&quot;highlighter-rouge&quot;&gt;libass&lt;/code&gt; version packaged for that &lt;code class=&quot;highlighter-rouge&quot;&gt;jessie&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt;.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Basically in order to fix the problem, I cannot use dynamic links to the new version of libass, but I needed to retain a static link to the previous one with the FFmpeg binary.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;I actually had modified the previous script exactly for this purpose, but in being new to this whole static thing, I mixed up &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-shared&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-static&lt;/code&gt; flags multiple times. It turns out however, that the two don’t really have anything in particular that relates them. Unbeknownst to me, I kept trying different combinations of fruitlessly changing the flags only to get linking errors with &lt;code class=&quot;highlighter-rouge&quot;&gt;x264&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libass&lt;/code&gt;.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;In short, shared vs. static:&lt;/del&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;Shared flag - writes &lt;code class=&quot;highlighter-rouge&quot;&gt;.so&lt;/code&gt; files to the library path for other binaries that use dynamic libraries to load the library. Newer versions replace this &lt;code class=&quot;highlighter-rouge&quot;&gt;.so&lt;/code&gt; file with the newer version, thus updating for all binaries using this library.&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Static flag - does not use &lt;code class=&quot;highlighter-rouge&quot;&gt;.so&lt;/code&gt; file, but rather an &lt;code class=&quot;highlighter-rouge&quot;&gt;.a&lt;/code&gt; file that is always the same. Updates do not affect static libraries, as the name “static” implies.&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;del&gt;In the end, I went with using &lt;a href=&quot;https://github.com/zimbatm/ffmpeg-static&quot;&gt;this script&lt;/a&gt;, but with a few minor modifications:&lt;/del&gt;&lt;/p&gt;

&lt;div class=&quot;language-patch highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/build.sh b/build.sh
index f94fdbe..cfc8a61 100755
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/build.sh
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/build.sh
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -160,7 +160,7 @@ make install
&lt;/span&gt; echo &quot;*** Building libvpx ***&quot;
 cd $BUILD_DIR/libvpx*
 [ $rebuild -eq 1 -a -f Makefile ] &amp;amp;&amp;amp; make distclean || true
&lt;span class=&quot;gd&quot;&gt;-[ ! -f config.status ] &amp;amp;&amp;amp; PATH=&quot;$BIN_DIR:$PATH&quot; ./configure --prefix=$TARGET_DIR --disable-examples --disable-unit-tests --enable-pic
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+[ ! -f config.status ] &amp;amp;&amp;amp; PATH=&quot;$BIN_DIR:$PATH&quot; ./configure --prefix=$TARGET_DIR --disable-examples --disable-unit-tests --enable-shared --enable-pic
&lt;/span&gt; PATH=&quot;$BIN_DIR:$PATH&quot; make -j $jval
 make install
 
&lt;span class=&quot;gu&quot;&gt;@@ -196,6 +196,7 @@ PKG_CONFIG_PATH=&quot;$TARGET_DIR/lib/pkgconfig&quot; ./configure \
&lt;/span&gt;   --enable-libvpx \
   --enable-libx264 \
   --enable-libx265 \
&lt;span class=&quot;gi&quot;&gt;+  --enable-nvenc \
&lt;/span&gt;   --enable-nonfree
 PATH=&quot;$BIN_DIR:$PATH&quot; make -j$NPROC
 make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;I made a minor fix to VPX not being able to detected, although I am not completely sure how that is supposed to work.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;(Quick note: NVENC capability dynamically loads files from the library path from the nVidia SDK, no compilation needed. I did not add a script to download the files because a) the toolkit requires signing in and b) I already have the files)&lt;/del&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;del&gt;Conclusion&lt;/del&gt;&lt;/h1&gt;

&lt;p&gt;&lt;del&gt;I was eventually able to install OBS using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ffmpeg-static&lt;/code&gt; build script to build FFmpeg. Everything worked out in the end (except for one minor caveat that &lt;code class=&quot;highlighter-rouge&quot;&gt;ffplay&lt;/code&gt; is never compiled, I will need to figure that out). If OBS is missing an FFmpeg compile dependency, then use &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-shared&lt;/code&gt; to allow OBS to use them as well. Otherwise, errors such as missing &lt;code class=&quot;highlighter-rouge&quot;&gt;libswrescale&lt;/code&gt; can be fixed using the &lt;code class=&quot;highlighter-rouge&quot;&gt;sid&lt;/code&gt; packages.&lt;/del&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">MAJOR EDIT: DO NOT DO THIS!!</summary></entry><entry><title type="html">On Thread Safety</title><link href="https://agenttroll.github.io/blog/2017/03/20/on-thread-safety.html" rel="alternate" type="text/html" title="On Thread Safety" /><published>2017-03-20T18:21:17-07:00</published><updated>2017-03-20T18:21:17-07:00</updated><id>https://agenttroll.github.io/blog/2017/03/20/on-thread-safety</id><content type="html" xml:base="https://agenttroll.github.io/blog/2017/03/20/on-thread-safety.html">&lt;p&gt;&lt;a name=&quot;audience&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;-audience&quot;&gt;&lt;a href=&quot;#audience&quot;&gt;#&lt;/a&gt; AUDIENCE&lt;/h1&gt;

&lt;p&gt;A quick warning: I express a lot of liberty in choosing my word choice. I may insert some non-family-friendly/swear/curse words here and there for the entertainment of the reader or to express a strong point. If you are not allowed to read that type of thing, or are uncomfortable consuming them, please stop reading here. I will consider to write a cleaned-up version and post it sometime in the future.&lt;/p&gt;

&lt;p&gt;While I attempt to do my best to explain as many of the concepts as possible in layman terms, it may become very difficult to follow along with what I say if you have no prior programming experience. I recommend being a proficient programmer before reading this.&lt;/p&gt;

&lt;p&gt;I have also specifically targeted this post to Java. Whether or not what I say applies to other languages or concepts, I do not care nor do I intend to make those connections.&lt;/p&gt;

&lt;p&gt;I go from the very basics to some quite high-level topics in this post. If you are a professional dev who has worked in the industry for decades and already know how to write thread-safe code, good for you. I do not intend the beginning few sections to be targeted for you. If you are a beginner, you might find some of the concepts difficult to comprehend. That’s OK. If you need a break, go ahead and take one and let the information you’ve learned sink in.&lt;/p&gt;

&lt;p&gt;Finally, I really do try to my best of my ability to avoid making erreneous or overly biased, opininated claims. However, I am a human. I make mistakes. I have opinions. I am not responsible for your losses due to you using what I write to write your own code. Your code is your responsibility. My opinions do not represent those who I am associated with whether they be my (currently nonexistant) employer, my friends, etc. They are my own opinions only. I do not portray myself as superior in skill, age, or whatever in anyway to the reader. If you interpret what I write as so, feel free to stop reading and be a dick to me in retaliation (or politely call me out).&lt;/p&gt;

&lt;p&gt;With that said, I do hope that you will learn something out of reading what I have written.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;-introduction&quot;&gt;&lt;a href=&quot;#introduction&quot;&gt;#&lt;/a&gt; INTRODUCTION&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Asynchronous&lt;/li&gt;
  &lt;li&gt;Multithreaded&lt;/li&gt;
  &lt;li&gt;Scalable&lt;/li&gt;
  &lt;li&gt;Parallel&lt;/li&gt;
  &lt;li&gt;Concurrent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heard of these words before?&lt;/p&gt;

&lt;p&gt;In case you’ve been living under a rock for over a (few) decade(s), or you are not a programmer, these are quite important concepts to understand in the modern world of computing. Parallelization is absolutely one of the most important ways that computers have become more and more powerful over the years, and the time has come for people to understand how to build software that truly takes advantage of parallelism rather than processor clock speeds.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;serial programs run on modern computers “waste” potential computing power.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;During the past 20+ years, the trends indicated by ever faster networks, distributed systems, and multi-processor computer architectures (even at the desktop level) clearly show that parallelism is the future of computing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;a href=&quot;https://computing.llnl.gov/tutorials/parallel_comp/#WhyUse&quot;&gt;Introduction to Parallel Computing, Lawrence Livermore National Labratory&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This changeover [from favoring high clock speeds to favoring multicore processors instead] had a profound impact on software performance. Previously, faster hardware speeds translated directly into faster software computation. Afterwards, only software that could take advantage of multiple processors would get this benefit – and not all of them could&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;a href=&quot;http://funginstitute.berkeley.edu/wp-content/uploads/2013/12/Neil_Thompson-27s_Moore-27s_Law_Paper_-_Summary.pdf&quot;&gt;Moore’s Law Goes Multicore, Berkeley Haas School of Business&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;It turns out that the benefit that comes from exploiting multiprocessors is a double-edged blade. We find that there is a &lt;em&gt;minor&lt;/em&gt; difficulty with developing software that is capable of multithreading, that is, ensuring that these applications are &lt;strong&gt;thread-safe&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;(Quick side note: multithreading is an extremely difficult topic to organize and talk about. Ideas jump all over the place and there are many different things that all contribute to fully understanding one big thing, and the little things cannot be organized into different, larger subgroups)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;what-is-thread-safety&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;-what-is-thread-safety&quot;&gt;&lt;a href=&quot;#what-is-thread-safety&quot;&gt;#&lt;/a&gt; WHAT IS THREAD-SAFETY?&lt;/h1&gt;

&lt;p&gt;When sharing data between threads, it is vitally important to realize that the same assumptions about the ordering of operations cannot be held true for multithreaded programs as they are for single-threaded ones.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a small side note, single-threaded programs are not truly single-threaded. While what the programmer does is single-threaded - things like the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; method - the program as a whole is not. There are threads managed by the JVM in the background, such as the GC thread(s), the JIT thread(s), maybe RMI threads or Ctrl-Break monitor threads if applicable, among others. This means that while there are never truly “single-threaded” programs in the strictest definition of the term, it is important to realise that threads in the JVM sub-system do not interfere or comprimise the thread-safety of a “single-threaded” program. If the programmer does not interact with additional threads other than the main thread which runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; method, &lt;strong&gt;there are no thread-safety issues with the code. In the absence of program-level threads, it is &lt;em&gt;impossible&lt;/em&gt; for thread-safety to be a problem&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea of making a program thread-safe is the same as making what is arbitrary predictable. &lt;strong&gt;The nature of threads is that they run independently of each other&lt;/strong&gt;. In doing so, it is impossible to determine the timing between operations or the effects of a read or write on a state variable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;State&lt;/strong&gt;: When I use “state” or “shared state,” I refer to data to which a thread might be able to read or write. It is a general term used to describe whatever is made available to threads to access. This may be an instance object that is passed around, a global variable, a class field. For example, I can say that a thread will mutate a state by incrementing it, or a thread can mutate a state by setting its value, because the “state” is the data that the thread is accessing and mutating, or changing in some way. I can also say that a thread will read the state of an object to say that the thread will be able to use the object’s getters to obtain the value of its fields.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;While the issues relating to thread-safety are diverse and expansive, most issues can be boiled down to either an ordering or visibility issue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The nature of &lt;em&gt;most&lt;/em&gt; programs is that they must enforce a relationship between its threads in order to calculate a result, to report back the status of an operation, to listen to events, etc… All of these require threads to be dependent on each other, against their independent nature:&lt;/p&gt;

&lt;p&gt;If it were possible to isolate visibility issues, then surprising behavior that results from this can be seen in the following diagram of two threads accessing a shared state:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/Visibility.jpg&quot; alt=&quot;Visbility&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the absence of adequate synchronization, the above diagram demonstrates how &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread 1&lt;/code&gt; continued to read a “stale” value of &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; from a shared state, before but also after &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread 2&lt;/code&gt; has set it to &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;. The effect of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; to the shared variable was therefore not visible to &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also consider the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MutableState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the absence of adequate synchronization between threads, there can be no correct assumptions about the order of operations. Recalling that threads are arbitrary and independent, it is entirely possible for &lt;code class=&quot;highlighter-rouge&quot;&gt;t1&lt;/code&gt; to start AFTER &lt;code class=&quot;highlighter-rouge&quot;&gt;t2&lt;/code&gt;. It is also possible for &lt;code class=&quot;highlighter-rouge&quot;&gt;t1&lt;/code&gt; to run as expected before &lt;code class=&quot;highlighter-rouge&quot;&gt;t2&lt;/code&gt;, but there are no guarantees here. It is even possible for &lt;code class=&quot;highlighter-rouge&quot;&gt;t1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;state.mutate()&lt;/code&gt; &lt;em&gt;simultaneously&lt;/em&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;t2&lt;/code&gt;. To further our visibility example, it is further possible for &lt;code class=&quot;highlighter-rouge&quot;&gt;t2&lt;/code&gt; to not even see what changes have been made by &lt;code class=&quot;highlighter-rouge&quot;&gt;t1&lt;/code&gt;. In effect, the results of running these two threads are then arbitrary and indeterminate as well.&lt;/p&gt;

&lt;p&gt;This is the heart of thread-safety. Through using tools such as locks, synchronization tools, atomic variables and others, code that is not thread-safe can be tamed and used to exploit modern multiprocessors.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;what-causes-threads-to-behave-this-way&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;-what-causes-threads-to-behave-this-way&quot;&gt;&lt;a href=&quot;#what-causes-threads-to-behave-this-way&quot;&gt;#&lt;/a&gt; WHAT CAUSES THREADS TO BEHAVE THIS WAY?&lt;/h1&gt;

&lt;p&gt;Having some basic idea of what “thread-safety” is, I believe that there is benefit in discussing the nitty gritty details of why threads behave in this “independent” manner. There tends to be a lot of widespread use of mere analogies in order to explain why thread-safety is a problem and this in itself has caused issues on its own, much like how parents might avoid talking about sexual intercourse with their children until they are older.&lt;/p&gt;

&lt;p&gt;Going along the same vein with the “messy details” of multithreading, I think now would be a good time to also discuss some drawbacks of writing multithreaded programs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They are difficult to write correctly&lt;/li&gt;
  &lt;li&gt;They are difficult to test for correctness&lt;/li&gt;
  &lt;li&gt;They are difficult to test for performance&lt;/li&gt;
  &lt;li&gt;They are difficult to understand multithreaded code&lt;/li&gt;
  &lt;li&gt;It is difficult to distribute work and tasks amongst threads&lt;/li&gt;
  &lt;li&gt;It is difficult to do resource management - deadlocks, livelocks, starvation&lt;/li&gt;
  &lt;li&gt;Coercing system resources to initialize a thread is relatively expensive&lt;/li&gt;
  &lt;li&gt;Locking, memory barriers, mutexes and other synchronization primitives add housekeeping overhead&lt;/li&gt;
  &lt;li&gt;Ordering and fencing memory access are not free&lt;/li&gt;
  &lt;li&gt;Distributing processor time by the thread scheduler comes with overhead&lt;/li&gt;
  &lt;li&gt;They sometimes cause degredation in performance due to poor implementaiton&lt;/li&gt;
  &lt;li&gt;They are prone to interfering with other threads or other programs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these different things you have to consider!&lt;/p&gt;

&lt;p&gt;What’s more, almost all of those issues can be attributed to thread safety! If it were possible to implement threading for free, none of these issues would exist at all! Which brings us to our next point of discussion: why threads cannot be free.&lt;/p&gt;

&lt;p&gt;Housekeeping overhead is easy - starting a new thread must coalesce resources such as memory in order to manage the thread state, allocate a stack to execute the provided task, initialize the internal state in order handle synchronization primitives etc… However, dealing with issues relating to thread-safety itself - visibility, ordering, and how different primitives are able to get around these problems - are a little more tricky.&lt;/p&gt;

&lt;p&gt;Recall again, that threads have the tendency to behave independently. This is so because an isolated thread is able to make certain optimizations and allow the CPU to execute instructions without having to worry about ordering read/write instructions. Thread independence makes single-threaded programs faster. This is the entire point: simpler programs are single-threaded, and thus the programmer should not have to worry about enabling optimizations that would have been disabled if threads were &lt;em&gt;not&lt;/em&gt; independent by default. In other words, single threaded is the default, and single-thread optimized instructions are the default.&lt;/p&gt;

&lt;p&gt;This becomes a problem when working with shared data because these optimizations are fundamentally incompatible and produce nondeterministic results unless the program is correctly synchronized. Specifically, when we refer to “single-thread optimizations,” we are referring to those done by the CPU cache subsystem. It is useful to learn a some background before moving on because it will help in understanding the how/why explanations I have provided. Fortunately, I have done most of the research for you here.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a minor aside, pretty much all explanations regarding internals of anything pertaining to Java is an “analogy” of some sort. The whole idea of Java is that it is such a high level language that you would not need to worry about all the hardware details in order to make your program portable. It is a lot more useful to think in terms of theoretical systems that “kind of resemble” real world hardware, but at the same time, it’s important to realize that the actual hardware running the program is probably slightly different, if not entirely different depending on the vendor, the model, the architecture, etc…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To start with, here is a generic CPU that might look something like an Intel quad-core that you might find in a typical desktop:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/CPU.jpg&quot; alt=&quot;CPU&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order of access latency, a CPU deals with memory by storing and caching in following spaces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Register(s) (Core-local)&lt;/li&gt;
  &lt;li&gt;L1 Cache (Core-local)&lt;/li&gt;
  &lt;li&gt;L2 Cache (Core-local)&lt;/li&gt;
  &lt;li&gt;L3 Cache&lt;/li&gt;
  &lt;li&gt;RAM/Main memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few interesting details to also note is that as access latency increases to successive memory spaces is firstly, that memory capacity increases (that is, registers can hold the smallest amount of memory while RAM can hold the greatest), and secondly, that they are increasingly further away from the ALU/FPU/Ctl units.&lt;/p&gt;

&lt;p&gt;In regards to memory capacity, it makes sense that the fastest memory is also the smallest because firstly, memory access will only need to traverse a short memory space in order to find the target register, and secondly, because low-latency memory is fucking expensive. A single gigabyte of SRAM memory costs &lt;em&gt;$5000 USD&lt;/em&gt;, so DRAM memory is used for larger memory spaces. In the end, faster memory is kept small in order to reduce access time and production cost.&lt;/p&gt;

&lt;p&gt;In regards to memory distance, this also makes sense because communicating between the calculation units and the memory space is not instantaneous, and that physical distance does in fact have an effect on memory access latency: the more distance, the more time it will take to contact and receive a response.&lt;/p&gt;

&lt;p&gt;All this is interesting and all… But how does it apply to threads specifically?&lt;/p&gt;

&lt;p&gt;Threads are scheduled to run on a specific core. While the thread is running, it occupies the entire core (or perhaps shares with only one other thread when using Hyperthreading or whatever AMD uses. Again, recall the “analogy” aside from above) and another core may not access the thread while it is being used by another. The number one optimization that will be done is to retain memory accessed by a single thread as closely to the core that is currently running that thread as possible. So ideally, a thread will write to the registers, and failing that, the local caches and continues to look for the fastest possible cache and only resorts to writing to RAM if absolutely necessary. By keeping data local to the core, should the thread reuse the same value again (which is not an unlikely event in a single-threaded program), it will pull from the cache rather than going straight to main memory. Because main memory is &lt;em&gt;excedingly&lt;/em&gt; expensive, at least relative to the prior caches, a single-threaded program can save a significant number of cycles from being wasted on going back to RAM in order to find that value.&lt;/p&gt;

&lt;p&gt;It is the selfish, cache hoarding done by the core currently running the thread that causes threads to exhibit their independent behavior. By making this selfishness the default, single-threaded programs will run faster and will have more access to CPU pipeline optimizations as well as make time for the processor to proceed with other tasks rather than wasting time publishing variables across the shared memory bus that will never be used by any other core anyways. For example, a program might want to look up some variable &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; that is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; in main memory. The first time around, the lookup for &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; will result in a cache miss, and the core will load &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; into, say, the L2 cache space. The next time &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is referenced, the core can simply lookup from the L2 rather than having to make another expensive lookup to main memory. As it relates specifically to visibility, cache coherency becomes important for multithreaded programs because another thread might want to access to &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; as well, and rather than going back to main memory, it’s very much possible for a second core to hop the memory bus instead. The different local cache spaces in the CPU are then subject to their own rules on data visibility in order to propagate to the program, laid out by such protocols as the MESI or MOESI models.&lt;/p&gt;

&lt;p&gt;Again, speaking in terms of cache mechanics, it is possible for a thread to be run by multiple cores over its lifetime (although not simultaneously by two cores). When threads are relinquished from one core and passed to the next, it is possible for the second core to take the cache as the truth, and in the case that our &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; state was stored in a local register or L1/2 cache, a lookup by the second core will lead to a cache miss as the state was updated in only the first core’s caches. Another scenario could take place on a CPU using the write-through policy in which main memory is the “source of truth” rather than the local caches. In this case, the second core would travel to main memory to load the “truth” value into its cache, but there’s a catch: on our hypothetical CPU, a write-through policy will propagate randomly, and it just so happens that our second core will read a stale value of &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; because the first core’s write to &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; has not propagated yet.&lt;/p&gt;

&lt;p&gt;Ordering, on the other hand, has to do with buffering stores and loads on the local core. On processors that perform pipelining, yet another optimization can be done to put reads and writes on a buffer since memory lookups take time to complete while instructions are being cycled through the pipeline. This is the reason behind the “optimization” done which produces results that appear seemingly out of order. Operating sequentially, instructions will finish before the next buffered load/store operation, but when introducing other threads, an uneven number of reads and writes could cause reads to be processed before the write in the case that the write buffer has been polluted, and vice versa. Using memory ordering devices such as barriers or fences, preceding operations would be finished upon reaching the fence such that the two buffers are synchronized with each other at the point of the fence, and that instructions would not “flow past the fence” in that the core would stall on an instruction that could possibly be pipelined rather than executing it prematurely and in effect causing it to seem as if the instruction was reordered before its counterpart. Again, recall that memory fencing is yet another analogy; for the most part, x86 CPUs that do have these buffers do in fact use memory fencing, but some CPUs cannot rely on just fencing to produce the correct ordering. The JVM handles these other architectures already, so as to make unnecessary the programmer having to reason about where to put those barriers and any extra instructions needed to correctly synchronize the caches.&lt;/p&gt;

&lt;p&gt;In truth, we can continue to speak about hypothetical processors and waving our hands in the air as we speak passionately about cache misses and such. Different processors handle caching in different ways, and it is simply best to leave the underlying systems as a black box that act on higher-level rules and paradigms instead. There are lots of smart people working on solutions to these problems, and lots of people who spend lots of time thinking and reasoning about how their hardware interacts with their programs, but in the end, the goal of the Java language is the same: write once, run anywhere. The Java Memory Model sets standards for compilers and JVMs to adhere, and these higher-level rules that deal with &lt;em&gt;happens-before&lt;/em&gt; ordering, synchronization ordering and the like are significantly easier for programmers to understand and write adherent code.&lt;/p&gt;

&lt;p&gt;I’ve said before that understanding these nuances between architectures simply isn’t useful to just about everyone, save for those who work with designing compilers and JVMs. You do not need to understand the hardware in order to understand the memory model, and even if you did understand these little details, they are of little use to other systems that might be running your program, they are prone to failing, they make programs more difficult to write and understand, and they are not concrete. You cannot rely on the same guarantees to hold true for the hardware that you can when running code that uses more robust tools such as &lt;code class=&quot;highlighter-rouge&quot;&gt;volatile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.concurrent&lt;/code&gt;, and others which are designed as building blocks to write thread-safe programs. In the end, the idea is that the hardware has been dealt with already, so you do not have to.&lt;/p&gt;

&lt;p&gt;Sources used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mechanical-sympathy.blogspot.com/2013/02/cpu-cache-flushing-fallacy.html&quot;&gt;CPU Cache Flushing Fallacy, Mechanical Sympathy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html&quot;&gt;Memory Barriers/Fences, Mechanical Sympathy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.javamex.com/tutorials/threads/thread_scheduling_java.shtml&quot;&gt;Thread scheduling implications in Java, Javamex&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.javamex.com/tutorials/threads/context_switch.shtml&quot;&gt;Context and process switching, Javamex&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~fp/courses/15213-s06/lectures/27-multicore.pdf&quot;&gt;Multi-core architectures, Carnegie Mellon University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.cmu.edu/afs/cs/academic/class/15418-s12/www/lectures/10_coherence.pdf&quot;&gt;Lecture 10: Cache Coherence: Part I, Carnegie Mellon University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scss.tcd.ie/Jeremy.Jones/vivio/caches/MESIHelp.htm&quot;&gt;MESI Cache Coherency Protocol, Trinity College Dublin, the University of Dublin, Ireland&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://web.cecs.pdx.edu/~alaa/ece587/notes/memory-ordering.pdf&quot;&gt;Memory Ordering, Portland State University&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;how-to-write-thread-safe-code&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;-how-to-write-thread-safe-code&quot;&gt;&lt;a href=&quot;#how-to-write-thread-safe-code&quot;&gt;#&lt;/a&gt; HOW TO WRITE THREAD-SAFE CODE?&lt;/h1&gt;

&lt;p&gt;Having a little background information on the subject of thread-safety, it’s now a good time to deal with the elephant in the room. How are thread-safe programs built and written? What kind of reasoning needs to be used? What are you supposed to even do in order to adhere to the memory model?&lt;/p&gt;</content><author><name></name></author><summary type="html"># AUDIENCE</summary></entry></feed>