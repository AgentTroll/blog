<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://agenttroll.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://agenttroll.github.io/blog/" rel="alternate" type="text/html" /><updated>2019-04-09T20:57:06-07:00</updated><id>https://agenttroll.github.io/blog/</id><title type="html">Inside a Troll</title><subtitle>Thoughts of a Java developer</subtitle><entry><title type="html">Lessons Learned Debugging: Part 2</title><link href="https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 2" /><published>2019-04-08T22:03:10-07:00</published><updated>2019-04-08T22:03:10-07:00</updated><id>https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html">&lt;p&gt;One of the recurring problems that will cause you headaches
is the throwing of exceptions where you &lt;em&gt;don’t want them to
be thrown&lt;/em&gt;. Among these exceptions, one of the most elusive
is &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-concurrentmodificationexception&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;?&lt;/h1&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;, or a CME, as I will
refer to it from here on out, is caused by a change, or a
modification, to a collection while iterating over it.
The most common example of this happening is through
something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reason you cannot do this is because it will cause the
Iterator to lose track of where it is. For example, in a
collection with 10 elements, if you remove the 3rd item and
the iterator is on the 4th element, what is the iterator
supposed to do? Is it supposed to now be on the 5th element
because everything shifts down? Are you supposed to stay on
the same 4th element and shift with the removal of the
item? It’s easier just to avoid the consistency issues and
throw an exception instead. We will get into how to get
around this later.&lt;/p&gt;

&lt;p&gt;A for-each loop is simply syntax sugar over an &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator&lt;/code&gt;.
In an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;, the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator#next()&lt;/code&gt; checks to
ensure that &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; has not changed, where &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; is
an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; that changes whenever the &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; has a
modification (such as through the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;#add(...)&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;#remove(...)&lt;/code&gt;). From the &lt;a href=&quot;https://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/util/ArrayList.java#l884&quot;&gt;ArrayList source&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkForComodification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedModCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConcurrentModificationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expectedModCount&lt;/code&gt; is the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; when the
iterator is constructed, or when the for-loop begins. A CME
is so serious of an exception because often, one can get
away without throwing the exception during testing. If a
collection contains only one element, the &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; will
change after &lt;code class=&quot;highlighter-rouge&quot;&gt;Itr#checkForComodification()&lt;/code&gt; has been
called, and no CME will be thrown. This is an issue because
one might populate a collection with only a single element
for the purposes of testing. It may be only one player,
because you are the only one testing the plugin, or it may
be only one object that you are storing to make sure that
something works. This is something that tends to slip into
production because it appears to work during testing.&lt;/p&gt;

&lt;p&gt;As a reminder, this can happen with any collection except
those that are thread-safe, so a &lt;code class=&quot;highlighter-rouge&quot;&gt;HashSet&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedList&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; are all succeptible to throwing a CME if you
iterate and modify at the same time.&lt;/p&gt;

&lt;h1 id=&quot;be-wary-of-iteration-and-unforeseen-side-effects&quot;&gt;Be Wary of Iteration and Unforeseen Side-Effects&lt;/h1&gt;

&lt;p&gt;One way to avoid making mistakes is to reuse paradigms that
are well understood, and that is known to already work. On
the opposite end, it is also imperative to recognize
certain paradigms that have a tendency to fail. Iteration
through Collections is one of those paradigms that you
should be on the lookout for. The simplicity of loops and
the monotony of perhaps writing them hundreds if not
thousands of times over can lower one’s guard against them.&lt;/p&gt;

&lt;p&gt;The trick is to proceed with caution when writing loops.
Ensure that you are truly only reading from them, and never
modifying the collection in the process.&lt;/p&gt;

&lt;p&gt;There are a few important exceptions to this where you are
completely safe from CME:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. You are using an indexed loop. If you remove
something, you are in control of the loop index, so
it's up to you to correct for the index of any item
shifting (if you are not using an indexed removal,
that is).
2. You are using a thread-safe collection. Iterators
provided by those classes are only weakly-consistent,
and it can potentially take time for modifications to
show up. If you are simply throwing away elements,
there's really nothing to worry about.
3. If you are using a safe method of modifying the
collection such as through `Iterator#remove()` or
using `#removeIf(...)`.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will also need to be cautious of side-effects of
methods called in the loop. For example, the following
snippet of code will throw a CME:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getViewers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closeInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upon initial inspection, it looks completely safe, it
doesn’t appear to be modifying the collection returned by
&lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory#getViewers()&lt;/code&gt;. However, this is another reason
why CMEs are so insidious. &lt;code class=&quot;highlighter-rouge&quot;&gt;HumanEntity#closeInventory()&lt;/code&gt;
interally removes the viewer from the &lt;code class=&quot;highlighter-rouge&quot;&gt;#getViewers()&lt;/code&gt;
collection, and so by closing the inventory, it will modify
the collection while you are still in a loop. This is only
one example from the Bukkit API, but I’m sure there are
more, I’ve just never personally had to deal with them.&lt;/p&gt;

&lt;p&gt;In this case, where you are not able to change the
&lt;code class=&quot;highlighter-rouge&quot;&gt;#closeInventory()&lt;/code&gt; method because it is written in the
API, you would make a copy of that collection and then
iterate over it:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getViewers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closeInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works because the new collection is a different
&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; and therefore uses a different iterator than
the actual collection of viewers. We can remove items from
the actual collection without affecting the elements in the
copy, and therefore no CME is thrown.&lt;/p&gt;

&lt;p&gt;It is tempting to use a workaround to creating an entirely
new deep copy of the collection, such as by using
&lt;code class=&quot;highlighter-rouge&quot;&gt;Collections#unmodifiableCollection(...)&lt;/code&gt;, or even by using
Google Guava’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterables.concat(...)&lt;/code&gt; to “hack” in a new
iterator. However, the problem is that both of these are
non-solutions because they &lt;em&gt;still depend on the underlying
iterator&lt;/em&gt;. You MUST create a new collection in order for
this to work.&lt;/p&gt;

&lt;h1 id=&quot;other-solutions&quot;&gt;Other Solutions&lt;/h1&gt;

&lt;p&gt;Instances such as the Inventory example don’t come up too
often, and sometimes you just need to run some unrelated
code to process the removed elements, or even just remove
a few elements from a loop outright.&lt;/p&gt;

&lt;p&gt;Nowadays, the most effective solution would be to use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;#removeIf(...)&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can even use this to process the elements that should
be removed if you so wish:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For those of us stuck on Java 7, or for reasons I might not
have forseen, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator#remove()&lt;/code&gt; in order to
do the same thing:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will also allow you to only partially iterate by using
&lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; if you so desire. A shortened form that scopes the
iterator for only a single loop will look like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of these code snippets will have the same effect of
removing &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;s starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;remove-me&lt;/code&gt;, so choose
whatever one you see fit. Once again, these will not work
if methods you are calling have the side effect of removing
the element from the collection anyways, such as 
demonstrated in the previous section, so you will be stuck
with having to deep-copy the entire collection for that.&lt;/p&gt;

&lt;p&gt;(I’m not sure why the API designers decided not to produce
a copy of the collection there. In the modern age of
Java 8, I would have personally returned a &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;, but
that luxury they didn’t have when &lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory&lt;/code&gt; was designed.
In fact, there should be no reason really why the returned
collection is mutable, at the very least, it needs to be
unmodifiable because other cleanup procedures need to be
run for someone to actually stop “viewing” an inventory.
Perhaps this could be a PR or something to return a
deep-copy as a defensive programming measure)&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There are solutions to CME, but it is up to the programmer
to actually be vigilant, and to never let their guard down
in spite of the appearance of simplicity of a loop. You
must train yourself to recognize and check yourself when
you are writing loops, because a CME might also slip past
during testing as I’ve discussed before. This paradigm is
the second lesson in this series of posts.&lt;/p&gt;

&lt;p&gt;I leave with the following wisdom from &lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While these tips are not necessarily rules that are
responsible for keeping people alive, incorporating the
same philosophy into your programming repertoire will help
you in the long run.&lt;/p&gt;</content><author><name></name></author><summary type="html">One of the recurring problems that will cause you headaches is the throwing of exceptions where you don’t want them to be thrown. Among these exceptions, one of the most elusive is ConcurrentModificationException.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 1</title><link href="https://agenttroll.github.io/blog/2019/03/20/lessons-learned-debugging-part-1.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 1" /><published>2019-03-20T22:27:00-07:00</published><updated>2019-03-20T22:27:00-07:00</updated><id>https://agenttroll.github.io/blog/2019/03/20/lessons-learned-debugging-part-1</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/03/20/lessons-learned-debugging-part-1.html">&lt;p&gt;This is going to be among the first in a blog series that
detail some of my work while at Intermissum to reduce
bugginess. Not only did I personally run into many
hardships in order to write better production-quality
plugins, this series will present me with new challenges in
the form of figuring out what to share, what not to share,
as well as what I am not &lt;em&gt;allowed&lt;/em&gt; to share.&lt;/p&gt;

&lt;h1 id=&quot;splitting-up-your-code&quot;&gt;Splitting Up Your Code&lt;/h1&gt;

&lt;p&gt;The first lesson, while it may seem obvious to some, is to
always split up your code. What I used to do was place a
large majority of my code in the main class, reasoning that
the more I can keep in the main class, the less classes and
therefore the less complexity I will have to deal with.
There are often &lt;a href=&quot;https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition&quot;&gt;memes&lt;/a&gt; 
that stigmatize complexity or “enterprise” design in a 
negative light. While monolithic codebases such as the
Spring framework with sprawling abstractions for each and
every possible purpose might add credit to this stigma,
using abstractions and creating purpose-built classes can
improve your code quality and productivity vastly.&lt;/p&gt;

&lt;p&gt;Some of the many advantages to splitting up your code
include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Less mental overhead to keep track of where specific
  code segments are in your file&lt;/li&gt;
  &lt;li&gt;It is easier to navigate classes that have a purpose
  rather than through a file that has many purposes&lt;/li&gt;
  &lt;li&gt;It will be easier to browse and evaluate what the
  plugin is doing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these will contribute to less buggy code, because
you will be less mentally fatigued by housekeeping while
you are writing the code, as well as being able to more
quickly debug and walk through the call trace in a logical
fashion. Splitting up my code in a sensible way was far and
away one of the most effective steps I took in reducing the
bugginess of my code.&lt;/p&gt;

&lt;h1 id=&quot;drawbacks&quot;&gt;Drawbacks?&lt;/h1&gt;

&lt;p&gt;You will feel like you are less productive initially if you
are not used to the workflow. You are going to feel like
creating new files is such a pain, how you need to set
everything up, how writing more pragmatic and clean code
takes up so much space and isn’t as elegant as what you
would have figured out when writing code that fits into a
single class.&lt;/p&gt;

&lt;p&gt;You will feel like you’re creating classes all the time and
not writing enough code. You will feel like there’s so much
boilerplate, and the gains you are making are marginal.
But I implore you to trust me on this one. You are clearing
out mental clutter. You are making less mistakes, because
you are taking time to really understand the code and how
it all fits into the big picture. You are slowing down when
you write code, so you have less bugs down the line to have
to fix. I cannot stress enough that this is something that
has been tried and tested dozens upon dozens of times, and
that I myself have found success in being more watchful
over my tendency to write spaghetti code.&lt;/p&gt;

&lt;p&gt;You will thank yourself in the future, when you have to
look back over your code, because it is so much easier to
understand. You will see that you have gotten better at
recognizing the responsibility of each component of your
code. You will become a better engineer, because you will
have gotten closer to &lt;em&gt;designing&lt;/em&gt; your code rather than
simply &lt;em&gt;writing&lt;/em&gt; your code. These are skills that you build
up by changing poor programming practices, so it pays to
really evaluate yourself now.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There you go, that’s tip #1 done. These are meant to be
simple, short, and practical. If you’ve been disappointed,
then hopefully the next one will offer some insight you
yourself have missed.&lt;/p&gt;

&lt;p&gt;I leave with the following wisdom from &lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While these tips are not necessarily rules that are
responsible for keeping people alive, incorporating the
same philosophy into your programming repertoire will help
you in the long run.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is going to be among the first in a blog series that detail some of my work while at Intermissum to reduce bugginess. Not only did I personally run into many hardships in order to write better production-quality plugins, this series will present me with new challenges in the form of figuring out what to share, what not to share, as well as what I am not allowed to share.</summary></entry><entry><title type="html">My Biggest Mistake</title><link href="https://agenttroll.github.io/blog/2019/03/20/my-biggest-mistake.html" rel="alternate" type="text/html" title="My Biggest Mistake" /><published>2019-03-20T22:24:50-07:00</published><updated>2019-03-20T22:24:50-07:00</updated><id>https://agenttroll.github.io/blog/2019/03/20/my-biggest-mistake</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/03/20/my-biggest-mistake.html">&lt;p&gt;Quick note, this is NOT clickbait.&lt;/p&gt;

&lt;p&gt;I’ve been around the Bukkit server-modding community for a
while now. Not as long as some people, of course, but still
a pretty long time nevertheless.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/feb-28-2013.png&quot; alt=&quot;Bukkit Forums Member Since Feb 28, 2013&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the 6 years I’ve spent posting thousands of times on
both the Bukkit Forums and the Spigot forums, I look back
and regret one singular thing about myself: being a
self-entitled brat.&lt;/p&gt;

&lt;h1 id=&quot;aggressive-at-best-malicious-at-worst&quot;&gt;Aggressive At Best, Malicious At Worst&lt;/h1&gt;

&lt;p&gt;I would say that a large majority of the posts I’ve made
involved commenting on someone else’s code. In many, or
even most of the threads I’ve posted on, I’ve found that
my responses tend to assume the worst of intentions.
Here’s just &lt;a href=&quot;https://bukkit.org/threads/exonrunnable-a-new-runnable.390040/#post-3251252&quot;&gt;one example&lt;/a&gt; from late 2015:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-1.png&quot; alt=&quot;Mistake Exhibit 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While I admit that even now I thought that the post to
which I was responding sounded pretentious, that does not
justify an equally aggressive response in return. For a
developer who is not experienced in writing multithreaded
code (the type of developer that tends to be commonly
found more often than not), it is understandable that they
do not understand the performance implications of Timer
as someone like myself (which isn’t to say that I am an
expert myself, mind you). In no way was it necessary for me
to interject with “Oh.”  and “Oh wow!” and even saying
“BIG performance penalty.” Not only did this kind of
response bring me down to the level of the aforementioned
user, it detracted away from the informative aspect of my
post. It made me sound childish and juvenile, when the
value of the advice I gave should have been given greater
emphasis instead of the presentation of my opinion.&lt;/p&gt;

&lt;p&gt;Here’s a continuation of the same post:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-2.png&quot; alt=&quot;Mistake Exhibit 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, for a novice user, it makes sense that they are
making paradigm mistakes, that is simply the nature of
learning programming. The fact that I latched on to their
“stupidity” by saying “Just… What is this? You could quite literally […]”
rather than simply correcting their error indicates that
my criticism was not constructive by intention. It shows
that I was more concerned with commenting on the developer
rather than the code. It wasn’t necessary for me to
add interjections such as “What is this?” and then
leading myself into an example that would probably take up
5 lines rather than the 2 lines that I claimed, assuming
that the same brace style was used as the author (K&amp;amp;R? No
clue honestly what you’re supposed to call it lol).&lt;/p&gt;

&lt;p&gt;While the rest of the post is pretty flawed, here’s a
golden nugget:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-3.png&quot; alt=&quot;Mistake Exhibit 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Goodness, the “WRONG WRONG WRONG WRONG WRONG WRONG WRONG”
was not necessary at all. No information of use was
communicated and it shows again that I was interested less
in the information in the first place, and that I was more
interested in deriding the “stupidity” of the author, when
again, these are rookie mistakes. It is completely
understandable to not be &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;izing your fields and
classes as a novice programmer. The fact that the author
failed to do this indicated a lack of experience rather than
ignorance or stupidity as I have portrayed him/her to be.&lt;/p&gt;

&lt;p&gt;Lots of unnecessary information was written that would have
gone over the author’s head at the end, not sure what
exactly my intentions were there. I could honestly have
just said “here’s a benchmark” and then posted results
(which, as a matter of fact, I had failed to do) and then 
explained the results rather than making further pretentious
and unhelpful comments.&lt;/p&gt;

&lt;h1 id=&quot;and-another&quot;&gt;And Another&lt;/h1&gt;

&lt;p&gt;The examples of this same pretentious, bratty attitude
continues even farther into the past.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bukkit.org/threads/moving-packetplayoutparticles-with-entities.373750/#post-3172379&quot;&gt;Here’s another&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-4.png&quot; alt=&quot;Mistake Exhibit 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, I’m at it again with the long string of repeated
words with the “NONONONONONONONONONONONONONONONOOONONONONONONONONONONONONO.”&lt;/p&gt;

&lt;p&gt;Once again, adding interjections like this is for yet
another novice mistake is completely unnecessary. Needing
to even consider using this to emphasize a point probably
indicates a lack of imagination on my part. An argument
should ideally stand on its own without needing to have
unnecessary “fluff” such as the long string of “NONONO”
in order to draw attention to it. The fact that I did not
consider this in the writing of my post again goes to
show my lack of consideration of the author’s point of
view.&lt;/p&gt;

&lt;h1 id=&quot;the-finale&quot;&gt;The Finale&lt;/h1&gt;

&lt;p&gt;The many thousands of posts I’ve made number too many to
all have their place in this blog post, so I’ve selected
one of my most popular posts, the &lt;a href=&quot;https://bukkit.org/threads/make-a-minigame-plugin.168164/&quot;&gt;minigame tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-5.png&quot; alt=&quot;Mistake Exhibit 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is honestly a completely unnecessary comment. The
fact is that this is not even a prime candidate for async
code, so I see no reason for someone to even be considering
using this in an async context. The targeted audience,
intermediate level developers, probably aren’t even well
versed in the use of the scheduler anyways (although if
you are an intermediate developer and are skilled in the
use of the Bukkit scheduler, good on you). I think this was
a feeable attempt to assert my own mastery over threading
or something, but doing so made me look insecure and again
detracts from the main point of the post, which should
have been to educate intermediate-level developers on how
to take advantage of OOP in order to create a simple
minigame. It is ironic that I had to include that comment
in there when the post itself contained a number of bugs
pointed out by several users, such as &lt;a href=&quot;https://bukkit.org/threads/make-a-minigame-plugin.168164/#post-1814525&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;https://bukkit.org/threads/make-a-minigame-plugin.168164/page-2#post-1822616&quot;&gt;here&lt;/a&gt;,
and &lt;a href=&quot;https://bukkit.org/threads/make-a-minigame-plugin.168164/page-2#post-1822730&quot;&gt;here&lt;/a&gt;.
When I myself am having trouble even writing code that
compiles, others have written their thanks and support,
even after pointing out egregious errors that I have made.
When I posted comments that attack users and had aggressive
undertones, others who might not even be as skilled
developers as I was wrote insightful and friendly comments
instead.&lt;/p&gt;

&lt;p&gt;I even had the gall to include this comment prior to
pasting the post source:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-6.png&quot; alt=&quot;Mistake Exhibit 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the code fails to compile, and the post itself doesn’t
even look that good, I told others to source my post for
its &lt;em&gt;formatting&lt;/em&gt;. I thought so highly of myself, so highly
of the quality of work that I posted, that I even wanted
people to credit me for such a trivial aspect of it, an
aspect that looked terrible anyways.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;The many examples that I’ve posted paint me as a person
lacking self-awareness, brash, aggressive, and an
all-around first-class prick. While I’m not a completely
changed person yet, recognizing my toxicity has been
something of a revelation for me, and I continue to work
on actively trying to suppress my propensity for
passive-aggressiveness. These examples fail to do justice
for the amount of appalling comments that I’ve made, most
notably against the Sponge project, comments that I’ve not
yet had the opportunity to apologize for.&lt;/p&gt;

&lt;h1 id=&quot;closing-words&quot;&gt;Closing Words&lt;/h1&gt;

&lt;p&gt;One of the things that I’ve noticed was the fact that many
of my most malicious comments were well-received by people,
garnering several likes, such as in the case of the first
example. While again, the information was laid out
somewhere within the post itself, the lack of comment on
the fact that I was basically bullying the author of the
resource is something that I now find highly discomforting.&lt;/p&gt;

&lt;p&gt;The people who have been influenced by my comments have
already been affected, and there’s really nothing I can do
about it. I believe that by removing or editing out the
comments I’ve made, I will have destroyed and hidden 
something that actually happened, and thus those posts will
remain untouched. And while I cannot change what has
already been said, I can help prevent people from making
the same mistake as I did, the mistake of being a complete
self-entitled brat. Again, this is an issue that I continue
to deal with writing comments on the Spigot forums, and
even carefully thinking about my words will not prevent
everything from slipping through. But by sharing my
experience, I hope I can continue to improve.&lt;/p&gt;</content><author><name></name></author><summary type="html">Quick note, this is NOT clickbait.</summary></entry><entry><title type="html">Intro to Control Theory</title><link href="https://agenttroll.github.io/blog/2019/01/16/intro-to-control-theory.html" rel="alternate" type="text/html" title="Intro to Control Theory" /><published>2019-01-16T21:16:20-08:00</published><updated>2019-01-16T21:16:20-08:00</updated><id>https://agenttroll.github.io/blog/2019/01/16/intro-to-control-theory</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/01/16/intro-to-control-theory.html">&lt;p&gt;While I don’t profess to be an absolute expert at control theory, a lot of the information about the matter
that I’ve found online appears to be either inaccessible to the average Joe or simply flat-out unhelpful. 
Control Theory is often explained with mechanical controllers that don’t really have any application to the
software world, and it has been difficult for me personally to comprehend at all what is going on. In light of
this, I’ve decided to do a write up about what control theory is from the perspective of an implementor, 
rather than that of a theorist.&lt;/p&gt;

&lt;p&gt;That being said, control theory is still theory. That is, to understand the concept itself, you must
understand the theory. I do plan on going over the practical use of control theory in code later on in this
post, but I will first begin with theory.&lt;/p&gt;

&lt;p&gt;Feel free to drop me a message on Telegram if I’ve made any errors in my explanation, because I again do not
profess to be an expert at all in the subject.&lt;/p&gt;

&lt;h1 id=&quot;the-premise-of-control-theory&quot;&gt;The Premise of Control Theory&lt;/h1&gt;

&lt;p&gt;Control Theory is a branch of Computer Science that deals
with the manipulation of a physical system. When people
talk about Control Theory, they tend to use temperature
control as an example. Another common use of Control Theory
is in robotics, where the physical systems are the moving
parts of the robot such as arms and legs. The need for
Control Theory arises because the state of the environment
changes during the operation of a physical mechanism. In
order to control the distance that a robot moves for
example, one would need to know how powerful the motor is,
the frictional forces that will be experienced, such as
from the surface, from the ball bearings, potentially wind
resistance, etc. By taking all of these factors into
account, one can can calculate parameters such as current
and the time that a motor will need to run to move some
distance. This model, where all the information is
collected beforehand to compute a command that controls
a system is called an &lt;em&gt;open loop system&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-open-loop.svg&quot; alt=&quot;Open Loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the problem is that it would be impractical to 
have to measure or require a human to input the
potentially large number of different variables that
affect the system. This problem is solved by using a sensor
to measure the actual output of the system (in this case,
the actual distance the wheel of a robot rolls) and then
sending that information back to the software, which then
computes a new set of parameters to compensate for 
overshoot or undershoot of some target. This is called a
&lt;em&gt;closed-loop system&lt;/em&gt;, because information travels both in
the direction of the system being controlled, and in the
direction of the software controlling that system as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-closed-loop.svg&quot; alt=&quot;Closed Loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And while you will still need to understand certain
operating parameters of the physical system, you will not
need to account for every possible factor that will affect
the the physical result of a command.&lt;/p&gt;

&lt;p&gt;(As a quick side note, one would use a sensor when dealing
with autonomous systems. When humans are operating a
system, it is the human who takes note of whatever state
the system is currently in, and therefore, a system that
would otherwise be an open-loop becomes a closed-loop
system with human intervention)&lt;/p&gt;

&lt;p&gt;While I will be referring to the software control of
physical systems, control loops can also be built with
mechanical controls in the place of the software component
as well.&lt;/p&gt;

&lt;h1 id=&quot;abstract-view-of-closed-loop-systems&quot;&gt;Abstract View of Closed-Loop Systems&lt;/h1&gt;

&lt;p&gt;Physical systems do not react instantaneously. As such, a
closed-loop system will usually sample and send updates 
over time at fixed intervals.&lt;/p&gt;

&lt;p&gt;At the beginning of a procedure, a goal (or target or
setpoint) is defined for a system. This could be rolling a
particular distance for a wheel, or a room heating up to a
particular temperature, or a particular speed at which to
spin an axle, etc, so long as whatever sensor is equipped
on the device is capable of measuring it (e.g. an encoder
or a thermocouple). Then, the &lt;em&gt;error&lt;/em&gt; is computed by
subtracting the current state of the system from the
setpoint, where error is simply a metric of how far away
the current state of the mechanism is from where the 
setpoint  is. Finally, a command will be sent to compensate
for the error. This will be repeated at a set time interval
until the error becomes, or gets close enough to 0, meaning
that the mechanism has reached its setpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-abstract-loop.svg&quot; alt=&quot;Abstract Loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The process of computing the output based on the error
value is known as PID (sometimes PIDF), where the letters
stand for proportional, integral, derivative, and
feed-forward. Because PID is the main “controller” of a
mechanism, one often uses the term “PID control” or “PID
loop” to refer to a closed-loop control system. On the
above diagram, PID would be the “Compute output” portion of
the control loop.&lt;/p&gt;

&lt;p&gt;When you look up &lt;a href=&quot;https://en.wikipedia.org/wiki/PID_controller&quot;&gt;“PID Controller”&lt;/a&gt; on Wikipedia, you get
this image here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/cd581e5c8539ce46453574d1188bd9d52a610fe0&quot; alt=&quot;PID equation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(You will notice that there’s only 3 terms, and that I’ve
dropped the F from PID several times already. I’ll get into
why that is later on)&lt;/p&gt;

&lt;p&gt;This is a good starting point at which we can start to
implement a PID control loop. All the K values are simply
“gain” constants, which are used to control the power (for
lack of a better word) of the output. These are adjustible
in order to change the order of magnitude of the output, so
for example, a motor that takes an input between -1 m/s and
1 m/s would have smaller gain constants than a motor that
takes input between -10 m/s to 10 m/s. A user provides
these constants to the PID controller in advance. It takes
some degree of testing to figure out the best combination
of gain values, a topic which is out of scope of this
discussion of the PID equation for the time being.&lt;/p&gt;

&lt;p&gt;Each gain constant precedes a value that is proportional to
the instantaneous error, then the accumulated error, then
the rate at which the error is changing.&lt;/p&gt;

&lt;h1 id=&quot;pid-under-the-magnifying-glass&quot;&gt;PID Under The Magnifying Glass&lt;/h1&gt;

&lt;p&gt;The PID formula from the previous section takes all 3
terms and adds them together to produce the final output
value.&lt;/p&gt;

&lt;p&gt;The error values that go into a PID controller are almost
always some form of distance or displacement. For example,
this could be the distance a robot is from a target, or the
number of degrees off a desired temperature. However, error
can also be a rate in, such as the current rate of a pump 
compared to the desired rate of a pump. The concept for 
both of them are exactly the same, however, and the PID 
computation shouldn’t need to change so long as they are 
using distinct PID controllers. Either way, the bottom line
is that PID is simply a way to derive an output value based
on the input values. The behavior of the mechanism ends up 
being the same one way or another anyways, so don’t fret if
you’re worried about the rate being a derivative of
distance - it doesn’t matter. The end result is that you
want to obtain an output that gets you to where you want to
go, or to a rate at which you want to go at.&lt;/p&gt;

&lt;p&gt;The output of a PID controller is always a rate. It doesn’t
really make any sense to output a distance or displacement
value, because physical systems can control rate in order
to affect the distance from a setpoint. For example, a PID
controller can output a greater value to increase the speed
at which a wheel turns, or decrease the temperature of a
heating element to reduce the speed at which heat is
distrubuted into a room.&lt;/p&gt;

&lt;h4 id=&quot;the-p-term&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; term&lt;/h4&gt;

&lt;p&gt;The P term looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;K_p*e(t)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Meaning that it is derived from the proportional gain
constant multiplied by the most recently recorded error.&lt;/p&gt;

&lt;p&gt;The P term is the most powerful because it responds to all 
changes to the value of the error, and the gain constant 
for the proportional term is usually tuned first. Having a 
P term alone usually leads to erratic output values in 
close proximity to the error beacuse the P gain amplifies 
the error to the negatives if the mechanism overshoots, and
vice versa.&lt;/p&gt;

&lt;p&gt;A motion curve is typically used in robotics to show the
distanced travelled by a robot over time. I’ve used a
motion curve below to show the response to a PID loop
controlling the state of a system, where state can be a
temperature or a volume or a distance.&lt;/p&gt;

&lt;p&gt;A system with an overly large P value looks like the 
following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-p-unstable.svg&quot; alt=&quot;P unstable loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is often possible to acheive reasonably good results
using just the P term. One can adjuts the P gain until a
decent motion curve is produced, leaving all other gains
to 0. This is simply called a “P controller” or “P loop.”&lt;/p&gt;

&lt;h4 id=&quot;the-i-term&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; term&lt;/h4&gt;

&lt;p&gt;The I term looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;K_i*integrate(0, t, e(T), T)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Meaning that it is derived from multiplying the integral
gain by the accumulated error from time 0 to the current
time.&lt;/p&gt;

&lt;p&gt;Because the I term is related to the accumulated error, the
longer the robot is off target, the more powerful the I 
term becomes. The problem with the I term on its own is 
that it tends to overcompensate because the accumulated 
error must be reduced by an opposing physical action, which 
then overshoots and starts another oscillation cycle.&lt;/p&gt;

&lt;p&gt;This can be seen in a I only term loop here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-i-only.svg&quot; alt=&quot;I only loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most common type of control loop that I’ve personally
seen is a PI loop, in which only the P and I terms are
used. It’s rare to see a full PID(F) loop because it is
often more work to redetermine the gain constants than it 
is worth the marginal gains produced by adding an extra 
term.&lt;/p&gt;

&lt;p&gt;For example, consider the following P only loop, which
demonstrates the ability of a single P term to produce
relatively decent results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-p-stable.svg&quot; alt=&quot;P stable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An I term can be introduced to make a PI controller. This
will smooth out the motion curve when it reaches the
setpoint, and prevent a quick decceleration. You can see,
however, that there is some degree of overshoot when an I
term is introduced:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pi.svg&quot; alt=&quot;PI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;http://www.ni.com/en-us/innovations/white-papers/06/pid-theory-explained.html&quot;&gt;PID Theory Explained&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some amount of overshoot is always necessary for a fast 
system so that it could respond to changes immediately&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;the-d-term&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; term&lt;/h4&gt;

&lt;p&gt;The D term looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;K_d*derive(e(t), t)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Meaning that it is derived from the product of the
derivative gain and the instantaneous rate of change for 
the error.&lt;/p&gt;

&lt;p&gt;The D term is related to the rate at which error changes.
The faster the mechanism moves away from its setpoint, the
more powerful the D term becomes. Unlike the other two
terms, the D term does not respond directly to rate, but
rather the change in rate. Therefore, it is not possible to
have a D only system. The effect of the D term is to
reduce the rate at which the error grows, therefore
flattening the error line. This is useful for more stable
mechanisms that require the output to be adjusted to
reduce the power of the P term.&lt;/p&gt;

&lt;p&gt;It’s probably easier to see it on a graph. Here’s a PD loop
with the D gain set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pd-0.svg&quot; alt=&quot;PD - D = 0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, compare that to a PD loop with the D gain raised
slightly:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pd-06.svg&quot; alt=&quot;PD - D = 0.6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The D term is problematic sometimes because setting the D
gain to to high of a value will cause the output to
oscillate extremely rapidly. This can also happen when
there are a lot of environmental disturbances that cause
the D term to overreact:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pd-massive.svg&quot; alt=&quot;PD - D = massive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my experience, I tend to see controllers using mostly
P and I terms, but usually no D term. The Wikipedia page
has this to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Derivative action is seldom used in practice though – by
one estimate in only 25% of deployed controllers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although this claim requires citation, it is easy to see
that the D term isn’t too significantly useful for the
vast majority of applications where PI term controllers
are used instead. When the D gain is raised, the D term
tends to “fight” against the other two terms because it
wants to flatten the motion curve, when the other two terms
actually want the curve to get closer to the setpoint:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pd-07.svg&quot; alt=&quot;PD - D = 0.7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the D term is used, it tends to be used in a full PID
loop to control the I term overshoot. PD loops are also
found in the wild, but again, anything with a D term tends
to be quite rare compared to P and PI loops.&lt;/p&gt;

&lt;h4 id=&quot;the-f-term&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; term&lt;/h4&gt;

&lt;p&gt;The F term is special because it is often left out of the
“PID” initialism. In part, this is due to the fact that
feed-forward is the application of a constant output,
regardless of the state of the mechanism. The actual
equation for a full PIDF loop looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;u(t) = K_p*e(t) + K_i*integrate(0, t, e(T), T) + K_d*derive(e(t), t) + K_f*SP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where the F term is derived from the product of the
feed-forward gain and the current setpoint.&lt;/p&gt;

&lt;p&gt;The purpose of a feed-forward in a PIDF computation is to
provide “stability.” The F term acts as kind of a base rate
that pads the output from changes in the environment.
Because the F term doesn’t respond to feedback from a
sensor (see the derivation of the F term), it is doesn’t
truly belong with the other P, I, and D terms that do
depend on sensor feedback.&lt;/p&gt;

&lt;p&gt;The other part of the reason why I think that the F term is
dropped is because many systems tend to change quite often.
As a matter of fact, &lt;a href=&quot;https://frc-pdr.readthedocs.io/en/latest/control/pid_control.html&quot;&gt;FRC Programming Done Right&lt;/a&gt;
has this to say about using the F term:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Feedforward control is necessary on all but the absolute 
simplest of systems. It’s incredibly difficult to get a 
good response without a feedforward calculation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my opinion, this is actually backwards. For simpler,
more predictable systems, it is easier to use an F term
because it is easier to predict and measure the various
different factors that impact the performance of a
specific device. This all goes back to the open-loop and
closed-loop system. The simpler the system is, the easier
it will be to determine the appropriate F gain. This also
means that it is difficult to use for more varied, dynamic
environments you’d typically find PID control loops
running in, which is why PID tends to be referred to
without reference to the F term.&lt;/p&gt;

&lt;p&gt;The F term also is only really useful for constant-rate
mechanisms (i.e. those that use difference in rate as the
error value rather than difference in displacement as is
customoary). Becase the F term cannot respond to
environmental changes, having a pre-defined F term in order
to drive a mechanism and using the other terms to control
error to that predefined rate is the most useful
application of the F term that I can personally see.&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;

&lt;p&gt;The derivation of the PID(F) formula is actually more 
daunting than the implementation in code.&lt;/p&gt;

&lt;p&gt;We can imagine the PID loop as looking something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PidfController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Begin the loop by setting a target&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSetpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Set the last state recorded by a sensor&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// If the error is 0, the PID procedure is done&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Compute the output&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computePidf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Send output to the mechanism&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mechanism&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Wait a constant time interval before repeating &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Once again, it should be noted that often a PID(F)
controller stops once the error is close enough to 0, in
general it’s a poor idea to directly compare floating point
numbers anyways, so you probably get the idea)&lt;/p&gt;

&lt;p&gt;To write the &lt;code class=&quot;highlighter-rouge&quot;&gt;PidfController&lt;/code&gt;, the easiest step is to 
firstly define our gain and interval constants:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next portion would be to implement a way to calculate
error. We will need a way to define the setpoint to which
the PID(F) controller is to travel to, and then a way to
define the last state recorded by a sensor:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Called by a user to set the setpoint&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSetpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Called by a sensor to set the state of the system&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setLastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have our gain constants a way to compute the 
current error, we can now head to computing each term.&lt;/p&gt;

&lt;p&gt;Proportional:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeProportional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For integral, we need to hold the amount of error that has
accummulated since the PID loop began. This can be acheived
by using a variable to hold the error multiplied by the
interval time each time the loop runs:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulatedError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeIntegral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accumulatedError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accumulatedError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For derivative, since the rate of change of the error is
instantaneous, we can simply use the slope formula for the
last recorded error and the current error taken over the
interval time:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeDerivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For feed-forward, it is the gain multiplied by setpoint:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeFeedforward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, tying everything together:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computePidf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeProportional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeDerivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIntegral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeFeedforward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then cleanup our code and write it all into a coherent
class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PidfController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulatedError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PidfController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSetpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setLastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeProportional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeIntegral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accumulatedError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accumulatedError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeDerivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeFeedforward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computePidf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeProportional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeDerivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIntegral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeFeedforward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Users should change the &lt;code class=&quot;highlighter-rouge&quot;&gt;INTERVAL&lt;/code&gt; time as they see 
appropriate.&lt;/p&gt;

&lt;p&gt;It should be noted that all the gain values can even be
changed during the PID loop, and so it is not necessary for
them to be &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;INTERVAL&lt;/code&gt; time doesn’t even need
to be constant, so long as one takes into account the time
that elapses between each iteration of the PID loop. That
being said, this is simply just the bare-bones minimum
code, and it is up to the implementor to determine if those
features are needed.&lt;/p&gt;

&lt;p&gt;As far as units go, it is not necessarily required to have
a consistent unit conversion. A PIDF loop simply outputs
the rate as it relates to the gain constants and the error
value. It is up to users to determine if any consistency is
really required here.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Control Theory and control engineering are broad topics
that I’ve only briefly touched over in this blog post. With
a better understanding of the theory and implementation of
PID control, one can build more precise physical mechanisms
such as robots, temperature controls, pumps, etc.&lt;/p&gt;

&lt;p&gt;I’ve done my best to speak on general terms so that the
concepts can be applied to the widest selection of
scenarios possible. Sometimes, that has made it more 
difficult to undestand what I’m talking about, but I hope
that giving several real world examples to demonstrate a
single concept has made it easier to grasp.&lt;/p&gt;

&lt;p&gt;Again, I will reiterate that I’m by no means an expert in
the field of Control Theory. Feel free to contact me for
corrections, but I’m definitely not the right person to ask
if you need clarification, as I’ve done my best already to 
try and clarify everything up front.&lt;/p&gt;

&lt;p&gt;For FRC Robots, you definitely want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;PIDController&lt;/code&gt;
over the hand-rolled implementation I have here, by the
way.&lt;/p&gt;

&lt;p&gt;I probably won’t be doing any more posts about robotics
unless some extenuating circumstance forces me to.&lt;/p&gt;</content><author><name></name></author><summary type="html">While I don’t profess to be an absolute expert at control theory, a lot of the information about the matter that I’ve found online appears to be either inaccessible to the average Joe or simply flat-out unhelpful. Control Theory is often explained with mechanical controllers that don’t really have any application to the software world, and it has been difficult for me personally to comprehend at all what is going on. In light of this, I’ve decided to do a write up about what control theory is from the perspective of an implementor, rather than that of a theorist.</summary></entry><entry><title type="html">SQLite: Not What I Hoped For</title><link href="https://agenttroll.github.io/blog/2018/06/19/sqlite-not-what-i-hoped-for.html" rel="alternate" type="text/html" title="SQLite: Not What I Hoped For" /><published>2018-06-19T12:14:10-07:00</published><updated>2018-06-19T12:14:10-07:00</updated><id>https://agenttroll.github.io/blog/2018/06/19/sqlite-not-what-i-hoped-for</id><content type="html" xml:base="https://agenttroll.github.io/blog/2018/06/19/sqlite-not-what-i-hoped-for.html">&lt;p&gt;An issue with one of the plugins on MineSaga has recently brought to my attention the rather poor decision of using SQLite to store player data. Now we’re not even doing anything complicated with SQLite, it’s literally just used for persistence to track player data that gets updated occasionally. Even factoring in network latency, I don’t believe that SQLite will outperform MySQL for our particular use case.&lt;/p&gt;

&lt;p&gt;In case you came here for the conclusion, and not the fluff, here’s what I learned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SQLite scales terribly&lt;/li&gt;
  &lt;li&gt;MySQL outperforms SQLite in basically all cases&lt;/li&gt;
  &lt;li&gt;MySQL scales well with async requests&lt;/li&gt;
  &lt;li&gt;Index wherever it makes sense&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO … ON DUPLICATE KEY UPDATE&lt;/code&gt; over &lt;code class=&quot;highlighter-rouge&quot;&gt;REPLACE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;I was actually planning on writing this post a while back, when Jurassic was just released. As it turns out, procrastination is a force to be reckoned with!&lt;/p&gt;

&lt;p&gt;I believe we actually had to reboot Jurassic several times in order to get rid of the lag problems. About 9 hours in, the console was flooded with exceptions thrown from 9k async threads, all with the same error: &lt;code class=&quot;highlighter-rouge&quot;&gt;SQLITE_BUSY&lt;/code&gt; from my points plugin.&lt;/p&gt;

&lt;p&gt;I actually had a hard time believing that this was possible at first. I was in denial because how in the world could a database that is touted for its &lt;a href=&quot;https://www.sqlite.org/hirely.html&quot;&gt;reliability&lt;/a&gt; fail in such a stupid way? Why did such an obscure problem come up after months of using points in production? How in the world could there have been 9k failures just waiting to happen, when there weren’t even 9k unique players even on the server yet? None of the pieces fit together and I was stumped for a few days. Since the points plugin was actually designed originally to interact with a MySQL database, I imagined there might have been some kind of discrepancy that I did not account for when adding the SQLite feature in order to meet a critical release requirement, considering my relative inexperience with databases.&lt;/p&gt;

&lt;p&gt;At the same time, there was a Minions issue that allowed players to use dropper blocks to duplicate minion eggs due to oversight when writing a dispense handler that was meant to be used for dispenser blocks only. I was dealing with 2 critical bugs at once, but I was told to put minions in the burner; points was kicking everyone off the server due to the laggy saves and minions wasn’t. Since I knew that the MySQL-enabled points worked fine, I decided to leave it with enabling MySQL and praying that the same issue doesn’t come up.&lt;/p&gt;

&lt;h1 id=&quot;core-work&quot;&gt;Core Work&lt;/h1&gt;

&lt;p&gt;On top of the 2 critical bugs affecting the server, I was also working on minor bug fixes for bosses (also put on the burner) as well as polishing up the safety framework (which I will talk about at a later time!) in the core plugin. I already had JUnit tests setup in the core plugin to test the sanity of the database APIs, so where better to start than there to figure out how to reproduce the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQLITE_BUSY&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;After 24 hours of time to think after the initial crash, I was beginning to formulate a hypothesis on how the error could have occurred. I figured that with their experience in performance tuning, out good friends at Craftimize might have some ideas that I could work off of. I was fortunate to have them to bounce ideas off, and they suggested that there might have been a single event that spilled over and caused a chain reaction that led to the server eventually lagging out.&lt;/p&gt;

&lt;p&gt;Piqued, I turned this idea around my head for a few hours. I also browsed through the Xerial SQLite driver source, as well as through the SQLite official docs to figure out how this exception would be thrown anyways. Eventually, I was able to boil down the issue to two possible causes, either because the file handle on the SQLite database has not been released yet due to using HikariCP, or because some arbitrary time limit has been exceeded (perhaps being caused by the first cause).&lt;/p&gt;

&lt;p&gt;Since the Core unit test setup essentially used the same HikariCP configuration I used in points, I thought it might be a good idea actually to figure out the performance difference between MySQL and SQLite, seeing as we were using MySQL instead of SQLite now to store points data. The table schema for testing points is extremely simple, and it would make a perfect model to get a few ballpark numbers, as I was especially intrigued by the timeout.&lt;/p&gt;

&lt;h1 id=&quot;the-results&quot;&gt;The Results&lt;/h1&gt;

&lt;p&gt;Since the code is proprietary, you’ll just have to trust me blindly here.&lt;/p&gt;

&lt;p&gt;I decided to start out with around 9k rounds inserting just around 10 entries. This mimics what a server might see with the few players that were on compared to the amount of operations that were going on, also taking into consideration that players can join and leave multiple times and cause multiple database queries with for only a single player. I was hesitant to convert any of it into a transaction because that is simply not how most queries are going to work, they are mostly going to be quite sparse and not all clumped together until an autosave.&lt;/p&gt;

&lt;p&gt;I was mildly surprised to find that SQLite was slower than a local MySQL server. However, that was not entirely unexpected, since SQLite is writing directly to a file and MySQL probably just queues disk writes.&lt;/p&gt;

&lt;p&gt;What I was really surprised by, however, was how &lt;em&gt;fast&lt;/em&gt; MySQL was. Using MySQL was several orders of a magnitude faster than SQLite was, by a factor of about 7x.&lt;/p&gt;

&lt;p&gt;All that said and done, I still was not able to reproduce the bug. Maybe I’ll just have to try harder? Oh well.&lt;/p&gt;

&lt;p&gt;I decided to actually compare both sync and async versions of writing to MySQL and SQLite and see how it might impact write throughput in an even more realistic scenario.&lt;/p&gt;

&lt;p&gt;MySQL async, then sync results got printed out, starting on SQLite async. I was prepared to wait for several minutes so that all 9k entries get processed by the sloth of a DB engine that is SQLite.&lt;/p&gt;

&lt;p&gt;What I was not prepared for was when it threw 9k &lt;code class=&quot;highlighter-rouge&quot;&gt;SQLITE_BUSY&lt;/code&gt; exceptions…&lt;/p&gt;

&lt;h1 id=&quot;found-the-problem&quot;&gt;Found the Problem&lt;/h1&gt;

&lt;p&gt;Let’s put the two and two together now… SQLite worked fine synchronously, even though it took minutes to complete all of its writes. However, adding the async writes to the SQLite database causes the &lt;code class=&quot;highlighter-rouge&quot;&gt;SQLITE_BUSY&lt;/code&gt; error. That can only mean one thing: my HikariCP pool to the SQLite DataSource is the cause of the error. Luckily, I knew the fix for this, having anticipated that this was the probable cause already. A simple call to &lt;code class=&quot;highlighter-rouge&quot;&gt;HikariConfig#setMaximumPoolSize(int)&lt;/code&gt; will limit the pool and prevent additional connections from being created. When the pool was being used, the synchronization provided by the DataSource connection would have been useless because it wouldn’t be able to serialize access to the database from multiple connections.&lt;/p&gt;

&lt;p&gt;As amazingly stupid as the issue might seem, it is only a testament to my poor knowledge of databases. When a connection pool was used, it’s actually quite amazing how the SQLite database was able to protect itself from a potentially dangerous write from two different connections by throwing an error instead of potentially corrupting the database. By limiting the connections to the database to 1, I was able to rerun the test, which passed with flying colors.&lt;/p&gt;

&lt;h1 id=&quot;taking-it-a-step-further&quot;&gt;Taking It a Step Further&lt;/h1&gt;

&lt;p&gt;With all the tests already setup, and my excitement at its peak having solved the crashing issue, I turned my sights to how indexing and database queries might affect the performance of a realistic server scenario. I ended up doing 8 tests for indexed and non-indexed keys, for &lt;code class=&quot;highlighter-rouge&quot;&gt;REPLACE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO … ON DUPLICATE KEY UPDATE&lt;/code&gt; queries, and for 300 and 30 queries, just for the hell of it.&lt;/p&gt;

&lt;p&gt;Here are the overall results.&lt;/p&gt;

&lt;h4 id=&quot;indexing&quot;&gt;Indexing&lt;/h4&gt;

&lt;p&gt;Indexing had honestly little effect on the results. I did not find any substantial difference between insertions of any volume or query that would have made indexing worthwhile. That said, I would still &lt;strong&gt;always&lt;/strong&gt; add an index to my table because if it doesn’t hurt, might as well have it for the &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; lookups.&lt;/p&gt;

&lt;h4 id=&quot;queries&quot;&gt;Queries&lt;/h4&gt;

&lt;p&gt;I only tested &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO … ON DUPLICATE KEY UPDATE&lt;/code&gt; on MySQL, as SQLite did not have an equivalent query. What I found was that at more realistic, i.e. lower volume queries, there could be a 2x-8x magnitude increase in insertions if the &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO… ON DUPLICATE KEY UPDATE&lt;/code&gt; was used over &lt;code class=&quot;highlighter-rouge&quot;&gt;REPLACE&lt;/code&gt;. &lt;a href=&quot;http://code.openark.org/blog/mysql/replace-into-think-twice&quot;&gt;This article&lt;/a&gt; seems to backup this claim as well. Therefore, &lt;strong&gt;always&lt;/strong&gt; use &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO … ON DUPLICATE KEY UPDATE&lt;/code&gt; to perform upserts in MySQL.&lt;/p&gt;

&lt;h4 id=&quot;async-vs-sync&quot;&gt;Async vs Sync&lt;/h4&gt;

&lt;p&gt;Between all insertions done asynchronously in a 4 thread pool and synchronously, I found that although MySQL queries were consistently faster async than sync, except when at low volume. However, &lt;strong&gt;always&lt;/strong&gt; use async firstly because it isn’t a good idea to run queries synchronously on a Bukkit server, and secondly because between 30 and 300 entries, async experiences only a 2x slowdown while sync experiences an 8x slowdown.&lt;/p&gt;

&lt;p&gt;Async and sync makes very little difference on SQLite since the insertions are limited by the fact that all threads share the same connection anyways, but again, &lt;strong&gt;always&lt;/strong&gt; use async, else you will freeze the Bukkit main thread.&lt;/p&gt;

&lt;h4 id=&quot;mysql-vs-sqlite&quot;&gt;MySQL vs SQLite&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Always&lt;/strong&gt; use MySQL when possible. Even at low volume of insertions, &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO … ON DUPLICATE KEY UPDATE&lt;/code&gt; still has a lower performance footprint than an SQLite &lt;code class=&quot;highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt;. At high volume, MySQL scales significantly better than SQLite, being up 5x faster than SQLite for 300 insertions.&lt;/p&gt;

&lt;h1 id=&quot;closing-words&quot;&gt;Closing Words&lt;/h1&gt;

&lt;p&gt;I definitely learned a lot about databases by going through this entire ordeal. While it was very frustrating to find out that my plugin was at fault for crashing, yet again (see my previous blog post for more about crashing), I would not have been motivated enough to go through and test for myself each of the little details involving databases. After all, it is the little details that separates the good from the great.&lt;/p&gt;

&lt;p&gt;There will be lots of exciting things to come, both for MineSaga and for my blog in the coming few weeks as summer commences, so I’m definitely very hyped about that! Stay tuned.&lt;/p&gt;</content><author><name></name></author><summary type="html">An issue with one of the plugins on MineSaga has recently brought to my attention the rather poor decision of using SQLite to store player data. Now we’re not even doing anything complicated with SQLite, it’s literally just used for persistence to track player data that gets updated occasionally. Even factoring in network latency, I don’t believe that SQLite will outperform MySQL for our particular use case.</summary></entry><entry><title type="html">JDB, But Not That One</title><link href="https://agenttroll.github.io/blog/2018/05/11/jdb-but-not-that-one.html" rel="alternate" type="text/html" title="JDB, But Not That One" /><published>2018-05-11T23:44:35-07:00</published><updated>2018-05-11T23:44:35-07:00</updated><id>https://agenttroll.github.io/blog/2018/05/11/jdb-but-not-that-one</id><content type="html" xml:base="https://agenttroll.github.io/blog/2018/05/11/jdb-but-not-that-one.html">&lt;h1 id=&quot;but-also-some-background&quot;&gt;But Also, Some Background&lt;/h1&gt;

&lt;p&gt;I’ve been working on a school project for my CS Projects class for the past few months. Just a few days ago, I had a great opportunity to actually present it to a school staff meeting. I had mixed feelings about the overall success of my presentation, so instead of working on improving my prepardness for presentations that I might have later, I decided to write a rather unfaithful transcript of it here. I don’t fault the staff for being primarily non-technical, but I definitely would have enjoyed presenting to a more seasoned audience in the future.&lt;/p&gt;

&lt;p&gt;But enough with my lamenting. Back in September, I had to make a decision on what kind of project I would work on for the rest of the year. Actually, I finished the project last month, so perhaps the rest of the year minus two months. I would have wanted to work on TridentSDK, but that wouldn’t have been very good material to present. There’s a ton of notable acheivements in TridentSDK that would be difficult to explain relative to an actual Minecraft server, so that got scrapped. My second-choice would be a debugger. I often used the IntelliJ IDEA debugger to work on TridentSDK, so I mean, why not? It really counldn’t be that difficult, can it? As it turns out, it really wasn’t &lt;em&gt;that&lt;/em&gt; difficult. I did deal with some interesting bugs, and developing it was difficult at times, but there wasn’t anything that I didn’t already know, save for the intricacies of the JDI.&lt;/p&gt;

&lt;p&gt;By the end of my time developing JDB, I got really lazy and put off working on it a lot. It felt really complete after I solved &lt;a href=&quot;https://github.com/AgentTroll/jdb/commit/48483f6211cb5e67f81133b6a050dbc3151ad495&quot;&gt;the bug involving printing out multiple return values for the same variable&lt;/a&gt;. Thanks, laziness. &lt;a href=&quot;https://github.com/AgentTroll/jdb/blob/master/jdb.md&quot;&gt;This was the real planning document&lt;/a&gt; for JDB in the first place. As a matter of fact, I had no clue that there was &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html&quot;&gt;already a project&lt;/a&gt; in its namesake, but I haven’t been aware of it. That’s not the real takeaway from planning though, the real takeaway is that I was really ambitious at the start, but ended up with a lot simpler of a program than I had envisioned. In fact, when I took a look at it a few days ago, when I was making my presentation, I realized I basically got to none of the features in the Goals section. Thanks, laziness. Nevertheless, I still think I ended up with a very nifty program that did a lot more than I thought I could do.&lt;/p&gt;

&lt;h1 id=&quot;slides&quot;&gt;Slides&lt;/h1&gt;

&lt;p&gt;As a small side note, Pages sucked for converting slides to images. I used https://www.freepdfconvert.com/pdf-jpg. A few images that I got off the internet got removed from slides 2-3, I was too lazy to cite them and they didn’t have anything very useful anyways.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve quoted approximately what I said&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll put some more stuff down below it or what I should have added.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp.jpg&quot; alt=&quot;Slide 1&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hi, I’m Johnny, I’ve been working on a debugger for the past year. If you don’t know what a debugger is, don’t worry. I’ll get to that in the next slide.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-2.jpg&quot; alt=&quot;Slide 2&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So what exactly is a debugger? What is debugging? What even is a bug in the first place? So a bug is basically an error; it’s a mistake made by the programmer when he is writing code. A bug is a glitch, and anomaly, or oversight that results in the program not working correctly. All programs contain bugs. Bugs aren’t good. When you’re writing software, you don’t want bugs. One of the tools that you might use to get rid of bugs (these errors in your code) is by using a debugger. So when a program runs, what the programmer sees on his screen, all the computer code, all of that becomes invisible. You can’t see what a program is doing when it runs, you can only see how it affects what the user sees. A debugger helps remove bugs because flaws in the code require you to see the state of the program, and when there is an error, there will be an inconsistency in the program’s state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-3.jpg&quot; alt=&quot;Slide 3&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now that we have that out of the way, what was I even thinking in the first place, why did I want to create a debugger? I work a lot in the backend, which is basically the behind-the-scenes role of writing software. I write infrastructure, so other people depend on me being right so that everything works. If my programs don’t work, everything comes crashing down with it. This was a big inspiration for me because a debugger would give a helping hand in removing bugs and errors from my program. Secondly, many debuggers are included in your text editor, called an IDE. So your debugger is often something that has buttons and stuff, that you click on. What I was looking for was a &lt;em&gt;CLI&lt;/em&gt;-based debugger, and a CLI is basically a big panel that doesn’t have buttons or anything on it, you have to type commands into it for it to do anything. So think of hacker movies and you see some guy typing away at his computer and a bunch of garbage text comes up on the screen and it magically does something - that was what I was looking for, to be able to use commands to control the debugger instead of clicking buttons. This just makes it more efficient to work with than having to move a mouse. Finally, I mean, why not? I needed a project to work on, why not make a debugger?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had to spend a lot of time here trying to explain basic programming concepts like an IDE and a CLI. I would have liked more time getting into the actual meat of JDB in the first place, but alas, I had to spend my time explaining this to my audience!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-4.jpg&quot; alt=&quot;Slide 4&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So to demonstrate what my debugger does, I’m going to use it to reverse engineer something, and that something will be a Minecraft server. Now, I chose the Minecraft server becuse it’s relatively simple to understand the function of it at its core, and it will really help me explain some of what it does. So what you see here is a function that gets run whenever the server stops, and you will also see a null-check that I have boxed near the bottom of your screen. What this does is it checks the value of the variable. When programming, you want to make sure that your values are initialized, that is that there is &lt;em&gt;something&lt;/em&gt; at that variable. Sometimes, the variable is null and void; there is nothing stored there. So to demonstrate how my debugger works, what I want to find out is when the server shuts down, is there a value at all at the &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; variable. We know that it is a player list, and I can deduce that it stores players somehow. But what I want to know is even if players don’t join the server, will there the &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; variable still be null, void, and have no value, or will there be &lt;em&gt;something&lt;/em&gt; at that variable when the server shutsdown?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now admittedly, reverse engineering wasn’t a great demonstration of the debugger. My presentation focused very much on explaining the reverse engineering concepts that could have demonstrated better what my debugger does if I had used simple scenarios instead. But alas, I was also inspired to make the debugger because I had a hard time with getting a regular debugger connected to the Minecraft server to debug my plugins. It would also be great if I could demonstrate that JDB works outside of my own custom scenario programs and with other programs as well, but I’m not sure if my audience would have understood the significance of that for me, since I’ve only ever used the regular IntelliJ IDEA debugger to test code thath it runs intead. I also find it hard to believe that anyone followed along with the “null and void” idea of a value, but that should be expected at this point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-5.jpg&quot; alt=&quot;Slide 5&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So what I’m doing here is trying to find the line number on which there is this check for the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;. So basically how debuggers work is, as a I said earlier, to stop and halt the program at specific points in the code. So as the code gets read by the computer, as it moves through each line of code, I want to stop the program right before that check and read the value at the &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; variable. This is called a breakpoint, the place where you want the program to just halt for a sec so you can look at the program state. So here, in order to find the line number to put the breakpoint on, I will have to look for where that if check is. I’ve boxed it at #1 in the bottom left corner of the screen, you can see the ifnull check if you are close enough to the screen. You also might see that there are two other if checks, but I know that instruction #78 is the right one because in the code from the previous slide (scroll back one slide) you can see that there are 3 if checks here, and (scroll to slide #5) and there are 2 if checks above this one and the variable appears here where you can see the method being called where I have underlined by the bottom right. What I’ve decided to do is actually to pick the instruction at #38, labelled by the #2 box at the top left corner of the screen. This is because in order for the breakpoint to work, I must guarantee that the code is run in the first place, and if I accidentally put it in betwen the if checks, my breakpoint may not run. You can see on the line number table that #32 is located on line 482.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was an extremely strenuous slide for me because I needed explain all these different concepts like breakpoints and the basic ideas of machine code to laymen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-6.jpg&quot; alt=&quot;Slide 6&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here I am going to start the debugger and you can see me using &lt;code class=&quot;highlighter-rouge&quot;&gt;ba&lt;/code&gt; which means put a breakpoint after line 482 in MinecraftServer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, my advisor has reminded me that I have 30 seconds left of presentation time. What I should have done was explain also the selection at the bottom and how I select from duplicate class names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-7.jpg&quot; alt=&quot;Slide 7&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As it turns out, I get an error from the program stopping. This is ironic because there’s a bug in my program that I made to get rid of bugs (chuckles)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-8.jpg&quot; alt=&quot;Slide 8&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So, what happened? If you can see here, in my code, I am checking for a 0 and leaving the code. On the previous slide, you can see that 0 is an option, and the no option should be -1. Let’s change this to -1 and see what happens.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As I’m under time constraint, I’m unable to explain what the if and the comparison constructs mean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-9.jpg&quot; alt=&quot;Slide 9&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alright, so we can put a breakpoint in there, that’s good! No errors this time, what happens then, when I stop the server?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, I should have reminded my audience of what a breakpoint is and the meaning of what I’m doing, but alas, I was already cutting into meeting time after my presentation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-10.jpg&quot; alt=&quot;Slide 10&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I can then inspect all the variables in the state of my program, and you can see at the bottom that I’ve highlighted the value that is located at the &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; variable and it is not null. So what I’ve found is that even when there are no players in the first place, that there will be a value there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The value at &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; is present even if there are no players on the server. This is significant because out of this, I’ve learned that the MinecraftServer initializes this variable without any players on, when it starts off as null by default. Secondly, it is a type of DedicatedPlayerList, which is a type that tells me a lot about how the &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; variable gets handled by the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-11.jpg&quot; alt=&quot;Slide 11&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So what exactly did I learn? So I learned a new API, which is a… (pause)&lt;/p&gt;

  &lt;p&gt;I learned JDI, which is an API, which is in turn something that programmers use to write their apps faster, when I wasn’t really familiar with it before. In fact, the rest of this is garbage, it doesn’t mean anything to you guys (chuckles). Along the way I also ran into a bunch of issues, such as the one that I just showed you with the off-by-one thing that I fixed by switching the code to -1. I also uh (pause)&lt;/p&gt;

  &lt;p&gt;I also got a bunch of output whenever I looked through the program state because the console had duplicate entries in it, so I could hardly read the log. This got fixed so I can actually read the console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, I was already 2 minutes over time and I needed to get done, but my brain was letting me down. I had two long pauses to stop and reconsider, but in my own defense, the API learning part was rather difficult to explain, and it is hard to quantify how difficult it is to work with a spammy console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/jdb.odp-12.jpg&quot; alt=&quot;Slide 12&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thank you!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Right here, I should probably have talked a little bit more of my project, my project’s goals document and the development of it, but again, I’m out of time. I was really ready to present the GitHub it to others, but that will have to wait. Besides, who even cares about GitHub when it’s not even that useful to the audience anyways.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Looking back on it, I would have certainly enjoyed presenting more if I had a more technical audience, and a larger time constraint. The whole presentation took actually about 10 minutes, and if I had more time, I would have gone a lot more in depth. The staff was not an enjoyable audience to speak to for me at least. I’m sure there are certain teachers who were interested in what I was talking about, but even they probably had trouble following what I was talking about. For the teachers themselves, they probably felt like their morning was wasted by what I thought was interesting but was pretty much useless to them. They aren’t interested in it, and they have a job to do. Yes, yes, teachers should care about students. But if I was a teacher, I would not have given a single damn about this computer science voodoo magic stuff, I have a staff meeting for crying out loud! I think debugging is an interesting art and science, but if I had more time, I would &lt;strong&gt;definitely&lt;/strong&gt; go more in depth with reverse engineering. I think that it is such an interesting thing to do, with not only the mystery of solving problems, but going deeper and deeper with our understanding of a code base, especially one that was meant to be challenging to read such as the Minecraft server has a certain thrill to it.&lt;/p&gt;

&lt;p&gt;You know what else has a certain thrill to it though? Being done with reading this blog post. Until next time.&lt;/p&gt;

&lt;h1 id=&quot;words-of-wisdom&quot;&gt;Words of Wisdom&lt;/h1&gt;

&lt;p&gt;I found a piece of gold today in a compilation video:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s 2017, I mean we should have a lunar base by now… What the hell is going on?&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Elon Musk&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think I’m going to start pasting this around like the gospel…&lt;/p&gt;</content><author><name></name></author><summary type="html">But Also, Some Background</summary></entry><entry><title type="html">Keeping Inventories Open</title><link href="https://agenttroll.github.io/blog/2018/04/13/keeping-inventories-open.html" rel="alternate" type="text/html" title="Keeping Inventories Open" /><published>2018-04-13T21:38:10-07:00</published><updated>2018-04-13T21:38:10-07:00</updated><id>https://agenttroll.github.io/blog/2018/04/13/keeping-inventories-open</id><content type="html" xml:base="https://agenttroll.github.io/blog/2018/04/13/keeping-inventories-open.html">&lt;p&gt;&lt;em&gt;Note: Code samples in this post have been slightly altered. I have not leaked any information from our plugins in the writing of this post&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Over the past week or two, we’ve been working hard to get the gambling plugin fixed up for you guys to use. Unfortunately, there were a few interesting bumps in the road.&lt;/p&gt;

&lt;h1 id=&quot;crashing-issue&quot;&gt;Crashing Issue&lt;/h1&gt;

&lt;p&gt;One of the features of coinflips was that once the inventory that flips between the heads opens, it will not close until the coinflip is over. We did this by re-opening the inventory whenever it was closed. It basically looked something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EventHandler&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPlayerCloseInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InventoryCloseEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;menuIsCoinflip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Schedule the inventory to be opened after the next tick&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Bukkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Tell the player to open the inventory that they closed&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we found, however, was that for some reason, this handler would become stuck in a loop and prevent the main thread from proceeding. There is nothing overtly wrong about this method, really, it literally performs the correct handling for it after “the next tick.”&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&quot;https://hub.spigotmc.org/javadocs/spigot/org/bukkit/scheduler/BukkitScheduler.html#runTask-org.bukkit.plugin.Plugin-java.lang.Runnable-&quot;&gt;Bukkit Scheduler javadoc&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BukkitTask runTask(Plugin plugin,
                   java.lang.Runnable task)
            throws java.lang.IllegalArgumentException&lt;/p&gt;

  &lt;p&gt;Returns a task that will run on the next server tick.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In fact, it was even more confusing because we had no clue how a scheduled task could possibly be creating an endless loop, much less how players could get themselves into a situation that would cause the loop in the first place.&lt;/p&gt;

&lt;h1 id=&quot;initial-attempts&quot;&gt;Initial attempts&lt;/h1&gt;

&lt;p&gt;Since we already isolated the problem to the close event handler, we assumed that the problem would stem from the player being offline when they are told to re-open the coinflip inventory. We added in a check once the task gets run on the inside of the lambda, and then made sure that when a player leaves, they would be not be allowed to re-open the menu:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EventHandler&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPlayerCloseInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InventoryCloseEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;menuIsCoinflip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Schedule the inventory to be opened after the next tick&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Bukkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOnline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Tell the player to open the inventory that they closed&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@EventHandler&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPlayerLeaveServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlayerQuitEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do not allow the menu to open&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;menuIsCoinflip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, this also did not work. The next morning, we found that the server crashed from the same recursive loop somehow.&lt;/p&gt;

&lt;p&gt;I then dug into the code to see what was going on behind-the-scenes. I wanted to find out why the player is still allowed to open the inventory even when they are offline. This is a snippet of code that handles the &lt;a href=&quot;https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/browse/nms-patches/PlayerList.patch#281&quot;&gt;player’s disconnect&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-patch highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gi&quot;&gt;+        org.bukkit.craftbukkit.event.CraftEventFactory.handleInventoryCloseEvent(entityplayer);
+
+        PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(cserver.getPlayer(entityplayer), &quot;\u00A7e&quot; + entityplayer.getName() + &quot; left the game&quot;);
+        cserver.getPluginManager().callEvent(playerQuitEvent);
+        entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
+
+        entityplayer.playerTick();// SPIGOT-924
+        // CraftBukkit end
+
&lt;/span&gt;         this.savePlayerFile(entityplayer);
         if (entityplayer.isPassenger()) {
             Entity entity = entityplayer.getVehicle();
&lt;span class=&quot;gu&quot;&gt;@@ -318,17 +421,67 @@
&lt;/span&gt;
         if (entityplayer1 == entityplayer) {
             this.j.remove(uuid);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are 3 things to note here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handleInventoryCloseEvent&lt;/code&gt; is called very early when the player disconnects&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerQuitEvent&lt;/code&gt; gets fired after that&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Player#isOnline()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Bukkit.getPlayer(...)&lt;/code&gt; provided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt; collection will be signalled last&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This might make our online check seem useless, however, there shouldn’t be any cause for concern, because the scheduler should be scheduling the inventory close by the next tick, once the handler has fully completed and removed the player from the server… Right?&lt;/p&gt;

&lt;h1 id=&quot;nitty-gritty-of-the-scheduler&quot;&gt;Nitty Gritty of the Scheduler&lt;/h1&gt;

&lt;p&gt;We can theorize all we want. The code looks correct, but obviously that is not so because the server is still crashing for the same reason. Therefore, either we are wrong about our isolation of the problem, or our assumption about what the server is doing is wrong. However, given that the bug is very timing-dependent, and players are more likely to be leaving during the night, when the server is crashing, we concluded that our logic must have been wrong somewhere.&lt;/p&gt;

&lt;p&gt;After some more pondering and searching through the Minecraft source code, I looked over the line that calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;mainThreadHeartbeat&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;CraftScheduler&lt;/code&gt;. Piqued, I looked through the source of &lt;code class=&quot;highlighter-rouge&quot;&gt;CraftScheduler&lt;/code&gt; to see what I could find.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/browse/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java#91&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;runTask&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BukkitTask&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plugin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runTaskLater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I thought to myself: when an inventory closes, I must be in the &lt;code class=&quot;highlighter-rouge&quot;&gt;disconnect&lt;/code&gt; method from &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerList&lt;/code&gt; above, so there can never be an instantaneous execution from this method. However, the fact that the server simply stops responding is completely contradictory to this.&lt;/p&gt;

&lt;p&gt;Then it dawned upon me.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;openInventory&lt;/code&gt; must be immediately firing &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryCloseEvent&lt;/code&gt; when the player is offline, since it closes immediately; the player isn’t even there to open it in the first place. It doesn’t need to be going through &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerList#disconnect(...)&lt;/code&gt;. This basically invalidates all previous assumptions about the calling location of &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryCloseEvent&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;If I immediately get back &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryCloseEvent&lt;/code&gt; from opening the inventory, then I am not getting the event from &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerList#disconnect(...)&lt;/code&gt;… I am getting it &lt;em&gt;directly from the scheduler&lt;/em&gt;. The scheduled task is causing it to schedule more tasks, which must execute, because the scheduling loop has not finished when I run another task! In other words, &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryCloseEvent&lt;/code&gt; causes another task to be added to the loop through the tasks in &lt;code class=&quot;highlighter-rouge&quot;&gt;mainThreadHeartbeat&lt;/code&gt;. Since we are still in a loop at this point, the loop will then come across the next task, which will then create another close event, endlessly adding tasks to the scheduling loop. &lt;code class=&quot;highlighter-rouge&quot;&gt;mainThreadHeartbeat&lt;/code&gt; never exits, and so the server doesn’t tick!&lt;/p&gt;

&lt;h1 id=&quot;fixing-the-issue&quot;&gt;Fixing The Issue&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;runTask&lt;/code&gt; is a good, short method to use when not being called from within the scheduling loop. However, this risks creating an infinitely long task list. The fix to schedule for exactly 1 tick later like so:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EventHandler&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPlayerCloseInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InventoryCloseEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;menuIsCoinflip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Schedule the inventory to be opened after the next tick&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Bukkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runTaskLater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOnline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Tell the player to open the inventory that they closed&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This has virtually no impact on the previous functionality. By scheduling for 1 tick later instead of the 0 ticks that the &lt;code class=&quot;highlighter-rouge&quot;&gt;runTask&lt;/code&gt; method does, we ensure that even if &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryCloseEvent&lt;/code&gt; is fired from within the scheduling loop, it will not run within the loop that created it, but rather on the next tick. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;runTask&lt;/code&gt; is usually never called from inside of the tick loop, 1 tick usually needs to pass anyways unless the task gets scheduled before the scheduling loop runs, so there’s really nothing to lose.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The reason why it took so long for this bug to be discovered is because of the assumption I made that &lt;code class=&quot;highlighter-rouge&quot;&gt;BukkitScheduler#runTask(...)&lt;/code&gt; will always run in the tick after it is being called in. However, when the docs mention that a task will be run “run on the next server tick,” the next server tick may already be in progress, and therefore never allow for the task to leave.&lt;/p&gt;

&lt;p&gt;In hindsight, it may seem like such a stupid assumption to make, that this particular event may be fired in only in one place. How can a problem that is so face-smackingly simple get past us? We were tied up for over a week trying to figure out what made the servers crash due to this bug. The server log gave a hint that the close event listener was being fired from within the scheduler, however, I did not pick up on this. Higher up the stack, the inventory was being closed already in the task, so why should I assume that the task list is growing? I just thought that it was being run in the tick right after the close event.&lt;/p&gt;

&lt;p&gt;This little assumption, that the &lt;code class=&quot;highlighter-rouge&quot;&gt;runTask&lt;/code&gt; method would run the the tick after the task gets scheduled, led to over a week worth of head scratching and frustration. What can be done in the future about it?&lt;/p&gt;

&lt;p&gt;We’ve already got reboot scripts ready to go so servers do not experience as long as a downtime. This only fixes the effects of such bugs; but at the moment, I have no solutions to how the development pipeline can be modified to avoid this in the future. Perhaps strong assumptions about the workings of the scheduler should not be so dearly held on to. Local tests could not have reproduced this bug, tests on production servers by Gullible only turned up the bug once or twice. Theoretically, this should always be turning up when the player that joins a coinflip gets kicked or leaves the server, so why wasn’t it more common during testing? How could it have been more adequately tested?&lt;/p&gt;

&lt;p&gt;I don’t know. It’s ironic because solving this bug creates an even harder problem: how to prevent it. And I have a sneaking feeling that I will need to get around to solving it soon.&lt;/p&gt;

&lt;h1 id=&quot;additional-edit-2018-04-14-004005&quot;&gt;Additional Edit (2018-04-14 00:40:05)&lt;/h1&gt;

&lt;p&gt;Some readers may be confused as to how &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryCloseEvent&lt;/code&gt; ends up in the same scheduling loop at all if the first instance that it is called is through &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerList#disconnect(...)&lt;/code&gt;. They reason that since &lt;code class=&quot;highlighter-rouge&quot;&gt;runTask&lt;/code&gt; already schedules for the next tick, all the cleanup would be done and the cycle would never start. The answer to that is: I really have no idea. I know that Essentials kicks players from within a task, so it’s possible that an AFK kick could be causing this, but AFK timers are disabled so I doubt that. I doubt that it is a problem from within the server, because the server doesn’t use the scheduler to process async tasks. Either way, it doesn’t matter what would cause the the loop because whatever is kicking the player is doing it correctly; the inventory itself is not being handled correctly and that is what got fixed.&lt;/p&gt;</content><author><name></name></author><summary type="html">Note: Code samples in this post have been slightly altered. I have not leaked any information from our plugins in the writing of this post</summary></entry><entry><title type="html">Those Mistakes Are Mine</title><link href="https://agenttroll.github.io/blog/2018/03/25/those-mistakes-are-mine.html" rel="alternate" type="text/html" title="Those Mistakes Are Mine" /><published>2018-03-25T01:19:25-07:00</published><updated>2018-03-25T01:19:25-07:00</updated><id>https://agenttroll.github.io/blog/2018/03/25/those-mistakes-are-mine</id><content type="html" xml:base="https://agenttroll.github.io/blog/2018/03/25/those-mistakes-are-mine.html">&lt;blockquote&gt;
  &lt;p&gt;Minions is a shit plugin&lt;/p&gt;

  &lt;p&gt;- @GulliblexD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Minions was included as a part of the initial MineSaga release a little over 2 months ago.&lt;/p&gt;

&lt;p&gt;Depending on the way you look at it, the plugin might never make it to the grave, or it has entered it from the beginning.&lt;/p&gt;

&lt;p&gt;All the bugs in the minions plugin? Yeah. Those mistakes are mine.&lt;/p&gt;

&lt;h1 id=&quot;replication&quot;&gt;Replication&lt;/h1&gt;

&lt;p&gt;One of the hardest things to understand about the plugin is that it is exceedingly difficult to test in a reasonable time frame. It is difficult to determine how the plugin will interact &lt;em&gt;in prod&lt;/em&gt; versus in a test environment. On top of that, the internal architecture of the plugin has changed repeatedly, as have the requirements.&lt;/p&gt;

&lt;p&gt;On top of that, the minions internals deals with incredibly time-sensitive server ticking and chunk mechanics. There are no compromises made to sacrifice performance in these areas, further compounding the problems with replication. Some of the decisions I’ve made have regretfully created many, many insidious bugs that don’t show up until it is in prod.&lt;/p&gt;

&lt;p&gt;The Minecraft server behaves differently in the large monoworld that holds all the skyblock islands than it does in a server with 1-2 players that are testing it. Each incremental update introduces more features that must be tested within the spawn area and outsdide of it, inside the player vision and outside, with chunks loaded and without chunks loaded, and then again for all the modes and then serialized and tested again serialized with and without chunks loaded. The random minion disappear bug? Never been able to have chunks do that without manually unloading the chunk myself.&lt;/p&gt;

&lt;p&gt;I have spent several hours testing minions on multiple releases in order to make sure that they are bug free, but for 90% of the releases, I simply skipped this testing phase. I decided that it was not worth my time to be fruitlessly looking for some new way that the server will decide to interact with minions: only in prod deployment will effectively find the bugs that I am looking for. In hindsight, I think this has led to a lot more pressure on part of the owners and something that, admittedly, I have still yet to fix.&lt;/p&gt;

&lt;p&gt;The gist of it is that minions is doing what the Minecraft server never intended it to do. Custom entity, chunk retention, memory persistence. In the past, when I worked on TridentSDK, I was the one that wrote the entity handler code, and I was able to know exactly what would happen to entities in so and so instance. Minions was one of the first major shifts I had away from that experience because the entities that I am creating are at whim of the server, which consists of millions of lines of obfuscated code. The only real way to understand what the server is doing is to look at the effects of certain pertinent actions and make a guess about what is going on. You know, much like how people put chunk loader minions beneath their farms and then blame me for the farms not working (hint: its your hoppers!) because their experimental design sucks.&lt;/p&gt;

&lt;p&gt;As it turns out, I still have no clue where your minions are going.&lt;/p&gt;

&lt;h1 id=&quot;data-loss&quot;&gt;Data Loss&lt;/h1&gt;

&lt;p&gt;I think that there have been two major occasions where all minions were totally lost, although I’m not completely sure since I have not been shared that information (one of them being a server crash due to DDoS).&lt;/p&gt;

&lt;p&gt;The lesson to take from this, and from today’s breach is that it pays to get it right the first time.&lt;/p&gt;

&lt;p&gt;It pays to have implemented serialization safeties the first time.&lt;/p&gt;

&lt;p&gt;It pays to have implemented a way for players to &lt;code class=&quot;highlighter-rouge&quot;&gt;/minion recover&lt;/code&gt; the first time.&lt;/p&gt;

&lt;p&gt;It pays to have tested the plugin more extensively the first time.&lt;/p&gt;

&lt;p&gt;Alas, for I am only human. I make mistakes. I did/do not write much right the first time. This is true for the few other plugins I have written running on MineSaga, but I think that this is especially true for Minions, mostly for the reasons that I will be discussing in the next section.&lt;/p&gt;

&lt;p&gt;I’d say that it is even fortunate that minions was a horrible plugin at the opportune time that the server was attacked; all plugins that I’ve made since then have implemented much more meticulous data-loss prevention measures and exception handling in order to salvage data if needed. Perhaps if the server was hit a little later down the road, the results might have been different had I not had this experience to learn from.&lt;/p&gt;

&lt;h1 id=&quot;complexity&quot;&gt;Complexity&lt;/h1&gt;

&lt;p&gt;I’ll reiterate again that what minions does, the Minecraft server was never designed to handle. The minions themselves are basically just zombie entities that I “tricked” into emulating the functions of a player. On top of that, there are many technicalities that I never foresaw, most notably the way that blocks moved by pistons are handled. For those that aren’t aware, blocks moved by pistons are temporarily turned into “a part of the piston” (I suppose?). This had to be blacklisted from minions in order for blocks pushed by them to be handled correctly. As it turns out, it also only happens with level 2 minions due to their faster mining speed (another function that required many, many hours of thought and experimentation to get down) and how it syncs with the speed at which cobble is generated and pushed by the piston.&lt;/p&gt;

&lt;p&gt;In another case, the attacking modes require chest checks in order for the minion to halt attacking if the inventory is full. As it turns out, there is no way to “test” if the item fits without doing a huge if/else chain, and so the item is eager-added to the chest and checked for inclusion. This works will for mining modes, where the items are deterministic, but for entity drops, it is harder to deal with. The simplest way to do this was to constantly check if there is an extra slot in the chest, because I’m not going to spawn another entity if those drops fail to get placed into the chest.&lt;/p&gt;

&lt;p&gt;Each component extends and creates its own problems because there are many “moving parts” interacting with each other in order to create the minions. These components are at worst hacks, and at best, “clever workarounds” to circumvent the Minecraft server. This makes it difficult to test and difficult to verify, inducing bugs all over the place. On the contrary, other plugins such as Quests and Points are basically a simple back-end infrastructure to handle a few additional variables and accomodations for menus, which are well-understood and have been tried and tested multitudes of times. Not so much for the very niche functions that minions try to emulate.&lt;/p&gt;

&lt;h1 id=&quot;high-maintenence-cost&quot;&gt;High Maintenence Cost&lt;/h1&gt;

&lt;p&gt;Lastly, minions not only has problems of its own, but it creates problems for others. From falling into the void, duplicating randomly, not serializing correctly, and simply disappearing into thin air, there are so many issues with it that &lt;em&gt;other&lt;/em&gt; people had to deal with as well. It created hardships for the ownership team, who had to handle all these cases and compensate players for missing minions - they are, after all, paid with IRL money - and created hardships for the rest of the staff team, who had to relay and deal with issues they were not familiar with on a daily basis as a result of players asking about their minions.&lt;/p&gt;

&lt;p&gt;One of the things that I kept falling into was the notion that the “minions update” will be a good time to fix all these issues and basically turn minions into an actually functional plugin. In hindsight, however, I’d say that my decision to continue putting time into getting out updates and fixing bugs was a much more prudent course of action than if I had waited. I know this put an additional burden on the owners, who had to update the plugin endlessly on each realm, but I honestly am glad that I put them through that. Although the players may not like having a buggy plugin all the time, I think that without having such a short development pipeline most definitely prevented future grievences. I really have learned a whole lot about entities, having been able to experiment and verify bugs reported by players, and if not now, bugs of a similar vein might come up later on. Future plugins may be written faster and more bug-free as a result of having already done these tests and made changes that are verifiably functional.&lt;/p&gt;

&lt;h1 id=&quot;closing-words&quot;&gt;Closing Words&lt;/h1&gt;

&lt;p&gt;I know that there have been (many) problems with minions. I know that it’s a massive waste of time to deal with the side effects of it. The owners know it too, and when it is said that “minions is a shit plugin,” it is said only half-jokingly, because the reality is that there were many things wrong with it, and there will still be many things to come that I haven’t spotted yet.&lt;/p&gt;

&lt;p&gt;Yet on the other hand, given the circumstances, I don’t think minions is a bad plugin. Of course, I wrote it, so there’s no reason for me to think that it is. I think that it is a really nifty concept, and there’s always a worse place the plugin could be compared to where it is/has been. There have only been 2 instances where minions didn’t do what they were supposed to do for players, and both times were when blocks were being pushed by pistons. All taken, I would say that it was a relative success in spite of the significant number of bumps in the road.&lt;/p&gt;</content><author><name></name></author><summary type="html">Minions is a shit plugin - @GulliblexD</summary></entry><entry><title type="html">Increasing The Player Count</title><link href="https://agenttroll.github.io/blog/2018/03/03/increasing-the-player-count.html" rel="alternate" type="text/html" title="Increasing The Player Count" /><published>2018-03-03T00:19:40-08:00</published><updated>2018-03-03T00:19:40-08:00</updated><id>https://agenttroll.github.io/blog/2018/03/03/increasing-the-player-count</id><content type="html" xml:base="https://agenttroll.github.io/blog/2018/03/03/increasing-the-player-count.html">&lt;p&gt;Gosh its been a while actually for a 2 things: firstly, the 1 year anniversary of the first post on this blog is fast approaching, and two, I’ve been with Intermissum for around 6 months now.&lt;/p&gt;

&lt;p&gt;Speaking of Intermissum, we’ve been growing well over the past month and some that we’ve released. The player average is a good 550 to 600 depending on the day and and the time, and the most recent 2 realms, Western and Jurassic have been at absolute capacity almost every day for the past week or so. Which brings me to my next point…&lt;/p&gt;

&lt;p&gt;We’ve been asked MULTITUDES of times to increase the player count on the Western realm, the most popular server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-1.png&quot; alt=&quot;more slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-2.png&quot; alt=&quot;more slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-3.png&quot; alt=&quot;more slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-4.png&quot; alt=&quot;more slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-5.png&quot; alt=&quot;more slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-6.png&quot; alt=&quot;more slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-7.png&quot; alt=&quot;more slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-8.png&quot; alt=&quot;more slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-9.png&quot; alt=&quot;more slots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No means no you guys.&lt;/p&gt;

&lt;h1 id=&quot;performance&quot;&gt;Performance&lt;/h1&gt;

&lt;p&gt;What some people have a hard time understanding is that the player count is basically the root of all performance problems on a server. The reason why the server experiences lag and missed ticks is because there are too many people online at a time. What makes this issue even worse is that the Western realm is a farm/crop based economy, which means that on top of all the players, the server must also handle the monolithic farms that people are building.&lt;/p&gt;

&lt;p&gt;Our first important point: &lt;strong&gt;The effect of adding more slots amplifies the strain on the server produced by resources associated with that player&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The slot limit on each realm is not “just a number.” A player joining a server is not as simple as incrementing some imaginary counter. Each player consumes a LARGE amount of resources needed to support the experience provided by the server: chunks loaded, net IO handled, ALL crops on that player’s island being ticked, etc…&lt;/p&gt;

&lt;p&gt;Since I do not have exact chunk-loading stats on hand at the time of writing, I’ll use a very conservative figure of entities produced by all the islands to estimate the impact of adding more slots. At any given time, the Western &lt;code class=&quot;highlighter-rouge&quot;&gt;Islands&lt;/code&gt; world contains around 16,000 entities, which might not sound like much (indeed, as it is not much at all), but hang with me here. Given the 200 player capacity, that’s 80 entities loaded per player, the conservative estimate compensating for players loading the same entities (i.e. players on the same island).&lt;/p&gt;

&lt;p&gt;Say that we bump up a “small” 25 additional slots. That means loading an additional 2000 entities on the server - and that’s just 25 players!&lt;/p&gt;

&lt;p&gt;The point I’m trying to communicate here is that if the server load is thought of in terms of resources that each player takes up, instead of the “few slots” increase, we are actually compounding the increase by a factor of 80 for each additional player.&lt;/p&gt;

&lt;p&gt;Now again, we are just estimating here, and each player does not actually amplify the load placed on the server by a factor of 80 (it is much less). However, it goes to show my point that players are expensive not in themselves, but rather in their effects.&lt;/p&gt;

&lt;p&gt;In fact, to further demonstrate my point, let us not use entities (which are a better representation of the resources associated with a player because players are a subset of entities), but rather blocks. A chunk consists of a 16x16x256 section of blocks, 65536 in total. To make our calculations easier, let us assume that only about 1/12 of those blocks are actually cacti, making a single chunk require 5461 cacti to tick. A player loads around 150 chunks on a server, depending on the limits set by the owner, but for ease of calcualation, let us assume that a player only loads 25 chunks worth of cactus farm. Then, adding a single player will not only require the server to handle an additional player, but also 136525 worth of cacti to grow, 20 times in a single second! Accounting for players who are not loading their whole cactus farm and those whose farms are far larger, a reasonable estimate for the number of cacti to process comes out to about 100k times 225, or about 22,500,000 blocks.&lt;/p&gt;

&lt;h1 id=&quot;user-experience&quot;&gt;User Experience&lt;/h1&gt;

&lt;p&gt;Secondly, while I am not going to disclose exact stats, the server for sure does not run at 20 TPS, even capped at 200 players. There is a very simple reason here:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The server has a limited amount of time to complete tasks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The age of cacti is incrememnted randomly 20 times per second, each tick that the server runs. If all the cacti on the server have been processed before the end of the tick, that’s good! The server will in fact, pause and not do anything until the beginning of the next tick, where all the cacti will again be processed, and so on.&lt;/p&gt;

&lt;p&gt;Things get a little more complicated when the amount of time needed to complete the task overruns the time allocated to the tick. In the space of 20 seconds, 400 ticks &lt;em&gt;should&lt;/em&gt; be run. However, if each tick overruns itself by, oh, an extra tick, then only 200 ticks will be run in that same amount of time. This means that 200 ticks are “lost” because there was only enough time to increase the age of each block the first 200 times.&lt;/p&gt;

&lt;p&gt;Why is this important?&lt;/p&gt;

&lt;p&gt;The crops are already growing at about half speed.&lt;/p&gt;

&lt;p&gt;By adding more players, the effect is that crops will slow down. There is no limit to the amount of slowdown that can be acheived as long as no player disconnects from the server. As each tick takes longer and longer, it is possible for it to overrun 1 second, 2 seconds, etc…&lt;/p&gt;

&lt;p&gt;The argument here is that your crops all seem to grow slowly because all the other players are taking care of and loading in these humongous farms (22,500,000 blocks to be more preceise). Adding more players will also slow down your crops even more.&lt;/p&gt;

&lt;p&gt;When people think selfishly and want only their singular goal to be fulfilled, it detriments the experience of others who are waiting for their crops to grow, and eventaully, when you yourself finally do join the server thanks to the 500 player cap, you will be complaining about how the crops don’t grow at all.&lt;/p&gt;

&lt;h1 id=&quot;server-hardware&quot;&gt;Server Hardware&lt;/h1&gt;

&lt;p&gt;So why not get a better computer?&lt;/p&gt;

&lt;p&gt;Unfortunately &lt;strong&gt;the server runs on the highest tier hardware available to us&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/increasing-player-count-10.png&quot; alt=&quot;less slots&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;queueing&quot;&gt;Queueing&lt;/h1&gt;

&lt;p&gt;People have been having problems joining full realms because, well, they’re full &lt;em&gt;all the time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So instead of having people stand and try to spam click on the Western NPC, a queue was implemented to allow players to wait to be teleported to the realm.&lt;/p&gt;

&lt;p&gt;Now, the problem isn’t that the server is full all the time, it’s that peoples’ place in the queue don’t change, or even go up.&lt;/p&gt;

&lt;p&gt;Then there’s people who buy the Buckaroo rank and think they’re supposed to be 1st in the queue.&lt;/p&gt;

&lt;p&gt;The queue prioritizes staff members, youtubers, donators &lt;em&gt;descending by rank&lt;/em&gt;, and finally regular players. Bought a rank but not 1st in line? Thanks for supporting us. But you’ll have to wait your turn. This order helps benefit &lt;em&gt;all parties&lt;/em&gt; involved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Owners/developers/admins/most lower-level staff do not play the game, we’re here purely to help people and to moderate&lt;/li&gt;
  &lt;li&gt;YouTubers bring content to the community and bring the community to us, growing our own revenue base and supporting content that goes directly back to players&lt;/li&gt;
  &lt;li&gt;Donators are in the same deal as with YouTubers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donators are also queued by rank as well. I’m not an economist, but this is just basic economic theory: scarcity of resources (i.e. player slots), money is a medium through which access to limited resources is controlled. It sounds P2W and all, but it is not; everyone is paying to wait in line (“except” for upper-level staff). Those who have more money gain access to the “limited resource” (i.e. player slot) first, because they have helped support the server more. In the end, everyone has the chance to access the server. On top of that, Western is not a donator-only realm. There are several non-ranked players who play on Western even at peak hours, which means that even the lowest ranked players have the opportunity to join the server.&lt;/p&gt;

&lt;p&gt;Finally, a kick-based model will never be used in the forseeable future. In this model, players are kicked out rather than having to wait if there are not enough slots. This is a horrendous and unfair system that makes joining the server totally P2W. Based on the number of donators on Western, it would be easy to kick out ALL non-ranked players, if not a large number of the lower-ranked players as well. Then, the complaint will not be that the queue is too long; it will be that people are getting “randomly kicked” and that the system is “unfair” because rich people still have the advantage. If the queue model is P2W, then the kick model will be even more so.&lt;/p&gt;

&lt;p&gt;Yeah, we’re sticking with the queue system.&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h1&gt;

&lt;p&gt;I hoped that through my endless rambling and criticism that I’ve cleared up some thoughts that people have had regarding the slot availability on MineSaga. We are not going to increase the slots or get rid of the queue because it is simply the most effective way that we have so far to manage the limited resources availible to the server.&lt;/p&gt;

&lt;p&gt;There have been multiple discussions privately about how to distribute computing power and divide up how the different realms and islands are managed. I do not feel comfortable sharing those details without approval so they remain purely for speculation at the moment. Stay tuned! :)&lt;/p&gt;</content><author><name></name></author><summary type="html">Gosh its been a while actually for a 2 things: firstly, the 1 year anniversary of the first post on this blog is fast approaching, and two, I’ve been with Intermissum for around 6 months now.</summary></entry><entry><title type="html">Status Update: Installing Arch for the First Time</title><link href="https://agenttroll.github.io/blog/2018/01/06/status-update-installing-arch-for-the-first-time.html" rel="alternate" type="text/html" title="Status Update: Installing Arch for the First Time" /><published>2018-01-05T23:00:00-08:00</published><updated>2018-01-05T23:00:00-08:00</updated><id>https://agenttroll.github.io/blog/2018/01/06/status-update-installing-arch-for-the-first-time</id><content type="html" xml:base="https://agenttroll.github.io/blog/2018/01/06/status-update-installing-arch-for-the-first-time.html">&lt;p&gt;It’s been draining on the soul, but luckily coming up with a “unique” title has been rejuvenating (rejuvinatig? rejuvenating? whatever).&lt;/p&gt;

&lt;p&gt;I don’t profess to be an expert on ArchLinux, or even Linux in general but based on my experience installing Arch on my MacBook Pro 11.something, I’d be even more wary of following a random blog post (because it probably won’t work). I don’t think any of the issues that I encountered were unique by any means, but I believe my own little successes are the result of the wealth of mainly online resources. I’m therefore very keen to share my own experience and perhaps someone might come along and save a few hours of their lifetime and hair-tearing.&lt;/p&gt;

&lt;h1 id=&quot;getting-over-the-hurdle&quot;&gt;Getting Over the Hurdle&lt;/h1&gt;

&lt;p&gt;For me, the primary challenge in the first place was connecting to the Internet. To go along with that, my MacBook carries with it a Broadcom Wireless interface, which requires a proprietary driver in order to work correctly. Fortunately, it was just the right hardware that happened to work with the proprietary driver. Unfortunately, the driver requires the Internet to obtain, and my USB was all occupied with carrying the bootable ISO. Therefore, the only way I can get the required packages is by exiting the Arch CLI and manually downloading on macOS, then going back and mounting whatever partition on which I downloaded the package.&lt;/p&gt;

&lt;p&gt;First lesson here: it is impossible to install Arch without access to another installation with Internet. Let me repeat that: &lt;strong&gt;IMPOSSIBLE&lt;/strong&gt;. If you are rich and can buy an ethernet/thunderbolt adapter, go nuts, save yourself some time. Otherwise, you must at least have a VM that boots the Arch ISO in order to download the packages. I’ll spare the gory details of trying to compile &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcom-wl&lt;/code&gt;, which consisted of failing to compile due to Internet requirements, not realizing that you can’t get the right kernel version without rebooting, and thinking that &lt;code class=&quot;highlighter-rouge&quot;&gt;mkinitcpio&lt;/code&gt; will save my butt (It didn’t).&lt;/p&gt;

&lt;p&gt;Secondly, to install packages on a different computer, you must A) Know how how to install Arch B) Get the built packages and C) Get those packages onto the laptop. Honestly, I messed up enough times without Internet access in the first place just dealing with A: formatting the wrong partition (luckily the USB /dev/sdb) multiple times before I figured out why my bootable USB wasn’t bootable anymore, dealing with &lt;code class=&quot;highlighter-rouge&quot;&gt;mount -o force ...&lt;/code&gt; in order to be able to write, and forgetting to mount the target partition. Needless to say, there was lots of &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -fR /&lt;/code&gt;, but at the same time, the repetition drilled in deep the commands required, so I got faster and faster at failing. Better to fail quickly than slowly I suppose.&lt;/p&gt;

&lt;p&gt;In short, the process went something like so for me: mount temp partition from the VirtualBox “disk,” then run the following:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Sy&lt;/span&gt;
pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cachdir&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--dbpath&lt;/span&gt; /tmp base base-devel linux-headers broadcom-wl-dkms wpa_supplicant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then transfer the all the .pkg files onto macOS using nc. Once I have them, I can then put them on a mounted transfer partition that I used to access those files more easily from the boot CLI.&lt;/p&gt;

&lt;h1 id=&quot;finally-installation&quot;&gt;Finally, Installation&lt;/h1&gt;
&lt;p&gt;The truth is that in order to install the base system, one only needs the base package, and that’s it. In short, you need to do the following in order to “install” Arch:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cgdisk&lt;/code&gt; and format the partition&lt;/li&gt;
  &lt;li&gt;Mount desired partition&lt;/li&gt;
  &lt;li&gt;Mount the &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; partition&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pacstrap&lt;/code&gt; the desired repo with the base arg&lt;/li&gt;
  &lt;li&gt;Chroot into the mount dir&lt;/li&gt;
  &lt;li&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; entry for the correct partition&lt;/li&gt;
  &lt;li&gt;Reboot&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I won’t go into specifics here, since firstly I’m not a very good source of info and secondly, because these are quite easy steps that you can find on the Internet. Again, needless to say, I messed up on multiple occaisions here: &lt;code class=&quot;highlighter-rouge&quot;&gt;cgdisk&lt;/code&gt; on the wrong disk, forgetting to mount &lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; and ending up with an unbootable system, writing the wrong partition UUID to &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt;, etc…&lt;/p&gt;

&lt;p&gt;It is absolutely vital that you are able to reboot. This is the only way that you can update to the correct kernel version and access your modules, and I guarantee that a successful boot is the most important milestone here, even if you aren’t able to connect to the WiFi quite yet.&lt;/p&gt;

&lt;h1 id=&quot;the-wifi-problem&quot;&gt;The WiFi Problem&lt;/h1&gt;

&lt;p&gt;Back to our initial issue, although we have Arch installed without using the Internet on the target machine, we still do not have Internet access. Luckily, having the &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcom-wl-dkms&lt;/code&gt; file on our transfer partition, we can &lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S&lt;/code&gt; that very easily. Having already confirmed that the kernel has been updated, we can safely restart and see through &lt;code class=&quot;highlighter-rouge&quot;&gt;ip a&lt;/code&gt; that the driver has successfully detected the network interface - a good sign.&lt;/p&gt;

&lt;p&gt;For me, this all happened at school, where the WiFi setup was a little more complicated since we used WPA Enterprise, so I had to wait until I got home.&lt;/p&gt;

&lt;p&gt;The good news came late at night, when I was toying with &lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_supplicant&lt;/code&gt;. I was able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;wpa_password&lt;/code&gt; to generate the config, but not realizing that I needed to also set the &lt;code class=&quot;highlighter-rouge&quot;&gt;ap_scan&lt;/code&gt; and ssid scan in order to detect my network (which had SSID masking enabled), I was finally able to connect to the Internet. Content with Internet access for the time being, I got to installing and setting up a few other personal neccessities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xorg&lt;/li&gt;
  &lt;li&gt;Display Manager (LightDM)
    &lt;ul&gt;
      &lt;li&gt;Careful, you also need the locker (I used gtk) for it to work!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;i3wm, dmenu&lt;/li&gt;
  &lt;li&gt;Users&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chromium&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xfce4-terminal&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But since the entire idea of my laptop was that it was portable, and I already had a well-established Debain computer at home, I was bent on getting WiFi to work at my school. That wouldn’t happen for another several weeks though; it was winter break, and I didn’t plan on going to school at all to test whether or not my config worked.&lt;/p&gt;

&lt;h1 id=&quot;the-breakthrough&quot;&gt;The Breakthrough&lt;/h1&gt;

&lt;p&gt;It takes only a few seconds to look at the massive variety in responses to the “proper” config for WPA Enterprise one can find on Google, but as it turns out, whatever people say “works for them” is very blatantly BS. The config depends entirely on the network, and there is no way around having to try out different combinations of “WPA-EAP/IEEE801X…” and “CCMP/TKIP/…” and other options that I still have no interest in. However, recalling that I have a handy MacBook, I booted into macOS to see if I can get some hints by connecting to the WiFi, which I already knew worked splendidly without any hassle. From there, I knew that I could use “WPA-EAP” and “PEAP” options, and the rest goes guess-and-check.&lt;/p&gt;

&lt;p&gt;For my own future reference, this is what I used:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Description='Automatically generated profile by wifi-menu'
Interface=wlp2s0
Connection=wireless
Security=wpa-configsection
ESSID=$SSID
IP=dhcp
WPAConfigSection=(
        'ssid=&quot;$SSID&quot;'
        'proto=RSN'
        'key_mgmt=WPA-EAP'
        'eap=PEAP'
        'identity=&quot;$USERNAME&quot;'
        'password=&quot;$PASSWORD&quot;'
        'phase1=&quot;peaplabel=auto peapver=0&quot;'
        'phase2=&quot;auth=MSCHAPV2&quot;'
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;Although trying a CLI-based install for the first time was an interesting experience, and I felt like I learned a lot from it compared to a more graphical nod that Debian takes, it still was frustrating and uncooperative even at the best of times. I’m happy with the end result, even if it’s not perfect though, and as always, the pleasure and satisfaction that comes with finally wrangling something to work is much more powerful than the ordeal that it takes to acheive that.&lt;/p&gt;

&lt;p&gt;Although it &lt;em&gt;would&lt;/em&gt; be nice if I could actually see anything, I still haven’t figured out that HiDPI thing yet…&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s been draining on the soul, but luckily coming up with a “unique” title has been rejuvenating (rejuvinatig? rejuvenating? whatever).</summary></entry></feed>