<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://agenttroll.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://agenttroll.github.io/blog/" rel="alternate" type="text/html" /><updated>2019-07-17T19:19:43-07:00</updated><id>https://agenttroll.github.io/blog/</id><title type="html">Inside a Troll</title><subtitle>Thoughts of a Java developer</subtitle><entry><title type="html">Lessons Learned Debugging: Part 6</title><link href="https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 6" /><published>2019-07-13T20:42:05-07:00</published><updated>2019-07-13T20:42:05-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6.html">&lt;p&gt;This is another one of those “watch out when you’re doing
XYZ” rather than a specific thing to do (or not do).&lt;/p&gt;

&lt;h1 id=&quot;be-careful-handling-inventories&quot;&gt;Be Careful Handling Inventories&lt;/h1&gt;

&lt;p&gt;Inventories are basically death traps in the world of
Bukkit programming. It is surprisingly easy to get
exceptions, duplication bugs (for the uninitiated: bugs
that allow players to obtain more of an item than intended,
often disrupting the in-game economy), and even &lt;a href=&quot;https://agenttroll.github.io/blog/2018/04/13/keeping-inventories-open.html&quot;&gt;crash the
server&lt;/a&gt;
just handling inventories and &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Writing event handlers for &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryClickEvent&lt;/code&gt; and
dealing with any use-case for &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt; should be
approached with caution.&lt;/p&gt;

&lt;h1 id=&quot;exceptions-in-event-handlers&quot;&gt;Exceptions in Event Handlers&lt;/h1&gt;

&lt;p&gt;As a reminder from the
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5.html&quot;&gt;previous post in this series&lt;/a&gt;,
exceptions thrown can cause problems. For example, when
event handlers modify the quantity of items as a result of
some action, an inadvertent exception may terminate the
handler before it reaches the portion of the code that
removes the item, or updates the inventory for that matter.
One way to get around this is to always modify the item in
whatever desired fashion, e.g. reducing its quantity,
before actually executing the action associated with using
that item. However, this isn’t a perfect solution because
errors could crop up before, such as when you are verifying
the item type or pre-conditions. On top of that, that also
leaves server owners with the responsibility of either
refunding or replacing the items that are consumed but no
action is done in the case that the code following the
item modification fails.&lt;/p&gt;

&lt;p&gt;Again, there isn’t a catch-all solution to this problem. Of
course, exceptions will sometimes leak through the cracks,
as is with all programming errors. The key is to reduce its
frequency by taking care to think through the logic and the
possible edge cases that might occur.&lt;/p&gt;

&lt;p&gt;As a real-life anecdote, one of the duplication bugs I had
to deal with was a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; because I didn’t
account for the fact that both dispenser and dropper blocks
could fire &lt;code class=&quot;highlighter-rouge&quot;&gt;BlockDispenseEvent&lt;/code&gt;. What happened was an
exception occurred before the item was supposed to be
removed from the dispenser, which means that it would get
dispensed as a result of the event failing to be cancelled,
and the item would not leave the dispenser, which allowed
people to have an infinite item generator.&lt;/p&gt;

&lt;h1 id=&quot;nullpointerexceptions-galore&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;s Galore&lt;/h1&gt;

&lt;p&gt;Returning back to the basics, many novice programmers
struggle to use &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryClickEvent&lt;/code&gt; and check items.
As someone who has frequented the Bukkit Forums and the
SpigotMC forums for years on end, I’ve seen countless
threads where &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; is thrown simply from
checking the &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemMeta&lt;/code&gt;. Luckily, these days, it gets
harder and harder to find these threads, thanks to the
efforts to document nullability in the API.&lt;/p&gt;

&lt;p&gt;Back before the more recent API versions, what was &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;
and what wasn’t was basically guesswork that you needed to
keep stored in the back of your mind. There are plenty of
places you can get it - starting from getting the inventory
slot itself to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemMeta&lt;/code&gt; itself, to the individual
methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemMeta#getDisplayName()&lt;/code&gt;. This was further
compounded by the inconsistent use of &lt;code class=&quot;highlighter-rouge&quot;&gt;Material#AIR&lt;/code&gt; to
denote an empty/no item. For example, in
&lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerInteractEvent&lt;/code&gt;, I believe that using &lt;code class=&quot;highlighter-rouge&quot;&gt;getItem()&lt;/code&gt;
from the event would return &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; for no item, but
&lt;code class=&quot;highlighter-rouge&quot;&gt;Player#getItemInHand()&lt;/code&gt; would return an &lt;code class=&quot;highlighter-rouge&quot;&gt;AIR&lt;/code&gt; item. In
fact, &lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory#getItem(int)&lt;/code&gt; would return &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; as well,
and any setter accepted a &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; item as an empty itme as
well so the inconsistent use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AIR&lt;/code&gt; material
essentially makes no sense at all in this case.
Regardless, I digress. Even for more advance programmers,
the Bukkit inventory API is still difficult to navigate.&lt;/p&gt;

&lt;p&gt;Honestly the best advice I can really give is find one way
to do things and stick with it. This is a controversial
view for obvious reasons; you should be experimenting and
all that. However, when you are writing code at a
professional level where results are expected and errors
are only tolerable at the very best, you should leave the
experimentation and use what you know works.&lt;/p&gt;

&lt;p&gt;Honestly, you don’t need to take it from my mouth how to
write better code. The “on-board shuttle group” writes
the code that launches astronauts into space. There is no
room for error when human lives are on the line.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the on-board shuttle group produces grown-up software,
and the way they do it is by being grown-ups. It may not be
sexy, it may not be a coding ego-trip — but it is the
future of software. When you’re ready to take the next
step — when you have to write perfect software instead of
software that’s just good enough — then it’s time to grow
up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;a href=&quot;https://www.fastcompany.com/28121/they-write-right-stuff&quot;&gt;They Write the Right Stuff&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This is especially true for an environment like Bukkit
development, where tests end at play testing and software
verification is virtually non-existent. The way you reduce
bugginess is by writing code right - the first time.&lt;/p&gt;

&lt;h1 id=&quot;innocent-looking-code-might-still-fail&quot;&gt;Innocent-looking Code Might Still Fail!&lt;/h1&gt;

&lt;p&gt;Often, it is the most innocuous piece of code that fails.&lt;/p&gt;

&lt;p&gt;Another anecdoate of mine is where a generator which
simply fills an inventory with valuable items such as
mineral (diamond/emerald/etc.) blocks. When it was removed,
it is possible for someone which you’ve given access to
the generator to retain the inventory. Although the
generator was removed, the generator’s inventory was still
open. Because I assumed that the generator was unreachable
after removal, all of the items in the inventory would drop
on the floor so people wouldn’t lose those items. To save a
bit of performance, I didn’t clear any items from the
inventory because it could be arbitrarily big. However,
people doubled their payday by first having a buddy open
the inventory, before removing the generator. The buddy
still has access to all the items that dropped, and
collects both the dropped items as well as the uncleared
inventory.&lt;/p&gt;

&lt;p&gt;The lesson here is simple: don’t make any assumptions about
the code you are writing! It helps to try and write your
code to be &lt;em&gt;correct&lt;/em&gt; the first time around - had I not
simply assumed the inventory would be unreachable, I would
have just cleared everything at the end. If someone
discovers this, it would then just be a UI bug and I’d just
need to make sure to close all of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory#getViewers()&lt;/code&gt; prior to dropping everything.
Don’t prioritize performance over correctness. Ironically,
this was &lt;em&gt;still&lt;/em&gt; not even the end of the story, because
closing the inventories from that collection caused a CME.
If you want to learn more about that, you can check out the
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html&quot;&gt;second installment&lt;/a&gt;
in this series :).&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;While I don’t often get the chance to say this, I hope
you’ve learned something new from my own experiences. I
speak with very people who talk about my blog, so I can
only speculate as to whether actual people are truly being
impacted.&lt;/p&gt;

&lt;p&gt;As is customary at the end of every post in this series,
I leave with the following wisdom from
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code
that is used to control the airplane that you fly on, the
nuclear power plant a few miles from where you live, or the
spacecraft that carries astronauts into orbit. The rules
act like the seat-belt in your car: initially they are
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gathering information and learning is one way to
add to your repertoire of programming knowledge outside of
literally just writing your own personal projects. As you
gain more experience, you will write better and better
software. I promise.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is another one of those “watch out when you’re doing XYZ” rather than a specific thing to do (or not do).</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 5</title><link href="https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 5" /><published>2019-07-02T20:22:15-07:00</published><updated>2019-07-02T20:22:15-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5.html">&lt;p&gt;This isn’t a bugginess lesson, but if you’re ever going to
progress beyond a novice-level plugin developer (or even a
Java developer for that matter), then you’ll need to figure
out how to ensure data integrity.&lt;/p&gt;

&lt;h1 id=&quot;minimize-data-loss-in-case-of-catastrophe&quot;&gt;Minimize Data Loss In Case of Catastrophe&lt;/h1&gt;

&lt;p&gt;This is not a very pointed piece of advice (more on that in
a bit), but the whole idea is to design your plugins around
making sure that as much of your data is kept somewhere
safe so that in the event of a catastrophe, a bad weather 
event knocks out your server, you get hacked, your server
crashes, etc., you can recover at least some, hopefully
most of your data. This isn’t some external threat that you
can hope to avoid, this is &lt;strong&gt;inevitable&lt;/strong&gt;. You cannot hope
to continue avoiding these types of events forever, and 
take it from me, I learned it the hard way.&lt;/p&gt;

&lt;p&gt;If you are writing plugins and getting paid to do so, you
MUST have some sort of mechanism to minimize data loss.
Servers fail all the time; it is not a matter of if, it is
a matter of when. It is not a choice, it is a 
responsibility.&lt;/p&gt;

&lt;h1 id=&quot;how-to-protect-your-data&quot;&gt;How to Protect Your Data&lt;/h1&gt;

&lt;p&gt;The most effective way to minimize data loss is through
autosaving to disk. Autosaving writes a reconstructible
state, which means that the exact properties, settings,
objects, whatever type of data being stored in your plugin
at the exact moment in time can be derived from the data 
that you save. This means that you should act like your 
plugin is calling then &lt;code class=&quot;highlighter-rouge&quot;&gt;onDisable&lt;/code&gt; method without actually
having the server shut down every X minutes. It should not
be up to the developer to decide how long the autosave
interval is, and therefore, this should be configurable.
That being said, 15-30 minutes is a good sweet spot. 
Writing data to disk ensures that the data cannot be lost
if the server itself crashes, or a power outage occurs.
Even if a disk failure occurs, data can sometimes be 
recovered from the disk. Preferably, &lt;em&gt;secure&lt;/em&gt; backups are
made every so often as well, which means that it is 
possible to snapshot the disk state and prevent the 
autosaves from going to waste even if the disk is
inadvertently destroyed, or access to the server is 
completely lost or deleted altogether.&lt;/p&gt;

&lt;p&gt;It is important to note that even autosaves are a point of
failure. For example, the following code is not an 
effective way to save data:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem is that multiple things could possibly go wrong
here. It may not even be possible to open a new 
&lt;code class=&quot;highlighter-rouge&quot;&gt;BufferedWriter&lt;/code&gt; if the OS exhausts the available file 
handles. A more effective solution looks like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way, even if the file cannot be written to, at least
it might possibly be recovered by parsing the log file or
by piping the console output somewhere (the parser of this
data need not be written beforehand, but the data itself 
should at least be available). Additionally, even if 
individual &lt;code class=&quot;highlighter-rouge&quot;&gt;Data#serialize()&lt;/code&gt; methods fail, it will not
prevent other data from being saved.&lt;/p&gt;

&lt;p&gt;Plugins also need to be extremely careful about exceptions
thrown in the &lt;code class=&quot;highlighter-rouge&quot;&gt;onEnable&lt;/code&gt; method. Because errors during 
startup cause plugins to be disabled (often with empty 
data), this means that the data file will be overwritten
because of a parsing error and all the data will disappear.
However, ignoring this error is also problematic because it
will not prevent the plugin from overwriting all of the 
data on shutdown with the new data. There are multiple
avenues to solving this, including backing up every server
startup, using a ring buffer style system where the file
is copied to a (or multiple) temporary files each time, or
by using a log file that records changes rather than a
file which records the singular state of the plugin. The 
most effective solution I personally am aware of is the
second option, where temporary files are used to store a
backup of the data, but only in case an exception occurs:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onEnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This isn’t perfect, because the exception could possibly
stem from the fact that file handles have been exhausted,
so the “safest” option is going with a backup every 
startup, but this is a lightweight solution for what a
rather serious potential issue, so I personally go with it.&lt;/p&gt;

&lt;p&gt;Another useful way to ensure data integrity is to turn off
autorestart. Autorestarting is really helpful and keeps 
players happy when a server goes down due to a one-off 
error, but in the long run, the safest option is to make 
sure that a server that goes down stays down until the 
issue is identified. The issue doesn’t necessarily need to
be entirely resolved (only a band-aid needs to be put over
such as removing a plugin while it is fixed), but ensuring
that plugins do not start up again only to enter an endless
loop of crashing the server and starting it up again will
ensure that the data that is backed up stays until it can
be properly restored and the error can be properly
investigated. For example, if you are saving in the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;onEnable&lt;/code&gt; to the same backup file whenever an exception 
is thrown, then it will do little good for you because the
autorestart might erase both the original and the backup as
well if the original is now empty.&lt;/p&gt;

&lt;p&gt;These are just a few of the pointed pieces of advice I
have. I’m certain that there are more ways to reduce data
vulnerability, but this is a very broad problem that has
a large variety of different solutions.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Just because autosaving is an integral part of maintaining
data integrity does not mean that you need to be paranoid.
However, it does mean that you need to be prudent and look
use extra caution when writing mission-critical portions of
your plugin.&lt;/p&gt;

&lt;p&gt;Again repeating my custom, I leave with the following wisdom
from 
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re tuned in with my blog, you can expect some more
of posts in the “Lessons Learned Debugging” series in the
near future. I don’t have any big projects that I want to
talk about (yet), but if I find or write one, I’ll be sure
to write about that first. As of the writing of this post,
I’m still open to Bukkit development opportunities, so if
you’re hiring, check my 
&lt;a href=&quot;https://agenttroll.github.io/&quot;&gt;main website&lt;/a&gt; under 
“Professional Experience” to see if I’m still looking for
work.&lt;/p&gt;</content><author><name></name></author><summary type="html">This isn’t a bugginess lesson, but if you’re ever going to progress beyond a novice-level plugin developer (or even a Java developer for that matter), then you’ll need to figure out how to ensure data integrity.</summary></entry><entry><title type="html">Implementing PBFT in Java</title><link href="https://agenttroll.github.io/blog/2019/06/23/implementing-pbft-in-java.html" rel="alternate" type="text/html" title="Implementing PBFT in Java" /><published>2019-06-23T17:23:35-07:00</published><updated>2019-06-23T17:23:35-07:00</updated><id>https://agenttroll.github.io/blog/2019/06/23/implementing-pbft-in-java</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/06/23/implementing-pbft-in-java.html">&lt;p&gt;Following up with my &lt;a href=&quot;&quot;&gt;previous post&lt;/a&gt; about one of my 
prior projects, I have another post about yet another
project that I’ve recently finished, 
&lt;a href=&quot;https://github.com/AgentTroll/pbft-java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-pbft&quot;&gt;What is PBFT?&lt;/h1&gt;

&lt;p&gt;PBFT stands for Practical Byzantine Fault Tolerance. PBFT
is an algorithm developed by Miguel Castro and Barbara
Liskov that allows replicated systems to tolerate what are
called Byzantine faults. Since some readers don’t know what
a Byzantine fault is, here is what Wikipedia has to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Byzantine fault […] is a condition of a computer 
system, particularly distributed computing systems, where 
components may fail and there is imperfect information on 
whether a component has failed. The term takes its name 
from an allegory, the “Byzantine Generals Problem”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Wikipedia page on the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Two_Generals%27_Problem&quot;&gt;“Two Generals’ Problem”&lt;/a&gt;
has a good description of what the Byzantine General’s
Problem is, but the general gist is that a consensus has
to be made upon a decision or computation where one of the
parties involved may be compromised, may be malicious, or
could be faulty. When applied to computing systems, a set
of replica computers will need to decide on the correct
course of action even though other computers may send 
erroneous data or not even send any data at all.&lt;/p&gt;

&lt;p&gt;The PBFT algorithm is described by the paper authored by
Castro and Liskov, which can be read
&lt;a href=&quot;http://pmg.csail.mit.edu/papers/osdi99.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;client-implementation&quot;&gt;Client Implementation&lt;/h1&gt;

&lt;p&gt;I personally used a multitude of different sources when
developing this project as an abstraction to the PBFT 
algorithm, and even then, I am still confused on whether or
not I even got everything down correctly.&lt;/p&gt;

&lt;p&gt;For simplicity, I will refer to the configured fault 
tolerance to be &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; as in the PBFT paper, the number of
replicas that can have Byzantine faults while still 
allowing a safe consensus to be reached.&lt;/p&gt;

&lt;p&gt;The client implementation is very, very simple. Only two
messages need to be implemented, the sending and receiving
capability for one and the other, and the timeout.&lt;/p&gt;

&lt;p&gt;Requests are identified by their timestamp value, which 
count up from 0 instead of using the actual system clock 
since it is possible to send more than one message during 
the time it takes for &lt;code class=&quot;highlighter-rouge&quot;&gt;System#currentTimeMillis()&lt;/code&gt; to 
update its value.&lt;/p&gt;

&lt;p&gt;Once a REQUEST is sent to what is believed to be the 
primary, users will call the &lt;code class=&quot;highlighter-rouge&quot;&gt;Client#checkTimeout()&lt;/code&gt; method
in a loop, which will check to make sure that a REPLY is 
received within the configured timeout. If it isn’t, then a
REQUEST is then multicasted to all replicas.&lt;/p&gt;

&lt;p&gt;The client continuously waits for a REPLY message from 
replicas. As soon as it receives the &lt;code class=&quot;highlighter-rouge&quot;&gt;f + 1&lt;/code&gt;th REPLY 
message that matches a stored REPLY, then the result is
accepted and the timer is stopped.&lt;/p&gt;

&lt;h1 id=&quot;replica-implementation&quot;&gt;Replica Implementation&lt;/h1&gt;

&lt;p&gt;Replicas are vastly more complicated and have tons of 
moving parts that need to be considered for each message.&lt;/p&gt;

&lt;p&gt;In short, what a replica does is wait for REQUEST messages
and then go through a process to ensure that all other 
replicas also agree to go through the same process. Then,
it will send a REPLY message with the computed result. If
the replica waits for too long, it will try to vote out the
primary with a VIEW-CHANGE message in hopes of getting 
things going again.&lt;/p&gt;

&lt;h4 id=&quot;receiving-request&quot;&gt;Receiving REQUEST&lt;/h4&gt;

&lt;p&gt;If the replica already has already responded to a REQUEST
with the same client ID and the same timestamp, then it
means that the operation has already completed and it will
simply resend the cached REPLY for that operation.&lt;/p&gt;

&lt;p&gt;When a replica receives a REQUEST message that it didn’t
know about before, it will start a timer that will ensure
that things keep moving. If the replica isn’t the primary,
then it simply redirects the message to the primary 
instead.&lt;/p&gt;

&lt;p&gt;If the replica is a primary, then it will ensure that the
message shouldn’t be bufferred. If the number of requests
currently being handled is greater than the configured 
buffer limit, the primary puts it into a FIFO queue to be
executed at a later time.&lt;/p&gt;

&lt;p&gt;The primary then sends a PRE-PREPARE to all non-primaries
and relays the request to them, adding the sent message
to its log.&lt;/p&gt;

&lt;p&gt;Replicas identify accepted REQUEST messages using the
current view number and the sequence number that the 
primary assigns to it. The primary adds the multicasted
PRE-PREPARE message to a new ticket for that REQUEST.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;, I assume that the REQUEST message is 
included with the PRE-PREPARE message to simplify the 
encoding process. Users can decide whether or not to follow
suit, they can always set the REQUEST to null and utilize 
their own thing if they want to follow the an orthodox
implementation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;receiving-pre-prepare&quot;&gt;Receiving PRE-PREPARE&lt;/h4&gt;

&lt;p&gt;When a non-primary receives a PRE-PREPARE, it ensures that
the view number is equal to the view that replica currently
is in, and that the message sequence ID is between the 
specified water marks, otherwise it ignores the message.
The replica then checks to ensure the digest is correct, if
the replica already has a matching ticket (one that has the
same view number and sequence number), then it will also
check to make sure that the new PRE-PREPARE message doesn’t
have a digest different from the previous PRE-PREPARE. If
these two conditions aren’t met, then the replica also 
ignores the message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Digests are &lt;code class=&quot;highlighter-rouge&quot;&gt;byte[]&lt;/code&gt; arrays in &lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;. Additionally,
ticketing is used because messages could arrive 
out-of-order, so I’m not sure if the PBFT paper specifies
that I should check the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt;
states every single time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having accepted the PRE-PREPARE message, the replica then
creates a new ticket. It then adds the PRE-PREPARE message 
to the log, and multicasts a PREPARE message to all known 
replicas, also adding that PREPARE message to the log.&lt;/p&gt;

&lt;p&gt;The replica will then attempt to check on the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt; states, executing the response to 
those states as necessary. More on that below.&lt;/p&gt;

&lt;h4 id=&quot;receiving-prepare&quot;&gt;Receiving PREPARE&lt;/h4&gt;

&lt;p&gt;When a replica receives a PREPARE, it will also check to
make sure that the view number is equal to the current view
number and the sequence number is within the water marks,
otherwise ignoring the message. It will create a new ticket
if one does not exist already, and append the PREPARE to
the log.&lt;/p&gt;

&lt;p&gt;The relevant condition is &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;. The ticket will scan
the messages added to the log for that ticket (again, the
same view number and the same sequence number). When it
hits a PRE-PREPARE, it will scan the log to check for
matching PREPARE messages whose digests also match. If
the scan hits the &lt;code class=&quot;highlighter-rouge&quot;&gt;2f&lt;/code&gt;th matching PREPARE message, then
the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; state becomes true and the replica responds
by multicasting a COMMIT message, adding the COMMIT to the
log.&lt;/p&gt;

&lt;p&gt;The replica will then attempt to check on the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt; states, executing the response to 
those states as necessary.&lt;/p&gt;

&lt;h4 id=&quot;recieving-commit&quot;&gt;Recieving COMMIT&lt;/h4&gt;

&lt;p&gt;When a replica receives a COMMIT, it will also check to
make sure that the view number is equal to the current view
number and the sequence number is within the water marks,
otherwise ignoring the message. It will create a new ticket
if one does not exist already, and append the COMMIT to
the log.&lt;/p&gt;

&lt;p&gt;The relevant condition here is &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt;. If we
know that the ticket has reached the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; phase, we
don’t need to rescan to make sure this is true. The ticket
then looks for matching COMMIT messages, and if it reaches
the &lt;code class=&quot;highlighter-rouge&quot;&gt;2f + 1&lt;/code&gt;th COMMIT, it will then execute the 
operation found from the REQUEST message. A REPLY message 
is sent back to the client with the result of the 
operation, and the ticket is then moved to the cache in 
case the same REQUEST is sent again. The client then stops
the timer for that REQUEST, if available.&lt;/p&gt;

&lt;p&gt;The replica will then attempt to check on the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt; states, executing the response to 
those states as necessary.&lt;/p&gt;

&lt;p&gt;If the sequence number is evenly divisible by some
configured number, then the replica will also multicast a
CHECKPOINT message and add it to its log.&lt;/p&gt;

&lt;h4 id=&quot;receiving-checkpoint&quot;&gt;Receiving CHECKPOINT&lt;/h4&gt;

&lt;p&gt;When a replica receives a CHECKPOINT, it will add it to its
log. If the log has &lt;code class=&quot;highlighter-rouge&quot;&gt;2f + 1&lt;/code&gt; CHECKPOINT messages from
itself and other replicas with the same sequence number as
the one that was received, it will then perform a garbage
collection by throwing away cached REPLY messages less than
or equal to the checkpoint, all CHECKPOINT messages below
that checkpoint, and will update the low water mark to the
checkpoint and the high water mark to the checkpoint plus
the configured checkpoint interval.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt; organizes CHECKPOINT messages by the sequence
number, but I &lt;em&gt;believe&lt;/em&gt; that it should be based on any 
CHECKPOINT with a sequence number greater than the given
checkpoint to make it stable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;what-about-view-changes&quot;&gt;What About View-changes?&lt;/h4&gt;

&lt;p&gt;Replicas will check the timers for all received REQUESTS in
a loop. If the timer expires, then the replica will skip 
all the other timers and become “disgruntled.” It will then
multicast a VIEW-CHANGE message to vote all replicas into
view &lt;code class=&quot;highlighter-rouge&quot;&gt;v + 1&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; represents the current view number.
The timeout will then double, and the timeout check loop 
continues. If it times out again, the VIEW-CHANGE will then
vote for &lt;code class=&quot;highlighter-rouge&quot;&gt;v + 2&lt;/code&gt; and the time doubles yet again, and so on.
A disgruntled replica only accepts 3 messages: CHECKPOINT,
VIEW-CHANGE, and NEW-VIEW. All other messages are ignored.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The PBFT algorithm specifies that the timeout shouldn’t 
double, but rather should increase by increments of the 
original timeout, so instead of 1T -&amp;gt; 2T -&amp;gt; 4T, the paper
specifies that it should be 1T -&amp;gt; 2T -&amp;gt; 3T if &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; 
represented the original timeout&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;receiving-view-change&quot;&gt;Receiving VIEW-CHANGE&lt;/h4&gt;

&lt;p&gt;When the “new primary” (the primary for view &lt;code class=&quot;highlighter-rouge&quot;&gt;v + 1&lt;/code&gt;)
receives a VIEW-CHANGE message, it will add it to its log.
If there are &lt;code class=&quot;highlighter-rouge&quot;&gt;2f&lt;/code&gt; VIEW-CHANGE messages in the log from
different replicas, then the new primary will then 
multicast a NEW-VIEW message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Technically, a multitude of items aren’t supposed to be 
included in the actual NEW-VIEW message, however, again,
for encoding simplicity, &lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt; requires that the
NEW-VIEW message includes the full checkpoint proofs as
well as full PRE-PREPARE messages. If a more orthodox
implementation is desired, users are encouraged to add
their own messages to retrieve missing REQUESTs and
CHECKPOINTs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the replica isn’t the “new primary,” it will also add
the message to its log, but if it has &lt;code class=&quot;highlighter-rouge&quot;&gt;f + 1&lt;/code&gt; VIEW-CHANGE
messages in its log already from different replicas, then
it will “bandwagon” and also multicast a VIEW-CHANGE for
the new view as well.&lt;/p&gt;

&lt;h4 id=&quot;receiving-new-view&quot;&gt;Receiving NEW-VIEW&lt;/h4&gt;

&lt;p&gt;When a replica receives a NEW-VIEW message is received by a
primary, it will perform a garbage collection by removing
the VIEW-CHANGE messages still in the log and clear all
pending requests from the previous view. If the lowest
proven checkpoint it receives is greater than the current
low water mark, then the checkpoint is upgraded, the proof
is inserted into the log, and a garbage collection is done
as if a checkpoint was proven by CHECKPOINT messages.&lt;/p&gt;

&lt;p&gt;The replica then looks through all of the PRE-PREPARE 
messages, multicasting a corresponding PREPARE message
for them once the digest is checked with one generated for
the request. If the operation is &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, then it is a no-op
and skipped. Both PRE-PREPARE and PREPARE messages are
added to the log.&lt;/p&gt;

&lt;p&gt;The replica is then no longer disgruntled, removes all
outstanding timeouts, and then enters the new view.&lt;/p&gt;

&lt;p&gt;The new primary that is multicasting the NEW-VIEW message
does all of the above, skipping the portion that handles
the PRE-PREPARE messages and instead adds those 
PRE-PREPARES to the log without sending a PREPARE.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Most of the details for how I interpreted the PBFT protocol
is laid out here. The finer details of how to structure all
the data structures needed to store the messages and
determine quorum sizes still remain, and my implementation
can be found on GitHub with the link found at the top of
the post. PBFT is sort of like a gateway algorithm, there
are implementations of it like I believe Hyperledger and
other blockchain style applications, but there are other
BFT algorithms as well.&lt;/p&gt;

&lt;p&gt;I was initially interested in (P)BFT reading up on, as my
recent post unsurprisingly suggests, about Space(X).
According to &lt;a href=&quot;https://lwn.net/Articles/540368/&quot;&gt;LWN.net&lt;/a&gt;,
replication is used for avionics control on the Dragon
capsules, and the Byzantine Generals’ Problem is used to
resolve disagreements between the flight computers, so it
is very cool to see how BFT is applied not only to Earth
applications, but also in space as well. My particular
implementation of BFT probably isn’t up-to-par with what
the SpaceX engineers implemented, however. It definitely
wouldn’t be launching anything mission critical.&lt;/p&gt;

&lt;p&gt;I’ll probably go back around to adding new posts in my
“Lessons Learned Debugging” series for another long stretch
until I figure out what other things to talk about.&lt;/p&gt;</content><author><name></name></author><summary type="html">Following up with my previous post about one of my prior projects, I have another post about yet another project that I’ve recently finished, pbft-java.</summary></entry><entry><title type="html">TLE - Tracking Satellites in Space</title><link href="https://agenttroll.github.io/blog/2019/06/22/tle-tracking-satellites-in-space.html" rel="alternate" type="text/html" title="TLE - Tracking Satellites in Space" /><published>2019-06-22T17:23:35-07:00</published><updated>2019-06-22T17:23:35-07:00</updated><id>https://agenttroll.github.io/blog/2019/06/22/tle-tracking-satellites-in-space</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/06/22/tle-tracking-satellites-in-space.html">&lt;p&gt;This is about my &lt;a href=&quot;https://github.com/AgentTroll/fate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fate&lt;/code&gt;&lt;/a&gt;
project, something I finished in August of last year. I’ve
been on a long journey with some other Java-related
projects more recently, but I’d simply like the chance to
go back to one of my most significant C projects I’ve ever
written. I think it would also be a good chance to revisit
what I learned in the process of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;fate&lt;/code&gt; as well,
because Tim Dodd of Everyday Astronaut posted a &lt;a href=&quot;https://youtu.be/kB-GKvdydho&quot;&gt;video
recently&lt;/a&gt; that had some
discussion about inclination and azimuth, and despite
wrangling with that for weeks to understand how it worked,
I still had to pause the video and think through what he
had said.&lt;/p&gt;

&lt;h1 id=&quot;high-level-overview&quot;&gt;High-level Overview&lt;/h1&gt;

&lt;p&gt;The project is actually very simple on the surface, if you
have the most recent TLE (more specifically 3LE) data, then
you can input that into the command line and every second,
some output will be printed to show you above what point
the satellite is as well as where to point a telescope or
your eyes to find the object in the sky.&lt;/p&gt;

&lt;h1 id=&quot;what-is-tle&quot;&gt;What is TLE?&lt;/h1&gt;

&lt;p&gt;TLE stands for two-line element set. You’ll actually notice
that I use 3LE, which stands for 3-line element set, and it
is &lt;em&gt;exactly&lt;/em&gt; the same, save for the fact that a 3LE set has
an additional line at the top that states the name of the
satellite. This is what a 3LE set looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 ISS (ZARYA)
1 25544U 98067A   19174.05036204  .00001525  00000-0  33398-4 0  9995
2 25544  51.6442 332.2030 0008185  74.7737  30.3832 15.51219884176168
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A TLE set would just be the same thing but with the line 
starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; removed. For the purposes of
making things easier to understand, I’ll primarily refer
to both 3LE and TLE as just TLE.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Two-line_element_set&quot;&gt;Wikipedia page&lt;/a&gt;
for TLE sets is actually surprisingly helpful and
informative. The main gist is that TLE is a way of
communicating the position and motion of a satellite
orbiting the Earth in as few numbers as possible. TLE sets 
are readily available from &lt;a href=&quot;https://www.space-track.org/#/tle&quot;&gt;SpaceTrack.org’s TLE search
page&lt;/a&gt;, and you can look
for satellites in the &lt;a href=&quot;https://www.space-track.org/#/catalog&quot;&gt;satellite catalog&lt;/a&gt;.
The U.S. Air Force 18th Space Control Squadron produces
the TLE data sets by using a variety of sensing techniques
and calculating the TLE set data for publication on the
SpaceTrack website.&lt;/p&gt;

&lt;p&gt;Here are some additional reading items you might find
helpful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.space-track.org/documentation#/faq&quot;&gt;FAQ page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.space-track.org/documentation#tle&quot;&gt;TLE format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.space-track.org/documentation#legend&quot;&gt;Terminology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;decoding-tle&quot;&gt;Decoding TLE&lt;/h1&gt;

&lt;p&gt;It’s all well and good that we have the data in TLE format,
but how can that data be translated into usable numbers
that show us where to point a telescope for example?&lt;/p&gt;

&lt;p&gt;The first step is to refer to 
&lt;a href=&quot;https://www.celestrak.com/NORAD/documentation/spacetrk.pdf&quot;&gt;SpaceTrack Report #3&lt;/a&gt;.
I’ll let the author(s) summarize:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The NORAD element sets [TLE sets] are “mean” values 
obtained by removing periodic variations in a particular
way. In order to obtain good predictions, these periodic
variations must be reconstructed (by the prediction model)
in exactly the same way they were removed by NORAD. Hence, 
inputting NORAD element sets into a different model (even 
though the model may be more accurate or even a numerical 
integrator) will result in degraded predictions. The NORAD 
element sets must be used with one of the models described 
in this report in order to retain maximum prediction 
accuracy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially, the report lays out the mathematical models
for reconstructing the orbit of a particular satellite
from the data given by the TLE data set. Now there are
5 different models that the report lays out, SGP, SGP4/8
and SDP4/8. These are collectively known as “simplified
perturbation models” and take into account atmospheric
drag, gravitational drag caused by the Earth’s oblate 
shape, the Earth’s spin, and various other factors in order
to predict the motion of the satellite over time.&lt;/p&gt;

&lt;p&gt;Since my primary goal was to figure out the position of
the International Space Station, I selected SGP4. As far as
I am aware, SGP4 and SDP4 are the most commonly used
models, this can be checked with the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEAN_ELEMENT_THEORY&lt;/code&gt;
entry for each satellite entry’s OMM data.&lt;/p&gt;

&lt;p&gt;Translating all of the formulae into working C code was
not super challenging. There is even working FORTRAN that
I referred to whenever I was having trouble figuring out
what the intent of a formula was. However, there are quite
a few variable values that are missing as well as this
part:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Solve Kepler’s equation for (E + ω)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and the changes made to the model with a perigee at
different distances, which really confused me. That being
said, combined with looking at the FORTRAN listings on
SpaceTrack Report #3 as well as with the LizardTail website
&lt;a href=&quot;https://www.lizard-tail.com/isana/tle/lib/sgp4.js&quot;&gt;source&lt;/a&gt;
and the 
&lt;a href=&quot;https://www.celestrak.com/publications/AIAA/2006-6753/AIAA-2006-6753.pdf&quot;&gt;Revisiting Spacetrack Report #3&lt;/a&gt;
code listings in the appendix, I was able to reconstruct
the entire mathematical model in C code with most of the
constants updated to the modern values. I don’t think it is
entirely perfect, but the numbers it produces look pretty
correct to me nonetheless.&lt;/p&gt;

&lt;p&gt;Now if you ask me, I’d say that the finer details of the
model itself aren’t actually that important. I can’t say 
for sure what the purpose of each and every calculation is.
Again, the model takes into account the many different
variables that affect the gravitational pull and drag
experienced by a satellite, but that is as far as the 
extent of my knowledge about the perturbation models goes.&lt;/p&gt;

&lt;p&gt;(Apologies to those readers who may have clicked on this to
get an understanding of how the perturbation models work,
that’s simply something I never even needed to know to
implement the model in code. If anyone does understand, I’d
love to learn)&lt;/p&gt;

&lt;h1 id=&quot;conversion-between-coordinate-systems&quot;&gt;Conversion Between Coordinate Systems&lt;/h1&gt;

&lt;p&gt;Now having implemented the SGP4 model, you might think that
we can now extract the data we need. Not so. The SGP4 model
produces 2 vectors, specifying the position and velocity
(meters per second) of the satellite. &lt;code class=&quot;highlighter-rouge&quot;&gt;fate&lt;/code&gt; actually 
provides an additional 2 vectors called “unit orientation 
vectors.” These are used  to derive the position and 
velocity vectors.&lt;/p&gt;

&lt;p&gt;The problem is that the reference frame for the
position vector uses the ECI coordinate grid, which means
that we get 3 values in X, Y, and Z. This doesn’t help me,
because all I want to know is latitude and longitude to the
ISS.&lt;/p&gt;

&lt;p&gt;I won’t go into specifics, but these three articles are
extremely informative and detailed, and even an idiot like
myself was able to understand what is being discussed. I
highly recommend reading the entirety of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.celestrak.com/columns/v02n01/&quot;&gt;Orbital Coordinate Systems, Part I&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.celestrak.com/columns/v02n02/&quot;&gt;Orbital Coordinate Systems, Part II&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.celestrak.com/columns/v02n03/&quot;&gt;Orbital Coordinate Systems, Part III&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As far as the high-level overview goes, it is worth taking
a look at what ECI really is. ECI stands for 
“Earth-centered inertial,” Earth-centered meaning that the
origin is at the center of the Earth and inertial meaning 
that it doesn’t move with the rotation of the Earth itself.&lt;/p&gt;

&lt;p&gt;Calculating the look angle in azimuth rotation from true
north and inclination angle from the horizon is relatively
complex because you need to turn yourr own latitude and 
longitude into ECI coordinates as well and utilize some 
trigonometry to determine the angle created between the 
coordinates. Not so hard, right? Unfortunately, the
complication comes from the fact that standard longitude
and latitude considers the Earth as an oblate spheroid, 
while ECI considers the Earth as a perfect sphere. Further,
the Earth also spins, which means that your position
changes as the Earth spins. In order to calculate 
everything, the current time is taken, and then converted 
to a single Julian date. This is then converted to 
Greenwich Mean Sidereal Time (GMST), which allows one to
calculate the current rotation of the Earth without the 
fluctuations in a solar day. Armed with this information,
we can then convert from the standard”geodetic” latitude 
and longitude into a “geocentric” latitude and longitude,
and from there, trigonometry is used to obtain the ECI 
coordinates of the observer.
&lt;a href=&quot;https://github.com/AgentTroll/fate/blob/70311dab1664ffa3278c4af0e3f8f96f859f9efc/eci.c#L12-L22&quot;&gt;The implementation&lt;/a&gt;
actually then looks deceptively simple.&lt;/p&gt;

&lt;p&gt;Calculating the position of the satellite above the Earth
(called the sub-point) is a bit more simple. Essentially, 
we need to reverse the process and convert ECI into 
geodetic coordinates, but since we already have the ECI
coordinates, only simple trig is needed once we’ve factored
in the GMST to figure out the longitude, because the fact
that the Earth is oblate only affects latitude. Longitude
runs parallel to the oblateness, so no modification is
necessary. To calculate geodetic latitude, we first 
calculate the geocentric latitude, which is rather 
straightforward trig. We then run a transformation which 
moves the angle closer and closer to geodetic latitude, 
until the diffence in improvement to the value becomes 
smaller than is worth calculating. This value is then close
enough to the geodetic latitude to accept.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This has only been a high-level overview of the
calculations needed to convert the available data into a
usable format, and then converting that format into
something that is understandable, like geodetic latitude
and longitude, and the look angles. I myself don’t even
know all of the specifics. Working on this project was a
fascinating insight into the work done by astrophysicists
and mission planners to determine how to get satellites and
rockets into the correct orbits, and not only that, but to
track them and create models for the orbital mechanics that
affect the motion of the satellites through space.&lt;/p&gt;

&lt;p&gt;Not only do I not usually talk about the C language, but I
didn’t really go into any specifics of it in this 
particular blog post. That being said, I did talk a little
bit about astronomy and space, which are both topics that
I’m very curious to learn more about. I’m sure that every
one of us watched a rocket launch, watched Neil Armstrong
take humanity’s first steps on another planet, or simply
read the news about the Opportunity rover. I’m absolutely
certain that others have been inspired by spaceflight and 
can relate to wanting to advance space exploration in the
future, if not the present.&lt;/p&gt;

&lt;p&gt;I, for one, certainly would like to.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is about my fate project, something I finished in August of last year. I’ve been on a long journey with some other Java-related projects more recently, but I’d simply like the chance to go back to one of my most significant C projects I’ve ever written. I think it would also be a good chance to revisit what I learned in the process of writing fate as well, because Tim Dodd of Everyday Astronaut posted a video recently that had some discussion about inclination and azimuth, and despite wrangling with that for weeks to understand how it worked, I still had to pause the video and think through what he had said.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 4</title><link href="https://agenttroll.github.io/blog/2019/06/17/lessons-learned-debugging-part-4.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 4" /><published>2019-06-17T23:26:40-07:00</published><updated>2019-06-17T23:26:40-07:00</updated><id>https://agenttroll.github.io/blog/2019/06/17/lessons-learned-debugging-part-4</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/06/17/lessons-learned-debugging-part-4.html">&lt;p&gt;I’m bored, let’s write another blog post, see if I can
turn my boredom into something helpful for other
people.&lt;/p&gt;

&lt;h1 id=&quot;avoid-using-hardcoded-strings&quot;&gt;Avoid Using Hardcoded Strings&lt;/h1&gt;

&lt;p&gt;While this may be controversial, it is my opinion that
production-quality code should never have magic String
values, or you should at least never use quotes if you are
not assigning a constant.&lt;/p&gt;

&lt;p&gt;A magic String is a raw &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;string value&quot;&lt;/code&gt; that you pass
directly to a a method for example. They are called “magic”
because the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;string value&quot;&lt;/code&gt; magically makes the code work.
It may not be entirely clear what the purpose of the String 
is, or why the String has the value that it does when you
are doing code review.&lt;/p&gt;

&lt;p&gt;Firstly, production-quality code should essentially have no
errors due to a misspelled String constant. String 
constants, especially ones that are long or used multiple
times are commonly misspelled. If you extract magic Strings
into a constant, you can reuse the constant multiple times
so long as you ensure that the original assigned constant
is spelled correctly. Pulling Strings into a constant
forces you to slow down and focus on the task of writing
the constant itself, which reduces the chance of making
spelling mistakes. It is incredibly disappointing when the
project has a few spelling errors here and there that make
the development cycle that much longer to fix for a rather
trivial issue that can be entirely avoided.&lt;/p&gt;

&lt;p&gt;Secondly, always using &lt;code class=&quot;highlighter-rouge&quot;&gt;static final&lt;/code&gt; constants forces you
to place them at the top of the file, which means that it
is easier for you to look over each String and review the
spelling, capitalization, etc. You can go over all your
Strings at once if you have them in a single class holding
all constants, so code review is extremely easy.&lt;/p&gt;

&lt;p&gt;Finally, using constants allows you to make your code 
easier to understand and extensible. By having named 
constants take the place of magic Strings, the constant
name can be used to document the purpose of the code. For
example, examine the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reply&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What do you think the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;reply&quot;&lt;/code&gt; String does? Now examine
the code when the magic String value is replaced with a
constant:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REPLY_FORMAT_CFG_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;reply&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REPLY_FORMAT_CFG_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now when you read over the code, you understand that the
String is actually a configuration key that specifies the
format for a reply message. Constant names give context and
help programmers avoid mistakes by identifying the purpose
of the value, which will help avoid copy-paste errors. If
you wanted to change the String in the future, you will be 
able to easily find the constant and change all the uses of
that particular constant as well.&lt;/p&gt;

&lt;p&gt;As always, rules do have exceptions, and there are places
where a constant name is probably extra work. I myself
don’t even use constants that often for Strings, even 
though I should definitely do it more. For example, when
I am writing a configuration file wrapper, I will probably
forgo with the constants, since configuration keys are
pretty unique, their usage is pretty clear, I know myself
and my peers probably can tell the intent of the String,
and I’m only using it once, in the wrapper file itself.
That being said, I do make copy-paste mistakes as well as
mispell the config key names sometimes, both issues that
I could avoid by always using constants instead of using a
magic String value.&lt;/p&gt;

&lt;p&gt;In short, it may seem like extra work, but having a policy
to reduce the usage of magic Strings, and as a matter of
fact, magic values in general (numbers are even more 
difficult to guess the purpose of), will reduce the chance
of making mistakes in this area as well. You get out what
you put in, in a way.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I usually put a few ending thoughts here, but there’s not
really much to end on today.&lt;/p&gt;

&lt;p&gt;As is customary, I leave with the following wisdom from 
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve been doing a little but of Bukkit stuff, a little bit
of Java-general stuff here and there, I might do a 
C-related post later on. I’ve never really talked about my
interest in astronomy so a little bit about how my
&lt;a href=&quot;https://github.com/AgentTroll/fate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fate&lt;/code&gt;&lt;/a&gt; works would be
a good start.&lt;/p&gt;

&lt;p&gt;I’ve also recently finished my 
&lt;a href=&quot;https://github.com/AgentTroll/pbft-java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;&lt;/a&gt;
project as well, and I’m eager to talk about the different
decisions I made over the course of the project.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m bored, let’s write another blog post, see if I can turn my boredom into something helpful for other people.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 3</title><link href="https://agenttroll.github.io/blog/2019/06/03/lessons-learned-debugging-part-3.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 3" /><published>2019-06-03T18:48:55-07:00</published><updated>2019-06-03T18:48:55-07:00</updated><id>https://agenttroll.github.io/blog/2019/06/03/lessons-learned-debugging-part-3</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/06/03/lessons-learned-debugging-part-3.html">&lt;p&gt;Been another while since I’ve last written something, so
here goes for another post in the series.&lt;/p&gt;

&lt;h1 id=&quot;keep-method-line-counts-to-30-lines-or-less&quot;&gt;Keep method line counts to 30 lines or less&lt;/h1&gt;

&lt;p&gt;As a general rule of thumb, your methods should probably
never, ever exceed 30 SLOC. As a matter of fact, this is
one of the rules from the “The Power of Ten” article I’ve
been referencing at the end of every post in this series:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rule: No function should be longer than what can be 
printed on a single sheet of paper in a standard reference 
format with one line per statement and one line per
declaration. Typically, this means no more than about 60 
lines of code per function.&lt;/p&gt;

  &lt;p&gt;Rationale: Each function should be a logical unit in the 
code that is understandable and verifiable as a unit. It is 
much harder to understand a logical unit that spans 
multiple screens on a computer display or multiple pages 
when printed. Excessively long functions are often a sign 
of poorly structured code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While this rule does say that you can use a maximum of 60
lines per method, I myself recommend using 30 lines. “The
Power of Ten” primarily refers to C code, which usually
more verbose than Java is since it requires more 
low-level instructions to do the same thing that the Java
library might provide in a single line. The fact that 
engineers at NASA can launch satellites into space and 
control robots on another planet from right here on Earth
means that you probably can accomplish whatever end-goal
you have in mind without writing any methods exceeding 30
lines of code.&lt;/p&gt;

&lt;h1 id=&quot;rationale-points&quot;&gt;Rationale Points&lt;/h1&gt;

&lt;p&gt;Not all of the points in the rationale make much sense for
us Java developers, however, there same principles still
apply.&lt;/p&gt;

&lt;h4 id=&quot;it-helps-reduce-clutter&quot;&gt;It Helps Reduce Clutter&lt;/h4&gt;

&lt;p&gt;One of the reasons you should do this piggybacks off of the
Part 1 post - keeping your methods below a certain number
of lines helps reduce mental clutter. You can only see a
limited amount of logic before you’ll need to scroll, which
means that you will hide some of the context outside of the
viewport. By keeping the number of SLOC in a method to a 
minimum, you will have a much easier time reviewing your
code as you go along because you know that it is doing one
specific thing. You will boost your productivity because
you aren’t bogged down with which variables you have
initialized and what other logic you need to implement, you
instead focus on the one purpose the method has.&lt;/p&gt;

&lt;h4 id=&quot;keeping-your-methods-short-is-good-design&quot;&gt;Keeping Your Methods Short Is Good Design&lt;/h4&gt;

&lt;p&gt;The second reason is because it is simply good design.
Methods should do exactly one thing and one thing only.
Joshua Bloch (author of &lt;em&gt;Effective Java&lt;/em&gt;, former Google 
Software engineer, current professor at CMU) says that
API designers (which applies here as well) should adhere
to the “Principle of Least Astonishment” 
(&lt;a href=&quot;https://youtu.be/heh4OeB9A-c?t=2910&quot;&gt;How To Design A Good API and Why it Matters&lt;/a&gt;).
This means that when you read the method name, you should
never be surprised by what the method is going to do, i.e.
the method should perform exactly the function it was
designed to do and nothing more. Too often, I will see
novice developers write methods with a generic name that
is doing too much, especially listener methods which are
like super-methods with the utter amount of logic that
needs to be performed for a method that is named something
entirely generic such that you cannot actually &lt;em&gt;tell&lt;/em&gt; what
is going on.&lt;/p&gt;

&lt;h4 id=&quot;splitting-up-your-methods-encourages-documentation&quot;&gt;Splitting Up Your Methods Encourages Documentation&lt;/h4&gt;

&lt;p&gt;Finally, the third reason is that method names can be used
as documentation. If you’re doing a little bit of work that
needs to be explained, you can extract that portion of code
to a method with a descriptive name rather than adding a
comment. For example, I myself am guilty of violating this
lesson a few odd times, one of them involving the code
needed to parse an item lore. The code looks a little bit
like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemMeta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enchantment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ench&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enchantments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enchName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ench&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enchName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sublist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While this snippet looks succinct in its current form,
this portion of code is embedded within dozens of lines of
code above and below. In Java, method calls are essentially
free (or at least so insignificant that if you aren’t an
engineer working at Oracle it isn’t worth optimizing), and
you don’t even need to use a method more than once to have
a method. It costs next to nothing to add another method to
improve readability, reduce clutter, and to document the
code. The improved code would look something like so:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemMeta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseAndTrimLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseAndTrimLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enchantment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ench&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enchantments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enchName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ench&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enchName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sublist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, while reading through &lt;code class=&quot;highlighter-rouge&quot;&gt;#parseLore(ItemMeta)&lt;/code&gt;, you
immediately know what 9 odd lines of code are doing without
having to read over it. As an added bonus, you can focus on 
getting the high-level logic of the &lt;code class=&quot;highlighter-rouge&quot;&gt;#parseLore(ItemMeta)&lt;/code&gt; 
method down right, before moving on to debugging 
lower-level methods such as &lt;code class=&quot;highlighter-rouge&quot;&gt;#parseAndTrimLore()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While this isn’t to say that comments are always bad or
they are always a code smell, but a certain &lt;a href=&quot;https://blog.codinghorror.com/coding-without-comments/&quot;&gt;programming
mantra&lt;/a&gt; 
reasons that commenting is a poor practice because it acts
as a crutch or as an excuse for writing code that isn’t
understandable. If you focus on writing your code so that
it is easily understandable, you will reduce the amount of
bugs in your code because you are forced to slow down and
think through all the moving parts of your code. It will be
easier for yourself as well as other developers to do code
review, because your code is declarative and the intentions
of the developer are more clear. As the article author puts
it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if your feel your code is too complex to understand 
without comments, your code is probably just bad&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;in-practice&quot;&gt;In Practice&lt;/h1&gt;

&lt;p&gt;It is important to note that as is with many rules, there
are exceptions to the rule, both the 30 SLOC limit as well
as getting rid of all your comments. I personally comment
my code all the time, but if I’m breaking 30 SLOC, I better
have a damn good reason for doing so. Otherwise, it is a
good idea to split a super-method into smaller methods.
In the future, if I ever refactor my code or if I need to
modify my super-method to not do something, I can just use
the existing sub-methods, or remove a call to a sub-method
respectively without modifying existing code. This helps
improve extensibility and productivity in the long run,
even if it takes a bit longer now to extract portions
of your code into a different method.&lt;/p&gt;

&lt;p&gt;Many IDEs will probably have a linter, or if you aren’t
running checkstyle or something, you can use SonarQube or
something of the like attached to your CI pipeline to do
checks on the SLOC of your methods. IntelliJ IDEA’s linter
settings for method length is this particular entry here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/lld-idea-settings.png&quot; alt=&quot;IDEA Settings Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s usually helpful to include along with it lambda length
as well, probably 15-20 lines for lambdas is a little too
much (at that point, pull the lambda entire lambda into a
method, or split the lambda logic into methods).&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is very similar to the 
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/03/20/lessons-learned-debugging-part-1.html&quot;&gt;Part 1&lt;/a&gt;
reasoning in terms of keeping your code short and
organized. The effect of making changing your programming
practices is enormous, and in time, you will start to spend
less time debugging your code. Remember that the majority
of development time is debugging, not actually writing 
anything. If you are saving debugging time and instead
writing your code a little more slowly, but getting it 
right the first time, you are saving a significant amount
of time and costs down the road.&lt;/p&gt;

&lt;p&gt;As is customary, I leave with the following wisdom from 
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While these tips are not necessarily rules that are
responsible for keeping people alive, incorporating the
same philosophy into your programming repertoire will help
you in the long run.&lt;/p&gt;</content><author><name></name></author><summary type="html">Been another while since I’ve last written something, so here goes for another post in the series.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 2</title><link href="https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 2" /><published>2019-04-08T22:03:10-07:00</published><updated>2019-04-08T22:03:10-07:00</updated><id>https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html">&lt;p&gt;One of the recurring problems that will cause you headaches
is the throwing of exceptions where you &lt;em&gt;don’t want them to
be thrown&lt;/em&gt;. Among these exceptions, one of the most elusive
is &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-concurrentmodificationexception&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;?&lt;/h1&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;, or a CME, as I will
refer to it from here on out, is caused by a change, or a
modification, to a collection while iterating over it.
The most common example of this happening is through
something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reason you cannot do this is because it will cause the
Iterator to lose track of where it is. For example, in a
collection with 10 elements, if you remove the 3rd item and
the iterator is on the 4th element, what is the iterator
supposed to do? Is it supposed to now be on the 5th element
because everything shifts down? Are you supposed to stay on
the same 4th element and shift with the removal of the
item? It’s easier just to avoid the consistency issues and
throw an exception instead. We will get into how to get
around this later.&lt;/p&gt;

&lt;p&gt;A for-each loop is simply syntax sugar over an &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator&lt;/code&gt;.
In an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;, the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator#next()&lt;/code&gt; checks to
ensure that &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; has not changed, where &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; is
an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; that changes whenever the &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; has a
modification (such as through the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;#add(...)&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;#remove(...)&lt;/code&gt;). From the &lt;a href=&quot;https://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/util/ArrayList.java#l884&quot;&gt;ArrayList source&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkForComodification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedModCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConcurrentModificationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expectedModCount&lt;/code&gt; is the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; when the
iterator is constructed, or when the for-loop begins. A CME
is so serious of an exception because often, one can get
away without throwing the exception during testing. If a
collection contains only one element, the &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; will
change after &lt;code class=&quot;highlighter-rouge&quot;&gt;Itr#checkForComodification()&lt;/code&gt; has been
called, and no CME will be thrown. This is an issue because
one might populate a collection with only a single element
for the purposes of testing. It may be only one player,
because you are the only one testing the plugin, or it may
be only one object that you are storing to make sure that
something works. This is something that tends to slip into
production because it appears to work during testing.&lt;/p&gt;

&lt;p&gt;As a reminder, this can happen with any collection except
those that are thread-safe, so a &lt;code class=&quot;highlighter-rouge&quot;&gt;HashSet&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedList&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; are all succeptible to throwing a CME if you
iterate and modify at the same time.&lt;/p&gt;

&lt;h1 id=&quot;be-wary-of-iteration-and-unforeseen-side-effects&quot;&gt;Be Wary of Iteration and Unforeseen Side-Effects&lt;/h1&gt;

&lt;p&gt;One way to avoid making mistakes is to reuse paradigms that
are well understood, and that is known to already work. On
the opposite end, it is also imperative to recognize
certain paradigms that have a tendency to fail. Iteration
through Collections is one of those paradigms that you
should be on the lookout for. The simplicity of loops and
the monotony of perhaps writing them hundreds if not
thousands of times over can lower one’s guard against them.&lt;/p&gt;

&lt;p&gt;The trick is to proceed with caution when writing loops.
Ensure that you are truly only reading from them, and never
modifying the collection in the process.&lt;/p&gt;

&lt;p&gt;There are a few important exceptions to this where you are
completely safe from CME:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You are using an indexed loop. If you remove
something, you are in control of the loop index, so
it’s up to you to correct for the index of any item
shifting (if you are not using an indexed removal,
that is).&lt;/li&gt;
  &lt;li&gt;You are using a thread-safe collection. Iterators
provided by those classes are only weakly-consistent,
and it can potentially take time for modifications to
show up. If you are simply throwing away elements,
there’s really nothing to worry about.&lt;/li&gt;
  &lt;li&gt;If you are using a safe method of modifying the
collection such as through &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator#remove()&lt;/code&gt; or
using &lt;code class=&quot;highlighter-rouge&quot;&gt;#removeIf(...)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will also need to be cautious of side-effects of
methods called in the loop. For example, the following
snippet of code will throw a CME:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getViewers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closeInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upon initial inspection, it looks completely safe, it
doesn’t appear to be modifying the collection returned by
&lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory#getViewers()&lt;/code&gt;. However, this is another reason
why CMEs are so insidious. &lt;code class=&quot;highlighter-rouge&quot;&gt;HumanEntity#closeInventory()&lt;/code&gt;
interally removes the viewer from the &lt;code class=&quot;highlighter-rouge&quot;&gt;#getViewers()&lt;/code&gt;
collection, and so by closing the inventory, it will modify
the collection while you are still in a loop. This is only
one example from the Bukkit API, but I’m sure there are
more, I’ve just never personally had to deal with them.&lt;/p&gt;

&lt;p&gt;In this case, where you are not able to change the
&lt;code class=&quot;highlighter-rouge&quot;&gt;#closeInventory()&lt;/code&gt; method because it is written in the
API, you would make a copy of that collection and then
iterate over it:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getViewers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closeInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works because the new collection is a different
&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; and therefore uses a different iterator than
the actual collection of viewers. We can remove items from
the actual collection without affecting the elements in the
copy, and therefore no CME is thrown.&lt;/p&gt;

&lt;p&gt;It is tempting to use a workaround to creating an entirely
new deep copy of the collection, such as by using
&lt;code class=&quot;highlighter-rouge&quot;&gt;Collections#unmodifiableCollection(...)&lt;/code&gt;, or even by using
Google Guava’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterables.concat(...)&lt;/code&gt; to “hack” in a new
iterator. However, the problem is that both of these are
non-solutions because they &lt;em&gt;still depend on the underlying
iterator&lt;/em&gt;. You MUST create a new collection in order for
this to work.&lt;/p&gt;

&lt;h1 id=&quot;other-solutions&quot;&gt;Other Solutions&lt;/h1&gt;

&lt;p&gt;Instances such as the Inventory example don’t come up too
often, and sometimes you just need to run some unrelated
code to process the removed elements, or even just remove
a few elements from a loop outright.&lt;/p&gt;

&lt;p&gt;Nowadays, the most effective solution would be to use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;#removeIf(...)&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can even use this to process the elements that should
be removed if you so wish:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For those of us stuck on Java 7, or for reasons I might not
have forseen, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator#remove()&lt;/code&gt; in order to
do the same thing:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will also allow you to only partially iterate by using
&lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; if you so desire. A shortened form that scopes the
iterator for only a single loop will look like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of these code snippets will have the same effect of
removing &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;s starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;remove-me&lt;/code&gt;, so choose
whatever one you see fit. Once again, these will not work
if methods you are calling have the side effect of removing
the element from the collection anyways, such as 
demonstrated in the previous section, so you will be stuck
with having to deep-copy the entire collection for that.&lt;/p&gt;

&lt;p&gt;(I’m not sure why the API designers decided not to produce
a copy of the collection there. In the modern age of
Java 8, I would have personally returned a &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;, but
that luxury didn’t exist when &lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory&lt;/code&gt; was designed.
In fact, there should be no reason really why the returned
collection is mutable, at the very least, it needs to be
unmodifiable because other cleanup procedures need to be
run for someone to actually stop “viewing” an inventory.
Perhaps this could be a PR or something to return a
deep-copy as a defensive programming measure)&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There are solutions to CME, but it is up to the programmer
to actually be vigilant, and to never let their guard down
in spite of the appearance of simplicity of a loop. You
must train yourself to recognize and check yourself when
you are writing loops, because a CME might also slip past
during testing as I’ve discussed before. This paradigm is
the second lesson in this series of posts.&lt;/p&gt;

&lt;p&gt;I leave with the following wisdom from &lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While these tips are not necessarily rules that are
responsible for keeping people alive, incorporating the
same philosophy into your programming repertoire will help
you in the long run.&lt;/p&gt;</content><author><name></name></author><summary type="html">One of the recurring problems that will cause you headaches is the throwing of exceptions where you don’t want them to be thrown. Among these exceptions, one of the most elusive is ConcurrentModificationException.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 1</title><link href="https://agenttroll.github.io/blog/2019/03/20/lessons-learned-debugging-part-1.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 1" /><published>2019-03-20T22:27:00-07:00</published><updated>2019-03-20T22:27:00-07:00</updated><id>https://agenttroll.github.io/blog/2019/03/20/lessons-learned-debugging-part-1</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/03/20/lessons-learned-debugging-part-1.html">&lt;p&gt;This is going to be among the first in a blog series that
detail some of my work while at Intermissum to reduce
bugginess. Not only did I personally run into many
hardships in order to write better production-quality
plugins, this series will present me with new challenges in
the form of figuring out what to share, what not to share,
as well as what I am not &lt;em&gt;allowed&lt;/em&gt; to share.&lt;/p&gt;

&lt;h1 id=&quot;splitting-up-your-code&quot;&gt;Splitting Up Your Code&lt;/h1&gt;

&lt;p&gt;The first lesson, while it may seem obvious to some, is to
always split up your code. What I used to do was place a
large majority of my code in the main class, reasoning that
the more I can keep in the main class, the less classes and
therefore the less complexity I will have to deal with.
There are often &lt;a href=&quot;https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition&quot;&gt;memes&lt;/a&gt; 
that stigmatize complexity or “enterprise” design in a 
negative light. While monolithic codebases such as the
Spring framework with sprawling abstractions for each and
every possible purpose might add credit to this stigma,
using abstractions and creating purpose-built classes can
improve your code quality and productivity vastly.&lt;/p&gt;

&lt;p&gt;Some of the many advantages to splitting up your code
include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Less mental overhead to keep track of where specific
  code segments are in your file&lt;/li&gt;
  &lt;li&gt;It is easier to navigate classes that have a purpose
  rather than through a file that has many purposes&lt;/li&gt;
  &lt;li&gt;It will be easier to browse and evaluate what the
  plugin is doing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these will contribute to less buggy code, because
you will be less mentally fatigued by housekeeping while
you are writing the code, as well as being able to more
quickly debug and walk through the call trace in a logical
fashion. Splitting up my code in a sensible way was far and
away one of the most effective steps I took in reducing the
bugginess of my code.&lt;/p&gt;

&lt;h1 id=&quot;drawbacks&quot;&gt;Drawbacks?&lt;/h1&gt;

&lt;p&gt;You will feel like you are less productive initially if you
are not used to the workflow. You are going to feel like
creating new files is such a pain, how you need to set
everything up, how writing more pragmatic and clean code
takes up so much space and isn’t as elegant as what you
would have figured out when writing code that fits into a
single class.&lt;/p&gt;

&lt;p&gt;You will feel like you’re creating classes all the time and
not writing enough code. You will feel like there’s so much
boilerplate, and the gains you are making are marginal.
But I implore you to trust me on this one. You are clearing
out mental clutter. You are making less mistakes, because
you are taking time to really understand the code and how
it all fits into the big picture. You are slowing down when
you write code, so you have less bugs down the line to have
to fix. I cannot stress enough that this is something that
has been tried and tested dozens upon dozens of times, and
that I myself have found success in being more watchful
over my tendency to write spaghetti code.&lt;/p&gt;

&lt;p&gt;You will thank yourself in the future, when you have to
look back over your code, because it is so much easier to
understand. You will see that you have gotten better at
recognizing the responsibility of each component of your
code. You will become a better engineer, because you will
have gotten closer to &lt;em&gt;designing&lt;/em&gt; your code rather than
simply &lt;em&gt;writing&lt;/em&gt; your code. These are skills that you build
up by changing poor programming practices, so it pays to
really evaluate yourself now.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There you go, that’s tip #1 done. These are meant to be
simple, short, and practical. If you’ve been disappointed,
then hopefully the next one will offer some insight you
yourself have missed.&lt;/p&gt;

&lt;p&gt;I leave with the following wisdom from &lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While these tips are not necessarily rules that are
responsible for keeping people alive, incorporating the
same philosophy into your programming repertoire will help
you in the long run.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is going to be among the first in a blog series that detail some of my work while at Intermissum to reduce bugginess. Not only did I personally run into many hardships in order to write better production-quality plugins, this series will present me with new challenges in the form of figuring out what to share, what not to share, as well as what I am not allowed to share.</summary></entry><entry><title type="html">My Biggest Mistake</title><link href="https://agenttroll.github.io/blog/2019/03/20/my-biggest-mistake.html" rel="alternate" type="text/html" title="My Biggest Mistake" /><published>2019-03-20T22:24:50-07:00</published><updated>2019-03-20T22:24:50-07:00</updated><id>https://agenttroll.github.io/blog/2019/03/20/my-biggest-mistake</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/03/20/my-biggest-mistake.html">&lt;p&gt;Quick note, this is NOT clickbait.&lt;/p&gt;

&lt;p&gt;I’ve been around the Bukkit server-modding community for a
while now. Not as long as some people, of course, but still
a pretty long time nevertheless.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/feb-28-2013.png&quot; alt=&quot;Bukkit Forums Member Since Feb 28, 2013&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the 6 years I’ve spent posting thousands of times on
both the Bukkit Forums and the Spigot forums, I look back
and regret one singular thing about myself: being a
self-entitled brat.&lt;/p&gt;

&lt;h1 id=&quot;aggressive-at-best-malicious-at-worst&quot;&gt;Aggressive At Best, Malicious At Worst&lt;/h1&gt;

&lt;p&gt;I would say that a large majority of the posts I’ve made
involved commenting on someone else’s code. In many, or
even most of the threads I’ve posted on, I’ve found that
my responses tend to assume the worst of intentions.
Here’s just &lt;a href=&quot;https://bukkit.org/threads/exonrunnable-a-new-runnable.390040/#post-3251252&quot;&gt;one example&lt;/a&gt; from late 2015:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-1.png&quot; alt=&quot;Mistake Exhibit 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While I admit that even now I thought that the post to
which I was responding sounded pretentious, that does not
justify an equally aggressive response in return. For a
developer who is not experienced in writing multithreaded
code (the type of developer that tends to be commonly
found more often than not), it is understandable that they
do not understand the performance implications of Timer
as someone like myself (which isn’t to say that I am an
expert myself, mind you). In no way was it necessary for me
to interject with “Oh.”  and “Oh wow!” and even saying
“BIG performance penalty.” Not only did this kind of
response bring me down to the level of the aforementioned
user, it detracted away from the informative aspect of my
post. It made me sound childish and juvenile, when the
value of the advice I gave should have been given greater
emphasis instead of the presentation of my opinion.&lt;/p&gt;

&lt;p&gt;Here’s a continuation of the same post:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-2.png&quot; alt=&quot;Mistake Exhibit 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, for a novice user, it makes sense that they are
making paradigm mistakes, that is simply the nature of
learning programming. The fact that I latched on to their
“stupidity” by saying “Just… What is this? You could quite literally […]”
rather than simply correcting their error indicates that
my criticism was not constructive by intention. It shows
that I was more concerned with commenting on the developer
rather than the code. It wasn’t necessary for me to
add interjections such as “What is this?” and then
leading myself into an example that would probably take up
5 lines rather than the 2 lines that I claimed, assuming
that the same brace style was used as the author (K&amp;amp;R? No
clue honestly what you’re supposed to call it lol).&lt;/p&gt;

&lt;p&gt;While the rest of the post is pretty flawed, here’s a
golden nugget:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-3.png&quot; alt=&quot;Mistake Exhibit 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Goodness, the “WRONG WRONG WRONG WRONG WRONG WRONG WRONG”
was not necessary at all. No information of use was
communicated and it shows again that I was interested less
in the information in the first place, and that I was more
interested in deriding the “stupidity” of the author, when
again, these are rookie mistakes. It is completely
understandable to not be &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;izing your fields and
classes as a novice programmer. The fact that the author
failed to do this indicated a lack of experience rather than
ignorance or stupidity as I have portrayed him/her to be.&lt;/p&gt;

&lt;p&gt;Lots of unnecessary information was written that would have
gone over the author’s head at the end, not sure what
exactly my intentions were there. I could honestly have
just said “here’s a benchmark” and then posted results
(which, as a matter of fact, I had failed to do) and then 
explained the results rather than making further pretentious
and unhelpful comments.&lt;/p&gt;

&lt;h1 id=&quot;and-another&quot;&gt;And Another&lt;/h1&gt;

&lt;p&gt;The examples of this same pretentious, bratty attitude
continues even farther into the past.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bukkit.org/threads/moving-packetplayoutparticles-with-entities.373750/#post-3172379&quot;&gt;Here’s another&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-4.png&quot; alt=&quot;Mistake Exhibit 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, I’m at it again with the long string of repeated
words with the “NONONONONONONONONONONONONONONONOOONONONONONONONONONONONONO.”&lt;/p&gt;

&lt;p&gt;Once again, adding interjections like this is for yet
another novice mistake is completely unnecessary. Needing
to even consider using this to emphasize a point probably
indicates a lack of imagination on my part. An argument
should ideally stand on its own without needing to have
unnecessary “fluff” such as the long string of “NONONO”
in order to draw attention to it. The fact that I did not
consider this in the writing of my post again goes to
show my lack of consideration of the author’s point of
view.&lt;/p&gt;

&lt;h1 id=&quot;the-finale&quot;&gt;The Finale&lt;/h1&gt;

&lt;p&gt;The many thousands of posts I’ve made number too many to
all have their place in this blog post, so I’ve selected
one of my most popular posts, the &lt;a href=&quot;https://bukkit.org/threads/make-a-minigame-plugin.168164/&quot;&gt;minigame tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-5.png&quot; alt=&quot;Mistake Exhibit 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is honestly a completely unnecessary comment. The
fact is that this is not even a prime candidate for async
code, so I see no reason for someone to even be considering
using this in an async context. The targeted audience,
intermediate level developers, probably aren’t even well
versed in the use of the scheduler anyways (although if
you are an intermediate developer and are skilled in the
use of the Bukkit scheduler, good on you). I think this was
a feeable attempt to assert my own mastery over threading
or something, but doing so made me look insecure and again
detracts from the main point of the post, which should
have been to educate intermediate-level developers on how
to take advantage of OOP in order to create a simple
minigame. It is ironic that I had to include that comment
in there when the post itself contained a number of bugs
pointed out by several users, such as &lt;a href=&quot;https://bukkit.org/threads/make-a-minigame-plugin.168164/#post-1814525&quot;&gt;here&lt;/a&gt;,
&lt;a href=&quot;https://bukkit.org/threads/make-a-minigame-plugin.168164/page-2#post-1822616&quot;&gt;here&lt;/a&gt;,
and &lt;a href=&quot;https://bukkit.org/threads/make-a-minigame-plugin.168164/page-2#post-1822730&quot;&gt;here&lt;/a&gt;.
When I myself am having trouble even writing code that
compiles, others have written their thanks and support,
even after pointing out egregious errors that I have made.
When I posted comments that attack users and had aggressive
undertones, others who might not even be as skilled
developers as I was wrote insightful and friendly comments
instead.&lt;/p&gt;

&lt;p&gt;I even had the gall to include this comment prior to
pasting the post source:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/mistake-exhibit-6.png&quot; alt=&quot;Mistake Exhibit 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the code fails to compile, and the post itself doesn’t
even look that good, I told others to source my post for
its &lt;em&gt;formatting&lt;/em&gt;. I thought so highly of myself, so highly
of the quality of work that I posted, that I even wanted
people to credit me for such a trivial aspect of it, an
aspect that looked terrible anyways.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;The many examples that I’ve posted paint me as a person
lacking self-awareness, brash, aggressive, and an
all-around first-class prick. While I’m not a completely
changed person yet, recognizing my toxicity has been
something of a revelation for me, and I continue to work
on actively trying to suppress my propensity for
passive-aggressiveness. These examples fail to do justice
for the amount of appalling comments that I’ve made, most
notably against the Sponge project, comments that I’ve not
yet had the opportunity to apologize for.&lt;/p&gt;

&lt;h1 id=&quot;closing-words&quot;&gt;Closing Words&lt;/h1&gt;

&lt;p&gt;One of the things that I’ve noticed was the fact that many
of my most malicious comments were well-received by people,
garnering several likes, such as in the case of the first
example. While again, the information was laid out
somewhere within the post itself, the lack of comment on
the fact that I was basically bullying the author of the
resource is something that I now find highly discomforting.&lt;/p&gt;

&lt;p&gt;The people who have been influenced by my comments have
already been affected, and there’s really nothing I can do
about it. I believe that by removing or editing out the
comments I’ve made, I will have destroyed and hidden 
something that actually happened, and thus those posts will
remain untouched. And while I cannot change what has
already been said, I can help prevent people from making
the same mistake as I did, the mistake of being a complete
self-entitled brat. Again, this is an issue that I continue
to deal with writing comments on the Spigot forums, and
even carefully thinking about my words will not prevent
everything from slipping through. But by sharing my
experience, I hope I can continue to improve.&lt;/p&gt;</content><author><name></name></author><summary type="html">Quick note, this is NOT clickbait.</summary></entry><entry><title type="html">Intro to Control Theory</title><link href="https://agenttroll.github.io/blog/2019/01/16/intro-to-control-theory.html" rel="alternate" type="text/html" title="Intro to Control Theory" /><published>2019-01-16T21:16:20-08:00</published><updated>2019-01-16T21:16:20-08:00</updated><id>https://agenttroll.github.io/blog/2019/01/16/intro-to-control-theory</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/01/16/intro-to-control-theory.html">&lt;p&gt;While I don’t profess to be an absolute expert at control theory, a lot of the information about the matter
that I’ve found online appears to be either inaccessible to the average Joe or simply flat-out unhelpful. 
Control Theory is often explained with mechanical controllers that don’t really have any application to the
software world, and it has been difficult for me personally to comprehend at all what is going on. In light of
this, I’ve decided to do a write up about what control theory is from the perspective of an implementor, 
rather than that of a theorist.&lt;/p&gt;

&lt;p&gt;That being said, control theory is still theory. That is, to understand the concept itself, you must
understand the theory. I do plan on going over the practical use of control theory in code later on in this
post, but I will first begin with theory.&lt;/p&gt;

&lt;p&gt;Feel free to drop me a message on Telegram if I’ve made any errors in my explanation, because I again do not
profess to be an expert at all in the subject.&lt;/p&gt;

&lt;h1 id=&quot;the-premise-of-control-theory&quot;&gt;The Premise of Control Theory&lt;/h1&gt;

&lt;p&gt;Control Theory is a branch of Computer Science that deals
with the manipulation of a physical system. When people
talk about Control Theory, they tend to use temperature
control as an example. Another common use of Control Theory
is in robotics, where the physical systems are the moving
parts of the robot such as arms and legs. The need for
Control Theory arises because the state of the environment
changes during the operation of a physical mechanism. In
order to control the distance that a robot moves for
example, one would need to know how powerful the motor is,
the frictional forces that will be experienced, such as
from the surface, from the ball bearings, potentially wind
resistance, etc. By taking all of these factors into
account, one can can calculate parameters such as current
and the time that a motor will need to run to move some
distance. This model, where all the information is
collected beforehand to compute a command that controls
a system is called an &lt;em&gt;open loop system&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-open-loop.svg&quot; alt=&quot;Open Loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the problem is that it would be impractical to 
have to measure or require a human to input the
potentially large number of different variables that
affect the system. This problem is solved by using a sensor
to measure the actual output of the system (in this case,
the actual distance the wheel of a robot rolls) and then
sending that information back to the software, which then
computes a new set of parameters to compensate for 
overshoot or undershoot of some target. This is called a
&lt;em&gt;closed-loop system&lt;/em&gt;, because information travels both in
the direction of the system being controlled, and in the
direction of the software controlling that system as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-closed-loop.svg&quot; alt=&quot;Closed Loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And while you will still need to understand certain
operating parameters of the physical system, you will not
need to account for every possible factor that will affect
the the physical result of a command.&lt;/p&gt;

&lt;p&gt;(As a quick side note, one would use a sensor when dealing
with autonomous systems. When humans are operating a
system, it is the human who takes note of whatever state
the system is currently in, and therefore, a system that
would otherwise be an open-loop becomes a closed-loop
system with human intervention)&lt;/p&gt;

&lt;p&gt;While I will be referring to the software control of
physical systems, control loops can also be built with
mechanical controls in the place of the software component
as well.&lt;/p&gt;

&lt;h1 id=&quot;abstract-view-of-closed-loop-systems&quot;&gt;Abstract View of Closed-Loop Systems&lt;/h1&gt;

&lt;p&gt;Physical systems do not react instantaneously. As such, a
closed-loop system will usually sample and send updates 
over time at fixed intervals.&lt;/p&gt;

&lt;p&gt;At the beginning of a procedure, a goal (or target or
setpoint) is defined for a system. This could be rolling a
particular distance for a wheel, or a room heating up to a
particular temperature, or a particular speed at which to
spin an axle, etc, so long as whatever sensor is equipped
on the device is capable of measuring it (e.g. an encoder
or a thermocouple). Then, the &lt;em&gt;error&lt;/em&gt; is computed by
subtracting the current state of the system from the
setpoint, where error is simply a metric of how far away
the current state of the mechanism is from where the 
setpoint  is. Finally, a command will be sent to compensate
for the error. This will be repeated at a set time interval
until the error becomes, or gets close enough to 0, meaning
that the mechanism has reached its setpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-abstract-loop.svg&quot; alt=&quot;Abstract Loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The process of computing the output based on the error
value is known as PID (sometimes PIDF), where the letters
stand for proportional, integral, derivative, and
feed-forward. Because PID is the main “controller” of a
mechanism, one often uses the term “PID control” or “PID
loop” to refer to a closed-loop control system. On the
above diagram, PID would be the “Compute output” portion of
the control loop.&lt;/p&gt;

&lt;p&gt;When you look up &lt;a href=&quot;https://en.wikipedia.org/wiki/PID_controller&quot;&gt;“PID Controller”&lt;/a&gt; on Wikipedia, you get
this image here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/cd581e5c8539ce46453574d1188bd9d52a610fe0&quot; alt=&quot;PID equation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(You will notice that there’s only 3 terms, and that I’ve
dropped the F from PID several times already. I’ll get into
why that is later on)&lt;/p&gt;

&lt;p&gt;This is a good starting point at which we can start to
implement a PID control loop. All the K values are simply
“gain” constants, which are used to control the power (for
lack of a better word) of the output. These are adjustible
in order to change the order of magnitude of the output, so
for example, a motor that takes an input between -1 m/s and
1 m/s would have smaller gain constants than a motor that
takes input between -10 m/s to 10 m/s. A user provides
these constants to the PID controller in advance. It takes
some degree of testing to figure out the best combination
of gain values, a topic which is out of scope of this
discussion of the PID equation for the time being.&lt;/p&gt;

&lt;p&gt;Each gain constant precedes a value that is proportional to
the instantaneous error, then the accumulated error, then
the rate at which the error is changing.&lt;/p&gt;

&lt;h1 id=&quot;pid-under-the-magnifying-glass&quot;&gt;PID Under The Magnifying Glass&lt;/h1&gt;

&lt;p&gt;The PID formula from the previous section takes all 3
terms and adds them together to produce the final output
value.&lt;/p&gt;

&lt;p&gt;The error values that go into a PID controller are almost
always some form of distance or displacement. For example,
this could be the distance a robot is from a target, or the
number of degrees off a desired temperature. However, error
can also be a rate in, such as the current rate of a pump 
compared to the desired rate of a pump. The concept for 
both of them are exactly the same, however, and the PID 
computation shouldn’t need to change so long as they are 
using distinct PID controllers. Either way, the bottom line
is that PID is simply a way to derive an output value based
on the input values. The behavior of the mechanism ends up 
being the same one way or another anyways, so don’t fret if
you’re worried about the rate being a derivative of
distance - it doesn’t matter. The end result is that you
want to obtain an output that gets you to where you want to
go, or to a rate at which you want to go at.&lt;/p&gt;

&lt;p&gt;The output of a PID controller is always a rate. It doesn’t
really make any sense to output a distance or displacement
value, because physical systems can control rate in order
to affect the distance from a setpoint. For example, a PID
controller can output a greater value to increase the speed
at which a wheel turns, or decrease the temperature of a
heating element to reduce the speed at which heat is
distrubuted into a room.&lt;/p&gt;

&lt;h4 id=&quot;the-p-term&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; term&lt;/h4&gt;

&lt;p&gt;The P term looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;K_p*e(t)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Meaning that it is derived from the proportional gain
constant multiplied by the most recently recorded error.&lt;/p&gt;

&lt;p&gt;The P term is the most powerful because it responds to all 
changes to the value of the error, and the gain constant 
for the proportional term is usually tuned first. Having a 
P term alone usually leads to erratic output values in 
close proximity to the error beacuse the P gain amplifies 
the error to the negatives if the mechanism overshoots, and
vice versa.&lt;/p&gt;

&lt;p&gt;A motion curve is typically used in robotics to show the
distanced travelled by a robot over time. I’ve used a
motion curve below to show the response to a PID loop
controlling the state of a system, where state can be a
temperature or a volume or a distance.&lt;/p&gt;

&lt;p&gt;A system with an overly large P value looks like the 
following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-p-unstable.svg&quot; alt=&quot;P unstable loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is often possible to acheive reasonably good results
using just the P term. One can adjuts the P gain until a
decent motion curve is produced, leaving all other gains
to 0. This is simply called a “P controller” or “P loop.”&lt;/p&gt;

&lt;h4 id=&quot;the-i-term&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; term&lt;/h4&gt;

&lt;p&gt;The I term looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;K_i*integrate(0, t, e(T), T)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Meaning that it is derived from multiplying the integral
gain by the accumulated error from time 0 to the current
time.&lt;/p&gt;

&lt;p&gt;Because the I term is related to the accumulated error, the
longer the robot is off target, the more powerful the I 
term becomes. The problem with the I term on its own is 
that it tends to overcompensate because the accumulated 
error must be reduced by an opposing physical action, which 
then overshoots and starts another oscillation cycle.&lt;/p&gt;

&lt;p&gt;This can be seen in a I only term loop here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-i-only.svg&quot; alt=&quot;I only loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most common type of control loop that I’ve personally
seen is a PI loop, in which only the P and I terms are
used. It’s rare to see a full PID(F) loop because it is
often more work to redetermine the gain constants than it 
is worth the marginal gains produced by adding an extra 
term.&lt;/p&gt;

&lt;p&gt;For example, consider the following P only loop, which
demonstrates the ability of a single P term to produce
relatively decent results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-p-stable.svg&quot; alt=&quot;P stable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An I term can be introduced to make a PI controller. This
will smooth out the motion curve when it reaches the
setpoint, and prevent a quick decceleration. You can see,
however, that there is some degree of overshoot when an I
term is introduced:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pi.svg&quot; alt=&quot;PI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;http://www.ni.com/en-us/innovations/white-papers/06/pid-theory-explained.html&quot;&gt;PID Theory Explained&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some amount of overshoot is always necessary for a fast 
system so that it could respond to changes immediately&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;the-d-term&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; term&lt;/h4&gt;

&lt;p&gt;The D term looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;K_d*derive(e(t), t)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Meaning that it is derived from the product of the
derivative gain and the instantaneous rate of change for 
the error.&lt;/p&gt;

&lt;p&gt;The D term is related to the rate at which error changes.
The faster the mechanism moves away from its setpoint, the
more powerful the D term becomes. Unlike the other two
terms, the D term does not respond directly to rate, but
rather the change in rate. Therefore, it is not possible to
have a D only system. The effect of the D term is to
reduce the rate at which the error grows, therefore
flattening the error line. This is useful for more stable
mechanisms that require the output to be adjusted to
reduce the power of the P term.&lt;/p&gt;

&lt;p&gt;It’s probably easier to see it on a graph. Here’s a PD loop
with the D gain set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pd-0.svg&quot; alt=&quot;PD - D = 0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, compare that to a PD loop with the D gain raised
slightly:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pd-06.svg&quot; alt=&quot;PD - D = 0.6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The D term is problematic sometimes because setting the D
gain to to high of a value will cause the output to
oscillate extremely rapidly. This can also happen when
there are a lot of environmental disturbances that cause
the D term to overreact:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pd-massive.svg&quot; alt=&quot;PD - D = massive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my experience, I tend to see controllers using mostly
P and I terms, but usually no D term. The Wikipedia page
has this to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Derivative action is seldom used in practice though – by
one estimate in only 25% of deployed controllers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although this claim requires citation, it is easy to see
that the D term isn’t too significantly useful for the
vast majority of applications where PI term controllers
are used instead. When the D gain is raised, the D term
tends to “fight” against the other two terms because it
wants to flatten the motion curve, when the other two terms
actually want the curve to get closer to the setpoint:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/itct-pd-07.svg&quot; alt=&quot;PD - D = 0.7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the D term is used, it tends to be used in a full PID
loop to control the I term overshoot. PD loops are also
found in the wild, but again, anything with a D term tends
to be quite rare compared to P and PI loops.&lt;/p&gt;

&lt;h4 id=&quot;the-f-term&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; term&lt;/h4&gt;

&lt;p&gt;The F term is special because it is often left out of the
“PID” initialism. In part, this is due to the fact that
feed-forward is the application of a constant output,
regardless of the state of the mechanism. The actual
equation for a full PIDF loop looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;u(t) = K_p*e(t) + K_i*integrate(0, t, e(T), T) + K_d*derive(e(t), t) + K_f*SP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where the F term is derived from the product of the
feed-forward gain and the current setpoint.&lt;/p&gt;

&lt;p&gt;The purpose of a feed-forward in a PIDF computation is to
provide “stability.” The F term acts as kind of a base rate
that pads the output from changes in the environment.
Because the F term doesn’t respond to feedback from a
sensor (see the derivation of the F term), it is doesn’t
truly belong with the other P, I, and D terms that do
depend on sensor feedback.&lt;/p&gt;

&lt;p&gt;The other part of the reason why I think that the F term is
dropped is because many systems tend to change quite often.
As a matter of fact, &lt;a href=&quot;https://frc-pdr.readthedocs.io/en/latest/control/pid_control.html&quot;&gt;FRC Programming Done Right&lt;/a&gt;
has this to say about using the F term:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Feedforward control is necessary on all but the absolute 
simplest of systems. It’s incredibly difficult to get a 
good response without a feedforward calculation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my opinion, this is actually backwards. For simpler,
more predictable systems, it is easier to use an F term
because it is easier to predict and measure the various
different factors that impact the performance of a
specific device. This all goes back to the open-loop and
closed-loop system. The simpler the system is, the easier
it will be to determine the appropriate F gain. This also
means that it is difficult to use for more varied, dynamic
environments you’d typically find PID control loops
running in, which is why PID tends to be referred to
without reference to the F term.&lt;/p&gt;

&lt;p&gt;The F term also is only really useful for constant-rate
mechanisms (i.e. those that use difference in rate as the
error value rather than difference in displacement as is
customoary). Becase the F term cannot respond to
environmental changes, having a pre-defined F term in order
to drive a mechanism and using the other terms to control
error to that predefined rate is the most useful
application of the F term that I can personally see.&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;

&lt;p&gt;The derivation of the PID(F) formula is actually more 
daunting than the implementation in code.&lt;/p&gt;

&lt;p&gt;We can imagine the PID loop as looking something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PidfController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Begin the loop by setting a target&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSetpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Set the last state recorded by a sensor&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// If the error is 0, the PID procedure is done&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Compute the output&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computePidf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Send output to the mechanism&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mechanism&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Wait a constant time interval before repeating &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Once again, it should be noted that often a PID(F)
controller stops once the error is close enough to 0, in
general it’s a poor idea to directly compare floating point
numbers anyways, so you probably get the idea)&lt;/p&gt;

&lt;p&gt;To write the &lt;code class=&quot;highlighter-rouge&quot;&gt;PidfController&lt;/code&gt;, the easiest step is to 
firstly define our gain and interval constants:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next portion would be to implement a way to calculate
error. We will need a way to define the setpoint to which
the PID(F) controller is to travel to, and then a way to
define the last state recorded by a sensor:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Called by a user to set the setpoint&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSetpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Called by a sensor to set the state of the system&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setLastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have our gain constants a way to compute the 
current error, we can now head to computing each term.&lt;/p&gt;

&lt;p&gt;Proportional:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeProportional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For integral, we need to hold the amount of error that has
accummulated since the PID loop began. This can be acheived
by using a variable to hold the error multiplied by the
interval time each time the loop runs:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulatedError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeIntegral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accumulatedError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accumulatedError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For derivative, since the rate of change of the error is
instantaneous, we can simply use the slope formula for the
last recorded error and the current error taken over the
interval time:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeDerivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For feed-forward, it is the gain multiplied by setpoint:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeFeedforward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, tying everything together:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computePidf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeProportional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeDerivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIntegral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeFeedforward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then cleanup our code and write it all into a coherent
class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PidfController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulatedError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PidfController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fGain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSetpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setLastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeProportional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeIntegral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accumulatedError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accumulatedError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeDerivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeFeedforward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fGain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computePidf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeProportional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeDerivative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIntegral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeFeedforward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Users should change the &lt;code class=&quot;highlighter-rouge&quot;&gt;INTERVAL&lt;/code&gt; time as they see 
appropriate.&lt;/p&gt;

&lt;p&gt;It should be noted that all the gain values can even be
changed during the PID loop, and so it is not necessary for
them to be &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;INTERVAL&lt;/code&gt; time doesn’t even need
to be constant, so long as one takes into account the time
that elapses between each iteration of the PID loop. That
being said, this is simply just the bare-bones minimum
code, and it is up to the implementor to determine if those
features are needed.&lt;/p&gt;

&lt;p&gt;As far as units go, it is not necessarily required to have
a consistent unit conversion. A PIDF loop simply outputs
the rate as it relates to the gain constants and the error
value. It is up to users to determine if any consistency is
really required here.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Control Theory and control engineering are broad topics
that I’ve only briefly touched over in this blog post. With
a better understanding of the theory and implementation of
PID control, one can build more precise physical mechanisms
such as robots, temperature controls, pumps, etc.&lt;/p&gt;

&lt;p&gt;I’ve done my best to speak on general terms so that the
concepts can be applied to the widest selection of
scenarios possible. Sometimes, that has made it more 
difficult to undestand what I’m talking about, but I hope
that giving several real world examples to demonstrate a
single concept has made it easier to grasp.&lt;/p&gt;

&lt;p&gt;Again, I will reiterate that I’m by no means an expert in
the field of Control Theory. Feel free to contact me for
corrections, but I’m definitely not the right person to ask
if you need clarification, as I’ve done my best already to 
try and clarify everything up front.&lt;/p&gt;

&lt;p&gt;For FRC Robots, you definitely want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;PIDController&lt;/code&gt;
over the hand-rolled implementation I have here, by the
way.&lt;/p&gt;

&lt;p&gt;I probably won’t be doing any more posts about robotics
unless some extenuating circumstance forces me to.&lt;/p&gt;</content><author><name></name></author><summary type="html">While I don’t profess to be an absolute expert at control theory, a lot of the information about the matter that I’ve found online appears to be either inaccessible to the average Joe or simply flat-out unhelpful. Control Theory is often explained with mechanical controllers that don’t really have any application to the software world, and it has been difficult for me personally to comprehend at all what is going on. In light of this, I’ve decided to do a write up about what control theory is from the perspective of an implementor, rather than that of a theorist.</summary></entry></feed>