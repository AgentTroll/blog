<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://agenttroll.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://agenttroll.github.io/blog/" rel="alternate" type="text/html" /><updated>2019-08-01T22:46:28-07:00</updated><id>https://agenttroll.github.io/blog/</id><title type="html">Inside a Troll</title><subtitle>Thoughts of a Java developer</subtitle><entry><title type="html">Let’s Talk Privacy</title><link href="https://agenttroll.github.io/blog/2019/07/28/lets-talk-privacy.html" rel="alternate" type="text/html" title="Let's Talk Privacy" /><published>2019-07-28T15:41:15-07:00</published><updated>2019-07-28T15:41:15-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/28/lets-talk-privacy</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/28/lets-talk-privacy.html">&lt;p&gt;This post should come with a big red disclaimer that says
I’m not an expert, but since my screen is redshifted to
hell, plain black will have to do. I’m just a Java
programmer with a blog.&lt;/p&gt;

&lt;p&gt;With that out of the way, I am subscribed to
&lt;a href=&quot;https://t.me/hackernewslive&quot;&gt;Hacker News Live&lt;/a&gt; channel,
which posts updates regarding Google Chrome a few times,
every time with dozens of thumbs-ups and only a few
thumbs-down votes. A few weeks ago, I decided to just check
&lt;a href=&quot;https://www.siliconvalley.com/2019/06/21/google-chrome-has-become-surveillance-software-its-time-to-switch/&quot;&gt;the link&lt;/a&gt;,
which I found to be an interesting read indeed. It’s not
everyday you see almost 20 thumbs-ups on a single article
on the Hacker News Live channel, so there must either be a
really compelling point made or there are anti-Google bots
on the channel.&lt;/p&gt;

&lt;p&gt;That was the beginning of a pretty long journey.&lt;/p&gt;

&lt;h1 id=&quot;why-privacy-is-important&quot;&gt;Why Privacy is Important&lt;/h1&gt;

&lt;p&gt;If you don’t think privacy is important, then I doubt
anything I say will change your mind. That being said, I
think that it is a topic worth being informed on. I’m not
an expert on this subject, but there are plenty of people
who are and can convince you of the importance of privacy
if I fail to do so. I’ll be sure to give links.&lt;/p&gt;

&lt;p&gt;I wrote this
&lt;a href=&quot;https://twitter.com/AgentTrolldude/status/1154623948039962625&quot;&gt;tweet&lt;/a&gt;
a few days ago. The first link of course, is to the
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Nothing_to_hide_argument&quot;&gt;Nothing to hide&lt;/a&gt;”
argument. The reasoning goes that if you have nothing to
hide, then you have nothing to fear. You can allow for
your privacy to be violated because you don’t care about
what people are going to find. This is far and away the
most common counterpoint I tend to hear about why people
shouldn’t care about privacy. This is a vastly flawed
argument in a number of ways. There are a lot of details
on the Wikipedia page I linked, but you can find further
information here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/privacy/wiki/index#wiki_why_should_i_care_about_privacy.3F&quot;&gt;r/privacy Wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.privacytools.io/&quot;&gt;privacytoolsIO Main page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The links above are a fantastic starting place to learn
more about privacy and why you should care. I’ll even
talk about why I care about privacy myself later on. But
first, I’ll get back to why “having nothing to hide” is a
terrible argument. First of all, it is overly presumptuous
and implies that only criminals should expect privacy. It
implies that law-abiding citizens should not be afraid of
having their personal information exposed, because no harm
can come to them if they can prove that they are completely
innocent. However, even if you don’t have anything to hide,
“&lt;a href=&quot;https://www.aclu.org/blog/national-security/secrecy/you-may-have-nothing-hide-you-still-have-something-fear&quot;&gt;you still have something to fear&lt;/a&gt;.”
If you did not care about your personal information, would
you be comfortable with someone using your identity to
&lt;a href=&quot;https://www.reddit.com/r/privacy/comments/3hynvp/how_do_you_counter_the_i_have_nothing_to_hide/&quot;&gt;commit a crime&lt;/a&gt;?
Would you let someone in to your bathroom to watch you
shower and use the toilet? Would you invite people passing
by to watch you sleep? Having nothing to hide is a poor
argument for not caring about privacy. The truth is, you
probably do have something to hide. You are not
infalliable. If you have nothing to hide, you probably need
to look harder. And even then, you &lt;em&gt;should not have
something to hide in order to expect privacy&lt;/em&gt;. You expect
privacy when you are using the bathroom or spending time
with your family. It would be creepy to have someone
staring through your window, watching your every move. But
you don’t have to take my word for it, there are lots of
arguments for and against having anything to hide and
whether that entitles you to privacy. Let’s keep moving.&lt;/p&gt;

&lt;p&gt;According to the linked r/privacy wiki:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;there is an ever increasing portion of our lives which is
being recorded by corporations and governments, and these
records can be used to our disadvantage, at any time, now
or any-time in the future&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Corporations and governments have an immense amount of
power armed with the data they have collected from users
and citizens. If you do have something to hide (which you
almost certainly do, otherwise, do not ever lock your doors
again), the question now becomes can they be accountable
for that data. I believe I read an article which I’m
currently unable to find about how Google’s reCAPTCHA v3
technology could even be used to detect Parkinsons based
on the movement of a user’s mouse. This is a fantastic way
to inform people who may not have been diagnosed yet. But
on the other hand, this information may also be
inadvertently published, for example, to insurance
companies who will raise your premiums. Even if Google
never ends up doing this, deducing health conditions based
simply on mouse movements is a testament to the data
collection power of Internet corporations. Even if Google
cannot collect this data, someone else may exploit this
technology themselves. Even if you don’t care if your rates
increase, even if you don’t care if everybody in the whole
world knew you had Parkinsons, it isn’t like it would help
you to be in that situation. &lt;em&gt;Even if it did help&lt;/em&gt;, it
might hurt others. Even if companies and governments are
good stewards of your data, assuming that no nefarious
employees access that data, assuming that no one is able to
read your data when you are sending it, assuming that there
is “no one out to get you,” and assuming a plethora of
other unrealistic expectations about how your data is
handled, privacy still matters to you. The mere fact that
you do not care about your privacy is an expoitable data
point, because you be expected to give up your data
needlessly. And this is in the best possible scenario.
In reality, companies profit off of collecting and selling
data. Allowing yourself to be complacent is like putting
your wallet with all of your cash on the ground. Some
people will try to find to owner or report it to police,
but others are going to make a profit. Even if you do not
value your own personal information, &lt;em&gt;someone else will&lt;/em&gt;.
Your data cannot help you if the government has access to
both exculpatory information and incriminating information
if their sole goal is to arrest you. It doesn’t matter if
you have not committed a crime and it doesn’t matter that
you have nothing to hide.&lt;/p&gt;

&lt;p&gt;All of this is not to say that your information has been
or will be used against you. Only that it may be, and that
it is a very real threat. You may not be impacted yourself,
but others already have. Look no further than the
totalitarian governments. If you think that you don’t have
anything to hide, think again, because chances are, you
probably do.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zdnet.com/article/a-case-against-online-privacy/&quot;&gt;One article&lt;/a&gt;
claims that services that collect data
“provide […] some value.” Let’s say that you aren’t like
me and you do care about ads. You think that being tracked,
having your preferences recorded, and having a slower
browser is a good thing because you benefit in the end.
But the argument is severely flawed. The author
subsequently points fingers at ISPs since they allegedly
don’t provide you a better service, they give data to
the cops, and they don’t tell you you are being tracked.
These are all debunked by Facebook’s
&lt;a href=&quot;https://www.facebook.com/policy.php&quot;&gt;Data Policy&lt;/a&gt;,
which states that they also comply with law enforcement,
and by Comcast’s
&lt;a href=&quot;https://www.xfinity.com/corporate/customers/policies/customerprivacy#to-provide-and-improve-the-services&quot;&gt;Customer Privacy Notice&lt;/a&gt;,
which literally says that they collect traffic and use
the data they collect to improve their services. I’m sure
other ISPs will have similar policies. But never mind that
fact, the whole point is that there still is value to be
gained from expectation of privacy, even if you think you
benefit from not having that expectation. Again, just
because the data isn’t being abused right now doesn’t mean
it won’t be in the future (on the other hand, as I keep
saying, it doesn’t mean that it &lt;em&gt;will&lt;/em&gt; either). The data
and the conclusions that can be drawn from it are powerful
bargaining tools if they reveal information that you don’t
want people to know. But let’s say that you don’t care.
That does not mean that you shouldn’t be entitled to be
able to control the data advertising companies collect.
Like I will describe in the reasons why I personally care
about privacy, I state that it is about controlling my
information. If you do not care about your information,
you are implicitly allowing for that information to be
released about yourself. So although you don’t care about
the data being collected itself, you do care about
controlling it. Even if you don’t do anything to hide
that data in the first place, your lack of control is in
of itself your decision. You should have the option halt
the collection of data if that is your choice as well.
Allowing your personal data to be collected is as much of
a decision based on your privacy preference as is not
allowing it to be.&lt;/p&gt;

&lt;p&gt;There are so many more points and counterpoints that I can’t
list them all here. Instead, I’ll leave more links so you
can read them yourself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.gseis.ucla.edu/faculty/agre/arguments.html&quot;&gt;Arguments Against Privacy and What’s Wrong With Them&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.livemint.com/Opinion/03L1A2tOAFw6sXpsu4cweL/The-problem-with-the-right-to-privacy.html&quot;&gt;The problem with the right to privacy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spreadprivacy.com/three-reasons-why-the-nothing-to-hide-argument-is-flawed/&quot;&gt;Three Reasons Why the “Nothing to Hide” Argument is Flawed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theatlantic.com/technology/archive/2013/02/why-does-privacy-matter-one-scholars-answer/273521/&quot;&gt;Why Does Privacy Matter? One Scholar’s Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;why-i-care&quot;&gt;Why I Care&lt;/h4&gt;

&lt;p&gt;I myself have my own personal reasons to care about
privacy.&lt;/p&gt;

&lt;p&gt;In no particular order, I care about my privacy because I
think that it is important for me to control my personal
information. For example, the front page of my GitHub
profile has my name right on it, but it’s not like I go
around on public forums announcing my name. This is a
deliberate choice. While I’m not keeping my identity
private, I think an important part of privacy is the
element of control. I’m not preventing anyone from finding
out who I am, because I post plenty of that information on
the web. If people are curious, they can find out more
about me. There are going to be creeps online of course,
but from my own personal experience, I feel that having
this information in public has benefitted me much more than
it has been a detriment. It has helped me connect with
people on more than one occaision. But you may be curious,
how does controlling my data relate to privacy? Here is
what the
&lt;a href=&quot;https://iapp.org/about/what-is-privacy/&quot;&gt;IAPP&lt;/a&gt; has to say
on that matter:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Broadly speaking, privacy is the right to be let alone,
or freedom from interference or intrusion. Information
privacy is the right to have some control over how your
personal information is collected and used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By making my information less visible in some contexts and
more so in others, I am controlling my privacy. However,
in other contexts, that could also mean hiding my
information more or less completely. For example, I share
my Discord information with very few people, same deal with
my Steam account. I don’t share my passwords with anyone.
Privacy doesn’t mean that you explicitly need to hide
anything, only that you are in control of information.&lt;/p&gt;

&lt;p&gt;Secondly, I care about my privacy because I think that some
of my information shouldn’t fall into the hands of hackers.
Online accounts often link information such as birthdate,
phone number, friendships, etc. Many companies have privacy
policies that say that your information is encrypted or
stored safely and all of that. However, the IAPP states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While security is necessary for protecting data, it’s not
sufficient for addressing privacy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And they’re right. There are many examples of this being
exhibited in the real world, such as in the case of
&lt;a href=&quot;https://newsroom.fb.com/news/2018/09/security-update/&quot;&gt;Facebook&lt;/a&gt;
just last year. The truth is, once you give your data to
a company, it is stored inside of a black box. I don’t
want to sound like a consspiracy theorist or anything,
but I don’t want my data to be in the hands of someone
I don’t know, running software that might have
vulnerabilities, or servers that are behind on security
updates. I expect that companies I give my personal
information to protect that information. Even companies
proclaim themselves to
&lt;a href=&quot;https://blog.mozilla.org/firefox/firefox-data-privacy-promise/&quot;&gt;protect your privacy&lt;/a&gt;
make
&lt;a href=&quot;https://www.reddit.com/r/firefox/comments/anxfz8/firefox_is_spyware_extension_recommendation/eg1hekf/&quot;&gt;mistakes&lt;/a&gt;
as well. (See the comments, the post is entirely outrage
bait and tinfoil hattery).&lt;/p&gt;

&lt;p&gt;The simple fact is, I personally don’t see why companies
should have access to data that they don’t need. I don’t
care if they encrypt it, I don’t care if it is anonymized
or if they never sell it, or if they don’t even have it
stored in the first place. Why am I sending this data then?
That would be analogous to going out to lunch and then
suddenly announcing to people that I have bowel issues. Not
only would this be completely inappropriate, the
information I’m giving is completely unecessary because I’m
going to eat, not going to the doctor. To apply this to a
browser for example, why is Google Chrome sending
information back to Google when my browser would work
completely fine without that data sent anywhere? I don’t
care what is being sent, why is it even sent in the first
place?&lt;/p&gt;

&lt;p&gt;Finally, I personally care about my privacy because
tracking takes up my computer’s resources. Loading ads
and spyware implanted on websites that are designed to
track you takes up CPU, RAM, and battery power. If I’m on
a slow WiFi connection, I want every little bit of
bandwidth to load the fucking website, not a bunch of ads.
I’d be happy to donate my money to subscription-based
services such as reputable news sites and content creators
if it means getting rid of ads and they get 100% of the
revenue. Nevermind the fact that advertising companies
want to collect every bit of data possible about me to
“tailor” their ads, I literally just don’t want my battery
to be drained any faster than it already is by being
tracked.&lt;/p&gt;

&lt;h1 id=&quot;what-you-can-do&quot;&gt;What You Can Do&lt;/h1&gt;

&lt;p&gt;I will warn you before this that when regarding privacy,
many of the sources that you’ll run into are not shy about
coming off as tinfoil hatters. I’ve found sources that run
articles about the fall of capitalism, the end of the
world, etc., which can be expected of people who tend to be
paranoid, if not overly so at times. However, privacy and
security are real issues that governments are interested in
as well, and I advise that you ignore the more extreme
conspiracy theorizing and select the portions of the
articles that are rational, or the ones that match your
own
&lt;a href=&quot;https://ssd.eff.org/en/module/your-security-plan&quot;&gt;threat profile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Again, I will reference the r/privacy wiki that I linked
early in this blog post. It has a lot of references to
many different tools to minimize or take control of the
data being collected on you.&lt;/p&gt;

&lt;p&gt;I don’t give a comprehensive list here, but it should be
enough to give you an idea of my personal preferences and
where you can find more information. In general, if you
use any software or website that visits the Internet, you
should check on its Privacy Policy and look for informed
opinions about whether or not that service respects your
privacy.&lt;/p&gt;

&lt;h4 id=&quot;web-browser&quot;&gt;Web Browser&lt;/h4&gt;

&lt;p&gt;Another great resource is the
&lt;a href=&quot;https://spyware.neocities.org/articles/browsers.html&quot;&gt;Spyware Watchdog&lt;/a&gt;,
with the linked page going to a comparison of different
web browsers. I personally use Ungoogled Chromium because
I prefer a Chromium based browser that had all of the
spyware disabled right out of the box. I have the following
extensions installed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bitwarden&lt;/li&gt;
  &lt;li&gt;Cookie AutoDelete&lt;/li&gt;
  &lt;li&gt;Decentraleyes&lt;/li&gt;
  &lt;li&gt;EditThisCookie&lt;/li&gt;
  &lt;li&gt;HTTPS Everywhere&lt;/li&gt;
  &lt;li&gt;NoScript&lt;/li&gt;
  &lt;li&gt;Privacy Badger&lt;/li&gt;
  &lt;li&gt;uBlock Origin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are plethora of different extensions for Firefox as
well, but since I’ve moved on from using Firefox, I won’t
list them here. I personally prefer the UI on Chromium
and I liked not having to configure anything.&lt;/p&gt;

&lt;h4 id=&quot;os&quot;&gt;OS&lt;/h4&gt;

&lt;p&gt;If you are not using Linux, I highly recommend switching.
Since I already use Debian by default, I have little to say
on this matter. You should read up
&lt;a href=&quot;https://www.privacytools.io/operating-systems/#os&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;search-engine&quot;&gt;Search Engine&lt;/h4&gt;

&lt;p&gt;I personally use StartPage. I’ve used DuckDuckGo in the
past but I’ve personally found StartPage to be a lot better
in terms of search results. Your milage may vary. Again,
see
&lt;a href=&quot;https://www.privacytools.io/providers/search-engines/&quot;&gt;privacytoolsIO&lt;/a&gt;
for more alternatives.&lt;/p&gt;

&lt;h4 id=&quot;deleting-accounts&quot;&gt;Deleting Accounts&lt;/h4&gt;

&lt;p&gt;Before writing this article, I had hundreds of logins. I’ve
sent dozens and dozens of emails to the different sites
that I’ve had accounts on asking for them to delete accounts
I no longer use. Before deleting your account, you should
try to obfuscate some of your personal data if you see fit.
You can read each website’s privacy policies if you don’t
know who to contact to delete your account. Deleting your
account means that the data is (hopefully) removed from
the service provider’s servers, and you will (hopefully)
reduce the size of your digital footprint. You can reduce
the chance of having an account compromised if you don’t
have as many accounts.&lt;/p&gt;

&lt;h4 id=&quot;spread-the-word&quot;&gt;Spread the Word&lt;/h4&gt;

&lt;p&gt;If you’ve made it this far, you probably at least care
about privacy enough to think that it is an issue worth
promoting. Tell your friends, advise them to move away
from using services that track users and services that do
not respect their users’ privacy. Privacy is an issue of
complacency. It is easy to have your rights taken away and
your freedoms to be violated if you never knew you had them
in the first place. At worst, at least people will be more
informed if they do not choose to control their personal
data.&lt;/p&gt;

&lt;p&gt;These are only some of the ways that I’ve tried to control
my data and my privacy. There are of course, many more
ways to improve even what I’ve listed here, and there are
other services that are worth giving up that the reader
might be using that I don’t know of. Evaluate what your
risk profile is, minimize your digital footprint, and
assert your right to privacy.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Obviously, this isn’t a programming-related post, but I
still hope that you’ve learned something nevertheless.
Privacy is not only about the here and now, but also about
the future. Now that we are hearing more and more of the
media publicizing hacks for political gain such as the
Clinton email leak and the Cambridge Analytica scandal, it
is more important than ever to take a hard look at how much
we really value our privacy, and by extension, how much we
value our democracy. Privacy is obviously a controversial
issue because it is so politically charged, but I’ve tried
my best to try to stay neutral on this matter. I don’t
think it matters what political party you subscribe to, or
how much you think you care about your privacy, it is an
important issue in the digital age.&lt;/p&gt;</content><author><name></name></author><summary type="html">This post should come with a big red disclaimer that says I’m not an expert, but since my screen is redshifted to hell, plain black will have to do. I’m just a Java programmer with a blog.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 7</title><link href="https://agenttroll.github.io/blog/2019/07/24/lessons-learned-debugging-part-7.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 7" /><published>2019-07-24T00:07:20-07:00</published><updated>2019-07-24T00:07:20-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/24/lessons-learned-debugging-part-7</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/24/lessons-learned-debugging-part-7.html">&lt;p&gt;I haven’t explicitly identified it until now, but it seems
that I have a habit of putting exactly the same thing in my
introductory paragraph in basically all of the posts in
this series. This particular lesson doesn’t sound all that
bad at first, but I can assure you that I have literally
crashed a server by not following it.&lt;/p&gt;

&lt;h1 id=&quot;strongly-consider-whether-you-can-put-something-in-a-shared-library&quot;&gt;Strongly Consider Whether You Can Put Something In a Shared Library&lt;/h1&gt;

&lt;p&gt;There are so, so many benefits to having a centralized
core library you can depend on for your plugins with
virtually no drawbacks whatsoever.&lt;/p&gt;

&lt;p&gt;The first thing that comes to mind, of course, is having
a set of pre-written classes available to you. For example,
menus, handy utilities for things such as I/O, databases,
and data management primitives. Chances are, if you are not
using a central library, you are writing a significant
amount of boilerplate in your non-trivial plugins. If that
is the case, you should consider generifying what you have
written so that it fits the purpose of multiple plugins.
Although you might be spending more time now trying to
write part of your core library and also the plugin that
currently needs it, you will spend less time writing the
same boilerplate later on. You can significantly increase
productivity if you aren’t stuck writing basically the
same thing for every plugin you write each time you write
a new plugin. Secondly, it is inevitable that you will
make mistakes, and as hard as I try to push for care and
slowing down to think through your code, even I myself
make mistakes as well. If you are writing similar or even
the same code on each of your plugins, ALL of your plugins
need to be updated in the case that you find out you’ve
been doing it wrong the entire time. On the other hand, if
all of your plugins depend on just one library, you only
need to fix the bug once. The counterargument is often that
you can minimize the impact of a mistake if you spot it
when you write the same thing again. However, this is
wishful thinking. This is not how it works in the real
world. I would strongly argue that writing boilerplate is a
mindless activity. You are not likely to catch that you are
making a mistake if you are writing the same code you wrote
last time. On top of that, the more you get used to the
same workflow, the more complacent you become, and more
importantly, the bigger the cost of fixing that said code
once it breaks. Think of it this way: if you only write the
code once, then you only have that one chance to make a
mistake. If you are writing the same code over and over
again, you take that risk every. Single. Time. Thirdly,
even if you Ctrl+C and Ctrl+V your code, there are still
no guarantees. It might work for small snippets of code,
but once you get to large amounts of boilerplate such as
when writing inventory GUIs for example, then things start
to fall apart. You &lt;em&gt;still&lt;/em&gt; suffer from the possibility that
the snippet you’ve been copying from is also wrong as well.
You are not only duplicating what works across your entire
codebase, you are also duplicating anything that
potentially doesn’t. Again, the impact of a bug can be
mitigated, but the cost of fixing it cannot. Do yourself a
favor. When you are writing a lot of boilerplate that can
be abstracted away, consider putting it on your core
library.&lt;/p&gt;

&lt;p&gt;A core library is not only good for putting your own code,
but the code of others as well. You can shade various
common dependencies into your core. The following argument
is terrible, for obvious reasons, but you are reducing the
total JAR sizes of all your plugins if only the one core
plugin contains a big library. But, for those of you who
are for some inexplicable reason scared of large JARs, then
throwing everything into one super JAR file might help
settle your conscience. For me personally, I need to
configure certain libraries such as Guice that need their
own namespaces each time I shade it using Maven, so it
helps if I don’t even need to write anything extra by
using a &lt;code class=&quot;highlighter-rouge&quot;&gt;provided&lt;/code&gt; dependency on the central library. This
isn’t to say that you should put every single dependency in
your core library, but commonly used libraries like
HikariCP are always helpful to have lying around,
especially when a significant portion of your plugin
ecosystem might depend on it. Again, I’m going back to the
JAR size argument, but it also can’t hurt to reduce the
amount of time it takes to download every other plugin if
only the super JAR takes a long time since it has all the
libraries shaded into it.&lt;/p&gt;

&lt;p&gt;Finally, a core library can be used to enforce a specific
standard or policy. For example, if you are including
MySQL utilities, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; to provide
the MySQL credentials to all the plugins using that core
library. The server owner will not need to configure the
credentials more than once. Secondly, by having a library
of different utilities, you can centralize the way a
certain action is performed. For example, you might want
to make sure that caching is done in a particular way, or
that all of the caches used on the various dependent
plugins are configured to have a specific eviction time.
By including this into the core library, you can enforce
that specific policy on all of your plugins. You can even
have a hierarchy of core plugins if certain developers
prefer some other ways, or would like to use open-source
core libraries instead. By changing specific portions of
their desired library to comply with the “master” core
library, they can use both the “master” and their custom
core in conjunction, or simply utilize the custom
library if the desired features are fully reimplemented.&lt;/p&gt;

&lt;p&gt;It may actually take longer to maintain a core library
if you are developing it alongside whatever plugin
you need to complete because you are abstracting away some
feature, but I can assure you that this effort is well
worth it. Because your core library matures in the long
run, it is a net gain rather than a loss as it becomes more
and more useful. Had I have had the foresight to write my
boilerplate into a centralized library, I would not have
crashed servers and caused multitudes of plugins to have
independent visual glitches as a result of making one
mistake.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;As has been tradition, I leave with the following from
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code
that is used to control the airplane that you fly on, the
nuclear power plant a few miles from where you live, or the
spacecraft that carries astronauts into orbit. The rules
act like the seat-belt in your car: initially they are
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve recently become more interested in Internet privacy.
I consider myself to be relatively informed on the topic,
but there are a lot of things that I’ve found that I didn’t
know about within the past few weeks. I’ll be doing a post
on that soon, because I think it is an issue worth talking
about. And for readers who don’t think privacy is an
important issue, I only ask that you hear me out. I’m not a
popular blogger by any means, so if you are reading my blog
in the first place, that probably indicates that you don’t
have anything better to do anyways. I encourage you to use
that time to become at least a little bit more informed :).&lt;/p&gt;</content><author><name></name></author><summary type="html">I haven’t explicitly identified it until now, but it seems that I have a habit of putting exactly the same thing in my introductory paragraph in basically all of the posts in this series. This particular lesson doesn’t sound all that bad at first, but I can assure you that I have literally crashed a server by not following it.</summary></entry><entry><title type="html">What The Fuck Does Guice ‘zip file closed’ Exception Mean?</title><link href="https://agenttroll.github.io/blog/2019/07/18/what-the-fuck-does-guice-zip-file-closed-exception-mean.html" rel="alternate" type="text/html" title="What The Fuck Does Guice 'zip file closed' Exception Mean?" /><published>2019-07-18T01:00:15-07:00</published><updated>2019-07-18T01:00:15-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/18/what-the-fuck-does-guice-zip-file-closed-exception-mean</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/18/what-the-fuck-does-guice-zip-file-closed-exception-mean.html">&lt;p&gt;I’ve had a lot of time to work with &lt;a href=&quot;https://github.com/google/guice&quot;&gt;Guice&lt;/a&gt;
when I worked with Skytropia. However, working on a
personal project with more up-to-date versions of Spigot
and Guice, I was met with the strangest possible exception.
But what does it mean? Honestly, I haven’t quite figured it
all out myself either.&lt;/p&gt;

&lt;p&gt;That being said, the “solution” is deceptively simple and
if you’re just here for that, scroll down and skip the
introductory fluff.&lt;/p&gt;

&lt;h1 id=&quot;the-setup&quot;&gt;The Setup&lt;/h1&gt;

&lt;p&gt;Obviously, it would be out of place if I didn’t show what
I’m running. Here’s the Java/OS info:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System Info: Java 11 (OpenJDK 64-Bit Server VM 11.0.3+7) Host:  Linux 4.19.0-5-amd64 (amd64)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now here’s the server info:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[01:05:37 INFO]: This server is running Paper version git-Paper-133 (MC: 1.14.3) (Implementing API version 1.14.3-R0.1-SNAPSHOT)
[01:05:37 INFO]: Previous version: git-Paper-123 (MC: 1.14.3)
[01:05:37 INFO]: You are 1 version(s) behind
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this is my dependencies &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.inject&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;guice&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.2.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.guava&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;guava&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.inject.extensions&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;guice-assistedinject&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.2.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I am using relocations to move &lt;code class=&quot;highlighter-rouge&quot;&gt;com.google.inject&lt;/code&gt; to a
different package. It is worth noting that you can get an
equally strange error if you shade Guice in the same
namespace, but that applies to all plugins (and the server
namespace as well, which is why you should NEVER shade
database drivers in a plugin, relocation doesn’t work). The
error will obviously look a little bit different, but if I
recall, it should be an &lt;code class=&quot;highlighter-rouge&quot;&gt;IllegalAccessException&lt;/code&gt; or
something similar. That being said, this post is &lt;strong&gt;not&lt;/strong&gt;
on that topic.&lt;/p&gt;

&lt;h1 id=&quot;the-error&quot;&gt;The Error&lt;/h1&gt;

&lt;p&gt;Now onto the error. This is what I have been tearing my
hair over the last hour:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 2019-07-18 00:30:34,444 Log4j2-TF-1-AsyncLogger[AsyncContext@70dea4e]-1 ERROR An exception occurred processing Appender File com.google.common.util.concurrent.UncheckedExecutionException: java.lang.IllegalStateException: zip file closed
        at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2217)
        at com.google.common.cache.LocalCache.get(LocalCache.java:4154)
        at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:4158)
        at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:5147)
        at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:5153)
        at com.google.inject.internal.util.StackTraceElements.forMember(StackTraceElements.java:71)
        at com.google.inject.internal.Messages.formatParameter(Messages.java:286)
        at com.google.inject.internal.Messages.formatInjectionPoint(Messages.java:273)
        at com.google.inject.internal.Messages.formatSource(Messages.java:229)
        at com.google.inject.internal.Messages.formatSource(Messages.java:220)
        at com.google.inject.internal.Messages.formatMessages(Messages.java:90)
        at com.google.inject.ConfigurationException.getMessage(ConfigurationException.java:73)
        at org.apache.logging.log4j.core.impl.ThrowableProxy.&amp;lt;init&amp;gt;(ThrowableProxy.java:134)
        at org.apache.logging.log4j.core.impl.ThrowableProxy.&amp;lt;init&amp;gt;(ThrowableProxy.java:122)
        at org.apache.logging.log4j.core.async.RingBufferLogEvent.getThrownProxy(RingBufferLogEvent.java:330)
        at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)
        at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)
        at org.apache.logging.log4j.core.layout.PatternLayout$PatternSelectorSerializer.toSerializable(PatternLayout.java:455)
        at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:232)
        at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:217)
        at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)
        at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:177)
        at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:170)
        at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:161)
        at org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender.append(RollingRandomAccessFileAppender.java:218)
        at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:156)
        at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:129)
        at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:120)
        at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)
        at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:448)
        at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:433)
        at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:417)
        at org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy.log(AwaitCompletionReliabilityStrategy.java:79)
        at org.apache.logging.log4j.core.async.AsyncLogger.actualAsyncLog(AsyncLogger.java:337)
        at org.apache.logging.log4j.core.async.RingBufferLogEvent.execute(RingBufferLogEvent.java:161)
        at org.apache.logging.log4j.core.async.RingBufferLogEventHandler.onEvent(RingBufferLogEventHandler.java:45)
        at org.apache.logging.log4j.core.async.RingBufferLogEventHandler.onEvent(RingBufferLogEventHandler.java:29)
        at com.lmax.disruptor.BatchEventProcessor.processEvents(BatchEventProcessor.java:168)
        at com.lmax.disruptor.BatchEventProcessor.run(BatchEventProcessor.java:125)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: zip file closed
        at java.util.zip.ZipFile.ensureOpen(ZipFile.java:686)
        at java.util.zip.ZipFile.getEntry(ZipFile.java:315)
        at java.util.jar.JarFile.getEntry(JarFile.java:240)
        at java.util.jar.JarFile.getJarEntry(JarFile.java:223)
        at org.bukkit.plugin.java.PluginClassLoader.findClass(PluginClassLoader.java:101)
        at org.bukkit.plugin.java.PluginClassLoader.findClass(PluginClassLoader.java:85)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        at com.google.inject.internal.util.StackTraceElements$1.load(StackTraceElements.java:49)
        at com.google.inject.internal.util.StackTraceElements$1.load(StackTraceElements.java:45)
        at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3716)
        at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2424)
        at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2298)
        at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2211)
        ... 41 more
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My reaction was immediate. What. The. Fuck.&lt;/p&gt;

&lt;p&gt;What is this supposed to even mean? None of this makes any
sense. Why is Guice even in this stacktrace? Where does the
stacktrace even come from? How is the logger looping back
to Guice in the first place? I mean from the looks of it,
it kinda looked like it had something to do with logging,
but there are several things out of place here - it deals
with the class loader, and Guice had something to do with
it. So obviously, the knee-jerk reaction was incorrect.
(I &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -fR logs/&lt;/code&gt; anyways for good measure, but no dice).&lt;/p&gt;

&lt;p&gt;So how am I supposed to fix it?&lt;/p&gt;

&lt;h1 id=&quot;lets-google-it&quot;&gt;Let’s Google It&lt;/h1&gt;

&lt;p&gt;I was actually unable to find anything about this specific
exception. The only thing I could find were questions like
&lt;a href=&quot;https://stackoverflow.com/q/50693221/3308999&quot;&gt;these&lt;/a&gt; where
they were having issues with the Java version, but that
can’t be right because the exceptions don’t match up first
of all, and second, I know for a fact that Java 11 works
completely fine since I’ve used Guice in the past on Java
11 platforms. Finally, I know that assisted inject isn’t
the issue either because I literally commented it out in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; and made the necessary deletions without
effect.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/q/54174855/3308999&quot;&gt;This&lt;/a&gt; also
came up, but this is another lifeless StackOverflow post
with no answers to it.&lt;/p&gt;

&lt;h1 id=&quot;debugging&quot;&gt;Debugging&lt;/h1&gt;

&lt;p&gt;Since I know that Guice is part of the problem, I decided
to comment out all the initialization it is doing, from
creating the injector to the usages of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Injector#getInstance(...)&lt;/code&gt;. Since I was using a newer
Guice version, perhaps simply having the classes in the JAR
or perhaps the relocation could be messing with something?
The answer was no, the exception didn’t come up with simply
the files in the JAR. This means that when I’m initializing
something, obviously there was something wrong with either
the way I’m configuring or my constructors, or something
along those lines.&lt;/p&gt;

&lt;p&gt;I uncommented &lt;code class=&quot;highlighter-rouge&quot;&gt;Guice#createInjector(...)&lt;/code&gt; and ran again
with no exception. Good, configuration should probably be
fine as-is unless I forgot something, but I’ll have to
start uncommenting the usages of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Injector#getInstance(...)&lt;/code&gt; to know for sure. As I
uncommented those lines, I finally hit an exception, but
it wasn’t the big long meaningless one I pasted above, it
was a readable Guice configuration exception. As it turns
out, I failed to configure a binding for &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin&lt;/code&gt;, which I
used in place of the actual main class. However, using
&lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin&lt;/code&gt; in the first place was a mistake. The particular
class I was working with belonged specifically to the
project and wasn’t a utility or anything, so it was
supposed to use the main class rather than a generic
&lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin&lt;/code&gt;. Since I already had my plugin module correctly
configured, I simply fixed the constructor to take the main
class instead. Ta da, no more exception. In the end, it
turns out that by fixing that configuration exception, the
big meaningless one also went away as well.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In the end, my best guess is that there is an issue with
loading the classes that are contained in the exception
trace, which led to the large spaghetti exception that I
pasted to be printed out. An exception caused by printing
an exception. I’m not sure why the underlying exception
that I solved was printed in plaintext when I suddenly
commented out a few lines, but by fixing the actual error,
it won’t be thrown, and therefore the pasted exception
won’t be thrown either. I’m not sure why this even occurs
in the first place, what the problem is with exceptions
that require class loading and such. Perhaps it is needed
to find line numbers or something to display more
debugging information? Perhaps because it ends up having
to resolve classes through &lt;code class=&quot;highlighter-rouge&quot;&gt;PluginClassLoader&lt;/code&gt;, and the JAR
file has already been read, it can’t read from the closed
JAR stream? I honestly can only speculate. That being said,
it is ironic that something which may have originally been
intended to expedite the debugging process actually
hindered it in this case. Go figure.&lt;/p&gt;

&lt;p&gt;I’m working on getting the project out as soon as I can.
This is simply a quick post I decided to write in case
anyone else also runs into this issue.&lt;/p&gt;

&lt;h1 id=&quot;quick-update-2019-07-21-2347&quot;&gt;Quick update 2019-07-21 23:47&lt;/h1&gt;

&lt;p&gt;I figured out that it has something to do with unchecked
exceptions being thrown; if you wrap all of your code
that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;Injector#getInstance(...)&lt;/code&gt; with a try-catch
block and print with &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception#printStackTrace()&lt;/code&gt; instead,
you can print the actual exception. Since
&lt;code class=&quot;highlighter-rouge&quot;&gt;#getInstance(...)&lt;/code&gt; should only be used in a few entry
points, it should be relatively straightforward (if it
is being used literally everywhere, you’ve probably missed
the point of Guice…).&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve had a lot of time to work with Guice when I worked with Skytropia. However, working on a personal project with more up-to-date versions of Spigot and Guice, I was met with the strangest possible exception. But what does it mean? Honestly, I haven’t quite figured it all out myself either.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 6</title><link href="https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 6" /><published>2019-07-13T20:42:05-07:00</published><updated>2019-07-13T20:42:05-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6.html">&lt;p&gt;This is another one of those “watch out when you’re doing
XYZ” rather than a specific thing to do (or not do).&lt;/p&gt;

&lt;h1 id=&quot;be-careful-handling-inventories&quot;&gt;Be Careful Handling Inventories&lt;/h1&gt;

&lt;p&gt;Inventories are basically death traps in the world of
Bukkit programming. It is surprisingly easy to get
exceptions, duplication bugs (for the uninitiated: bugs
that allow players to obtain more of an item than intended,
often disrupting the in-game economy), and even &lt;a href=&quot;https://agenttroll.github.io/blog/2018/04/13/keeping-inventories-open.html&quot;&gt;crash the
server&lt;/a&gt;
just handling inventories and &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Writing event handlers for &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryClickEvent&lt;/code&gt; and
dealing with any use-case for &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt; should be
approached with caution.&lt;/p&gt;

&lt;h1 id=&quot;exceptions-in-event-handlers&quot;&gt;Exceptions in Event Handlers&lt;/h1&gt;

&lt;p&gt;As a reminder from the
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5.html&quot;&gt;previous post in this series&lt;/a&gt;,
exceptions thrown can cause problems. For example, when
event handlers modify the quantity of items as a result of
some action, an inadvertent exception may terminate the
handler before it reaches the portion of the code that
removes the item, or updates the inventory for that matter.
One way to get around this is to always modify the item in
whatever desired fashion, e.g. reducing its quantity,
before actually executing the action associated with using
that item. However, this isn’t a perfect solution because
errors could crop up before, such as when you are verifying
the item type or pre-conditions. On top of that, that also
leaves server owners with the responsibility of either
refunding or replacing the items that are consumed but no
action is done in the case that the code following the
item modification fails.&lt;/p&gt;

&lt;p&gt;Again, there isn’t a catch-all solution to this problem. Of
course, exceptions will sometimes leak through the cracks,
as is with all programming errors. The key is to reduce its
frequency by taking care to think through the logic and the
possible edge cases that might occur.&lt;/p&gt;

&lt;p&gt;As a real-life anecdote, one of the duplication bugs I had
to deal with was a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; because I didn’t
account for the fact that both dispenser and dropper blocks
could fire &lt;code class=&quot;highlighter-rouge&quot;&gt;BlockDispenseEvent&lt;/code&gt;. What happened was an
exception occurred before the item was supposed to be
removed from the dispenser, which means that it would get
dispensed as a result of the event failing to be cancelled,
and the item would not leave the dispenser, which allowed
people to have an infinite item generator.&lt;/p&gt;

&lt;h1 id=&quot;nullpointerexceptions-galore&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;s Galore&lt;/h1&gt;

&lt;p&gt;Returning back to the basics, many novice programmers
struggle to use &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryClickEvent&lt;/code&gt; and check items.
As someone who has frequented the Bukkit Forums and the
SpigotMC forums for years on end, I’ve seen countless
threads where &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; is thrown simply from
checking the &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemMeta&lt;/code&gt;. Luckily, these days, it gets
harder and harder to find these threads, thanks to the
efforts to document nullability in the API.&lt;/p&gt;

&lt;p&gt;Back before the more recent API versions, what was &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;
and what wasn’t was basically guesswork that you needed to
keep stored in the back of your mind once you figured it
out. There are plenty of places you can quickly run into
trouble - starting from getting the inventory slot itself
to retrieving the &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemMeta&lt;/code&gt;, to the individual methods
like &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemMeta#getDisplayName()&lt;/code&gt;. This was further
compounded by the inconsistent use of &lt;code class=&quot;highlighter-rouge&quot;&gt;Material#AIR&lt;/code&gt; to
denote an empty/no item. For example, in
&lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerInteractEvent&lt;/code&gt;, I believe that using &lt;code class=&quot;highlighter-rouge&quot;&gt;getItem()&lt;/code&gt;
from the event would return &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; for empty, but
&lt;code class=&quot;highlighter-rouge&quot;&gt;Player#getItemInHand()&lt;/code&gt; would return an &lt;code class=&quot;highlighter-rouge&quot;&gt;AIR&lt;/code&gt; item. In
fact, &lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory#getItem(int)&lt;/code&gt; would return &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; as well
and any setter accepted a &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; item as empty, so the
inconsistent use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AIR&lt;/code&gt; material obviously doesn’t
make a whole lot of sense. Regardless, I digress. The point
is, even for more advanced programmers, the Bukkit
inventory API is still difficult terrain to navigate.&lt;/p&gt;

&lt;p&gt;Honestly the best advice I can really give is find one way
to do things and stick with it. This is a controversial
view for obvious reasons; you should be experimenting and
all that. However, when you are writing code at a
professional level where results are expected and errors
are only tolerable at the very best, you should leave the
experimentation and use what you know works.&lt;/p&gt;

&lt;p&gt;Honestly, you don’t need to take it from my mouth how to
write better code. The “on-board shuttle group” writes
the code that launches astronauts into space. There is no
room for error when human lives are on the line.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the on-board shuttle group produces grown-up software,
and the way they do it is by being grown-ups. It may not be
sexy, it may not be a coding ego-trip — but it is the
future of software. When you’re ready to take the next
step — when you have to write perfect software instead of
software that’s just good enough — then it’s time to grow
up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;a href=&quot;https://www.fastcompany.com/28121/they-write-right-stuff&quot;&gt;They Write the Right Stuff&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This is especially true for an environment like Bukkit
development, where tests end at play testing and software
verification is virtually non-existent. The way you reduce
bugginess is by writing code right - the first time.&lt;/p&gt;

&lt;h1 id=&quot;innocent-looking-code-might-still-fail&quot;&gt;Innocent-looking Code Might Still Fail!&lt;/h1&gt;

&lt;p&gt;Often, it is the most innocuous piece of code that fails.&lt;/p&gt;

&lt;p&gt;Another anecdoate of mine is where a generator which
simply fills an inventory with valuable items such as
mineral (diamond/emerald/etc.) blocks. When it was removed,
it is possible for someone which you’ve given access to
the generator to retain the inventory. Although the
generator was removed, the generator’s inventory was still
open. Because I assumed that the generator was unreachable
after removal, all of the items in the inventory would drop
on the floor so people wouldn’t lose those items. To save a
bit of performance, I didn’t clear any items from the
inventory because it could be arbitrarily big. However,
people doubled their payday by first having a buddy open
the inventory, before removing the generator. The buddy
still has access to all the items that dropped, and
collects both the dropped items as well as the uncleared
inventory.&lt;/p&gt;

&lt;p&gt;The lesson here is simple: don’t make any assumptions about
the code you are writing! It helps to try and write your
code to be &lt;em&gt;correct&lt;/em&gt; the first time around - had I not
simply assumed the inventory would be unreachable, I would
have just cleared everything at the end. If someone
discovers this, it would then just be a UI bug and I’d just
need to make sure to close all of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory#getViewers()&lt;/code&gt; prior to dropping everything.
Don’t prioritize performance over correctness. Ironically,
this was &lt;em&gt;still&lt;/em&gt; not even the end of the story, because
closing the inventories from that collection caused a CME.
If you want to learn more about that, you can check out the
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html&quot;&gt;second installment&lt;/a&gt;
in this series :).&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;While I don’t often get the chance to say this, I hope
you’ve learned something new from my own experiences. I
speak with very people who talk about my blog, so I can
only speculate as to whether actual people are truly being
impacted.&lt;/p&gt;

&lt;p&gt;As is customary at the end of every post in this series,
I leave with the following wisdom from
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code
that is used to control the airplane that you fly on, the
nuclear power plant a few miles from where you live, or the
spacecraft that carries astronauts into orbit. The rules
act like the seat-belt in your car: initially they are
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gathering information and learning is one way to
add to your repertoire of programming knowledge outside of
literally just writing your own personal projects. As you
gain more experience, you will write better and better
software. I promise.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is another one of those “watch out when you’re doing XYZ” rather than a specific thing to do (or not do).</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 5</title><link href="https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 5" /><published>2019-07-02T20:22:15-07:00</published><updated>2019-07-02T20:22:15-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5.html">&lt;p&gt;This isn’t a bugginess lesson, but if you’re ever going to
progress beyond a novice-level plugin developer (or even a
Java developer for that matter), then you’ll need to figure
out how to ensure data integrity.&lt;/p&gt;

&lt;h1 id=&quot;minimize-data-loss-in-case-of-catastrophe&quot;&gt;Minimize Data Loss In Case of Catastrophe&lt;/h1&gt;

&lt;p&gt;This is not a very pointed piece of advice (more on that in
a bit), but the whole idea is to design your plugins around
making sure that as much of your data is kept somewhere
safe so that in the event of a catastrophe, a bad weather 
event knocks out your server, you get hacked, your server
crashes, etc., you can recover at least some, hopefully
most of your data. This isn’t some external threat that you
can hope to avoid, this is &lt;strong&gt;inevitable&lt;/strong&gt;. You cannot hope
to continue avoiding these types of events forever, and 
take it from me, I learned it the hard way.&lt;/p&gt;

&lt;p&gt;If you are writing plugins and getting paid to do so, you
MUST have some sort of mechanism to minimize data loss.
Servers fail all the time; it is not a matter of if, it is
a matter of when. It is not a choice, it is a 
responsibility.&lt;/p&gt;

&lt;h1 id=&quot;how-to-protect-your-data&quot;&gt;How to Protect Your Data&lt;/h1&gt;

&lt;p&gt;The most effective way to minimize data loss is through
autosaving to disk. Autosaving writes a reconstructible
state, which means that the exact properties, settings,
objects, whatever type of data being stored in your plugin
at the exact moment in time can be derived from the data 
that you save. This means that you should act like your 
plugin is calling then &lt;code class=&quot;highlighter-rouge&quot;&gt;onDisable&lt;/code&gt; method without actually
having the server shut down every X minutes. It should not
be up to the developer to decide how long the autosave
interval is, and therefore, this should be configurable.
That being said, 15-30 minutes is a good sweet spot. 
Writing data to disk ensures that the data cannot be lost
if the server itself crashes, or a power outage occurs.
Even if a disk failure occurs, data can sometimes be 
recovered from the disk. Preferably, &lt;em&gt;secure&lt;/em&gt; backups are
made every so often as well, which means that it is 
possible to snapshot the disk state and prevent the 
autosaves from going to waste even if the disk is
inadvertently destroyed, or access to the server is 
completely lost or deleted altogether.&lt;/p&gt;

&lt;p&gt;It is important to note that even autosaves are a point of
failure. For example, the following code is not an 
effective way to save data:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem is that multiple things could possibly go wrong
here. It may not even be possible to open a new 
&lt;code class=&quot;highlighter-rouge&quot;&gt;BufferedWriter&lt;/code&gt; if the OS exhausts the available file 
handles. A more effective solution looks like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way, even if the file cannot be written to, at least
it might possibly be recovered by parsing the log file or
by piping the console output somewhere (the parser of this
data need not be written beforehand, but the data itself 
should at least be available). Additionally, even if 
individual &lt;code class=&quot;highlighter-rouge&quot;&gt;Data#serialize()&lt;/code&gt; methods fail, it will not
prevent other data from being saved.&lt;/p&gt;

&lt;p&gt;Plugins also need to be extremely careful about exceptions
thrown in the &lt;code class=&quot;highlighter-rouge&quot;&gt;onEnable&lt;/code&gt; method. Because errors during 
startup cause plugins to be disabled (often with empty 
data), this means that the data file will be overwritten
because of a parsing error and all the data will disappear.
However, ignoring this error is also problematic because it
will not prevent the plugin from overwriting all of the 
data on shutdown with the new data. There are multiple
avenues to solving this, including backing up every server
startup, using a ring buffer style system where the file
is copied to a (or multiple) temporary files each time, or
by using a log file that records changes rather than a
file which records the singular state of the plugin. The 
most effective solution I personally am aware of is the
second option, where temporary files are used to store a
backup of the data, but only in case an exception occurs:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onEnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This isn’t perfect, because the exception could possibly
stem from the fact that file handles have been exhausted,
so the “safest” option is going with a backup every 
startup, but this is a lightweight solution for what a
rather serious potential issue, so I personally go with it.&lt;/p&gt;

&lt;p&gt;Another useful way to ensure data integrity is to turn off
autorestart. Autorestarting is really helpful and keeps 
players happy when a server goes down due to a one-off 
error, but in the long run, the safest option is to make 
sure that a server that goes down stays down until the 
issue is identified. The issue doesn’t necessarily need to
be entirely resolved (only a band-aid needs to be put over
such as removing a plugin while it is fixed), but ensuring
that plugins do not start up again only to enter an endless
loop of crashing the server and starting it up again will
ensure that the data that is backed up stays until it can
be properly restored and the error can be properly
investigated. For example, if you are saving in the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;onEnable&lt;/code&gt; to the same backup file whenever an exception 
is thrown, then it will do little good for you because the
autorestart might erase both the original and the backup as
well if the original is now empty.&lt;/p&gt;

&lt;p&gt;These are just a few of the pointed pieces of advice I
have. I’m certain that there are more ways to reduce data
vulnerability, but this is a very broad problem that has
a large variety of different solutions.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Just because autosaving is an integral part of maintaining
data integrity does not mean that you need to be paranoid.
However, it does mean that you need to be prudent and look
use extra caution when writing mission-critical portions of
your plugin.&lt;/p&gt;

&lt;p&gt;Again repeating my custom, I leave with the following wisdom
from 
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re tuned in with my blog, you can expect some more
of posts in the “Lessons Learned Debugging” series in the
near future. I don’t have any big projects that I want to
talk about (yet), but if I find or write one, I’ll be sure
to write about that first. As of the writing of this post,
I’m still open to Bukkit development opportunities, so if
you’re hiring, check my 
&lt;a href=&quot;https://agenttroll.github.io/&quot;&gt;main website&lt;/a&gt; under 
“Professional Experience” to see if I’m still looking for
work.&lt;/p&gt;</content><author><name></name></author><summary type="html">This isn’t a bugginess lesson, but if you’re ever going to progress beyond a novice-level plugin developer (or even a Java developer for that matter), then you’ll need to figure out how to ensure data integrity.</summary></entry><entry><title type="html">Implementing PBFT in Java</title><link href="https://agenttroll.github.io/blog/2019/06/23/implementing-pbft-in-java.html" rel="alternate" type="text/html" title="Implementing PBFT in Java" /><published>2019-06-23T17:23:35-07:00</published><updated>2019-06-23T17:23:35-07:00</updated><id>https://agenttroll.github.io/blog/2019/06/23/implementing-pbft-in-java</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/06/23/implementing-pbft-in-java.html">&lt;p&gt;Following up with my &lt;a href=&quot;&quot;&gt;previous post&lt;/a&gt; about one of my 
prior projects, I have another post about yet another
project that I’ve recently finished, 
&lt;a href=&quot;https://github.com/AgentTroll/pbft-java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-pbft&quot;&gt;What is PBFT?&lt;/h1&gt;

&lt;p&gt;PBFT stands for Practical Byzantine Fault Tolerance. PBFT
is an algorithm developed by Miguel Castro and Barbara
Liskov that allows replicated systems to tolerate what are
called Byzantine faults. Since some readers don’t know what
a Byzantine fault is, here is what Wikipedia has to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Byzantine fault […] is a condition of a computer 
system, particularly distributed computing systems, where 
components may fail and there is imperfect information on 
whether a component has failed. The term takes its name 
from an allegory, the “Byzantine Generals Problem”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Wikipedia page on the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Two_Generals%27_Problem&quot;&gt;“Two Generals’ Problem”&lt;/a&gt;
has a good description of what the Byzantine General’s
Problem is, but the general gist is that a consensus has
to be made upon a decision or computation where one of the
parties involved may be compromised, may be malicious, or
could be faulty. When applied to computing systems, a set
of replica computers will need to decide on the correct
course of action even though other computers may send 
erroneous data or not even send any data at all.&lt;/p&gt;

&lt;p&gt;The PBFT algorithm is described by the paper authored by
Castro and Liskov, which can be read
&lt;a href=&quot;http://pmg.csail.mit.edu/papers/osdi99.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;client-implementation&quot;&gt;Client Implementation&lt;/h1&gt;

&lt;p&gt;I personally used a multitude of different sources when
developing this project as an abstraction to the PBFT 
algorithm, and even then, I am still confused on whether or
not I even got everything down correctly.&lt;/p&gt;

&lt;p&gt;For simplicity, I will refer to the configured fault 
tolerance to be &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; as in the PBFT paper, the number of
replicas that can have Byzantine faults while still 
allowing a safe consensus to be reached.&lt;/p&gt;

&lt;p&gt;The client implementation is very, very simple. Only two
messages need to be implemented, the sending and receiving
capability for one and the other, and the timeout.&lt;/p&gt;

&lt;p&gt;Requests are identified by their timestamp value, which 
count up from 0 instead of using the actual system clock 
since it is possible to send more than one message during 
the time it takes for &lt;code class=&quot;highlighter-rouge&quot;&gt;System#currentTimeMillis()&lt;/code&gt; to 
update its value.&lt;/p&gt;

&lt;p&gt;Once a REQUEST is sent to what is believed to be the 
primary, users will call the &lt;code class=&quot;highlighter-rouge&quot;&gt;Client#checkTimeout()&lt;/code&gt; method
in a loop, which will check to make sure that a REPLY is 
received within the configured timeout. If it isn’t, then a
REQUEST is then multicasted to all replicas.&lt;/p&gt;

&lt;p&gt;The client continuously waits for a REPLY message from 
replicas. As soon as it receives the &lt;code class=&quot;highlighter-rouge&quot;&gt;f + 1&lt;/code&gt;th REPLY 
message that matches a stored REPLY, then the result is
accepted and the timer is stopped.&lt;/p&gt;

&lt;h1 id=&quot;replica-implementation&quot;&gt;Replica Implementation&lt;/h1&gt;

&lt;p&gt;Replicas are vastly more complicated and have tons of 
moving parts that need to be considered for each message.&lt;/p&gt;

&lt;p&gt;In short, what a replica does is wait for REQUEST messages
and then go through a process to ensure that all other 
replicas also agree to go through the same process. Then,
it will send a REPLY message with the computed result. If
the replica waits for too long, it will try to vote out the
primary with a VIEW-CHANGE message in hopes of getting 
things going again.&lt;/p&gt;

&lt;h4 id=&quot;receiving-request&quot;&gt;Receiving REQUEST&lt;/h4&gt;

&lt;p&gt;If the replica already has already responded to a REQUEST
with the same client ID and the same timestamp, then it
means that the operation has already completed and it will
simply resend the cached REPLY for that operation.&lt;/p&gt;

&lt;p&gt;When a replica receives a REQUEST message that it didn’t
know about before, it will start a timer that will ensure
that things keep moving. If the replica isn’t the primary,
then it simply redirects the message to the primary 
instead.&lt;/p&gt;

&lt;p&gt;If the replica is a primary, then it will ensure that the
message shouldn’t be bufferred. If the number of requests
currently being handled is greater than the configured 
buffer limit, the primary puts it into a FIFO queue to be
executed at a later time.&lt;/p&gt;

&lt;p&gt;The primary then sends a PRE-PREPARE to all non-primaries
and relays the request to them, adding the sent message
to its log.&lt;/p&gt;

&lt;p&gt;Replicas identify accepted REQUEST messages using the
current view number and the sequence number that the 
primary assigns to it. The primary adds the multicasted
PRE-PREPARE message to a new ticket for that REQUEST.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;, I assume that the REQUEST message is 
included with the PRE-PREPARE message to simplify the 
encoding process. Users can decide whether or not to follow
suit, they can always set the REQUEST to null and utilize 
their own thing if they want to follow the an orthodox
implementation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;receiving-pre-prepare&quot;&gt;Receiving PRE-PREPARE&lt;/h4&gt;

&lt;p&gt;When a non-primary receives a PRE-PREPARE, it ensures that
the view number is equal to the view that replica currently
is in, and that the message sequence ID is between the 
specified water marks, otherwise it ignores the message.
The replica then checks to ensure the digest is correct, if
the replica already has a matching ticket (one that has the
same view number and sequence number), then it will also
check to make sure that the new PRE-PREPARE message doesn’t
have a digest different from the previous PRE-PREPARE. If
these two conditions aren’t met, then the replica also 
ignores the message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Digests are &lt;code class=&quot;highlighter-rouge&quot;&gt;byte[]&lt;/code&gt; arrays in &lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;. Additionally,
ticketing is used because messages could arrive 
out-of-order, so I’m not sure if the PBFT paper specifies
that I should check the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt;
states every single time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having accepted the PRE-PREPARE message, the replica then
creates a new ticket. It then adds the PRE-PREPARE message 
to the log, and multicasts a PREPARE message to all known 
replicas, also adding that PREPARE message to the log.&lt;/p&gt;

&lt;p&gt;The replica will then attempt to check on the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt; states, executing the response to 
those states as necessary. More on that below.&lt;/p&gt;

&lt;h4 id=&quot;receiving-prepare&quot;&gt;Receiving PREPARE&lt;/h4&gt;

&lt;p&gt;When a replica receives a PREPARE, it will also check to
make sure that the view number is equal to the current view
number and the sequence number is within the water marks,
otherwise ignoring the message. It will create a new ticket
if one does not exist already, and append the PREPARE to
the log.&lt;/p&gt;

&lt;p&gt;The relevant condition is &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;. The ticket will scan
the messages added to the log for that ticket (again, the
same view number and the same sequence number). When it
hits a PRE-PREPARE, it will scan the log to check for
matching PREPARE messages whose digests also match. If
the scan hits the &lt;code class=&quot;highlighter-rouge&quot;&gt;2f&lt;/code&gt;th matching PREPARE message, then
the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; state becomes true and the replica responds
by multicasting a COMMIT message, adding the COMMIT to the
log.&lt;/p&gt;

&lt;p&gt;The replica will then attempt to check on the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt; states, executing the response to 
those states as necessary.&lt;/p&gt;

&lt;h4 id=&quot;recieving-commit&quot;&gt;Recieving COMMIT&lt;/h4&gt;

&lt;p&gt;When a replica receives a COMMIT, it will also check to
make sure that the view number is equal to the current view
number and the sequence number is within the water marks,
otherwise ignoring the message. It will create a new ticket
if one does not exist already, and append the COMMIT to
the log.&lt;/p&gt;

&lt;p&gt;The relevant condition here is &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt;. If we
know that the ticket has reached the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; phase, we
don’t need to rescan to make sure this is true. The ticket
then looks for matching COMMIT messages, and if it reaches
the &lt;code class=&quot;highlighter-rouge&quot;&gt;2f + 1&lt;/code&gt;th COMMIT, it will then execute the 
operation found from the REQUEST message. A REPLY message 
is sent back to the client with the result of the 
operation, and the ticket is then moved to the cache in 
case the same REQUEST is sent again. The client then stops
the timer for that REQUEST, if available.&lt;/p&gt;

&lt;p&gt;The replica will then attempt to check on the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt; states, executing the response to 
those states as necessary.&lt;/p&gt;

&lt;p&gt;If the sequence number is evenly divisible by some
configured number, then the replica will also multicast a
CHECKPOINT message and add it to its log.&lt;/p&gt;

&lt;h4 id=&quot;receiving-checkpoint&quot;&gt;Receiving CHECKPOINT&lt;/h4&gt;

&lt;p&gt;When a replica receives a CHECKPOINT, it will add it to its
log. If the log has &lt;code class=&quot;highlighter-rouge&quot;&gt;2f + 1&lt;/code&gt; CHECKPOINT messages from
itself and other replicas with the same sequence number as
the one that was received, it will then perform a garbage
collection by throwing away cached REPLY messages less than
or equal to the checkpoint, all CHECKPOINT messages below
that checkpoint, and will update the low water mark to the
checkpoint and the high water mark to the checkpoint plus
the configured checkpoint interval.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt; organizes CHECKPOINT messages by the sequence
number, but I &lt;em&gt;believe&lt;/em&gt; that it should be based on any 
CHECKPOINT with a sequence number greater than the given
checkpoint to make it stable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;what-about-view-changes&quot;&gt;What About View-changes?&lt;/h4&gt;

&lt;p&gt;Replicas will check the timers for all received REQUESTS in
a loop. If the timer expires, then the replica will skip 
all the other timers and become “disgruntled.” It will then
multicast a VIEW-CHANGE message to vote all replicas into
view &lt;code class=&quot;highlighter-rouge&quot;&gt;v + 1&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; represents the current view number.
The timeout will then double, and the timeout check loop 
continues. If it times out again, the VIEW-CHANGE will then
vote for &lt;code class=&quot;highlighter-rouge&quot;&gt;v + 2&lt;/code&gt; and the time doubles yet again, and so on.
A disgruntled replica only accepts 3 messages: CHECKPOINT,
VIEW-CHANGE, and NEW-VIEW. All other messages are ignored.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The PBFT algorithm specifies that the timeout shouldn’t 
double, but rather should increase by increments of the 
original timeout, so instead of 1T -&amp;gt; 2T -&amp;gt; 4T, the paper
specifies that it should be 1T -&amp;gt; 2T -&amp;gt; 3T if &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; 
represented the original timeout&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;receiving-view-change&quot;&gt;Receiving VIEW-CHANGE&lt;/h4&gt;

&lt;p&gt;When the “new primary” (the primary for view &lt;code class=&quot;highlighter-rouge&quot;&gt;v + 1&lt;/code&gt;)
receives a VIEW-CHANGE message, it will add it to its log.
If there are &lt;code class=&quot;highlighter-rouge&quot;&gt;2f&lt;/code&gt; VIEW-CHANGE messages in the log from
different replicas, then the new primary will then 
multicast a NEW-VIEW message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Technically, a multitude of items aren’t supposed to be 
included in the actual NEW-VIEW message, however, again,
for encoding simplicity, &lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt; requires that the
NEW-VIEW message includes the full checkpoint proofs as
well as full PRE-PREPARE messages. If a more orthodox
implementation is desired, users are encouraged to add
their own messages to retrieve missing REQUESTs and
CHECKPOINTs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the replica isn’t the “new primary,” it will also add
the message to its log, but if it has &lt;code class=&quot;highlighter-rouge&quot;&gt;f + 1&lt;/code&gt; VIEW-CHANGE
messages in its log already from different replicas, then
it will “bandwagon” and also multicast a VIEW-CHANGE for
the new view as well.&lt;/p&gt;

&lt;h4 id=&quot;receiving-new-view&quot;&gt;Receiving NEW-VIEW&lt;/h4&gt;

&lt;p&gt;When a replica receives a NEW-VIEW message is received by a
primary, it will perform a garbage collection by removing
the VIEW-CHANGE messages still in the log and clear all
pending requests from the previous view. If the lowest
proven checkpoint it receives is greater than the current
low water mark, then the checkpoint is upgraded, the proof
is inserted into the log, and a garbage collection is done
as if a checkpoint was proven by CHECKPOINT messages.&lt;/p&gt;

&lt;p&gt;The replica then looks through all of the PRE-PREPARE 
messages, multicasting a corresponding PREPARE message
for them once the digest is checked with one generated for
the request. If the operation is &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, then it is a no-op
and skipped. Both PRE-PREPARE and PREPARE messages are
added to the log.&lt;/p&gt;

&lt;p&gt;The replica is then no longer disgruntled, removes all
outstanding timeouts, and then enters the new view.&lt;/p&gt;

&lt;p&gt;The new primary that is multicasting the NEW-VIEW message
does all of the above, skipping the portion that handles
the PRE-PREPARE messages and instead adds those 
PRE-PREPARES to the log without sending a PREPARE.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Most of the details for how I interpreted the PBFT protocol
is laid out here. The finer details of how to structure all
the data structures needed to store the messages and
determine quorum sizes still remain, and my implementation
can be found on GitHub with the link found at the top of
the post. PBFT is sort of like a gateway algorithm, there
are implementations of it like I believe Hyperledger and
other blockchain style applications, but there are other
BFT algorithms as well.&lt;/p&gt;

&lt;p&gt;I was initially interested in (P)BFT reading up on, as my
recent post unsurprisingly suggests, about Space(X).
According to &lt;a href=&quot;https://lwn.net/Articles/540368/&quot;&gt;LWN.net&lt;/a&gt;,
replication is used for avionics control on the Dragon
capsules, and the Byzantine Generals’ Problem is used to
resolve disagreements between the flight computers, so it
is very cool to see how BFT is applied not only to Earth
applications, but also in space as well. My particular
implementation of BFT probably isn’t up-to-par with what
the SpaceX engineers implemented, however. It definitely
wouldn’t be launching anything mission critical.&lt;/p&gt;

&lt;p&gt;I’ll probably go back around to adding new posts in my
“Lessons Learned Debugging” series for another long stretch
until I figure out what other things to talk about.&lt;/p&gt;</content><author><name></name></author><summary type="html">Following up with my previous post about one of my prior projects, I have another post about yet another project that I’ve recently finished, pbft-java.</summary></entry><entry><title type="html">TLE - Tracking Satellites in Space</title><link href="https://agenttroll.github.io/blog/2019/06/22/tle-tracking-satellites-in-space.html" rel="alternate" type="text/html" title="TLE - Tracking Satellites in Space" /><published>2019-06-22T17:23:35-07:00</published><updated>2019-06-22T17:23:35-07:00</updated><id>https://agenttroll.github.io/blog/2019/06/22/tle-tracking-satellites-in-space</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/06/22/tle-tracking-satellites-in-space.html">&lt;p&gt;This is about my &lt;a href=&quot;https://github.com/AgentTroll/fate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fate&lt;/code&gt;&lt;/a&gt;
project, something I finished in August of last year. I’ve
been on a long journey with some other Java-related
projects more recently, but I’d simply like the chance to
go back to one of my most significant C projects I’ve ever
written. I think it would also be a good chance to revisit
what I learned in the process of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;fate&lt;/code&gt; as well,
because Tim Dodd of Everyday Astronaut posted a &lt;a href=&quot;https://youtu.be/kB-GKvdydho&quot;&gt;video
recently&lt;/a&gt; that had some
discussion about inclination and azimuth, and despite
wrangling with that for weeks to understand how it worked,
I still had to pause the video and think through what he
had said.&lt;/p&gt;

&lt;h1 id=&quot;high-level-overview&quot;&gt;High-level Overview&lt;/h1&gt;

&lt;p&gt;The project is actually very simple on the surface, if you
have the most recent TLE (more specifically 3LE) data, then
you can input that into the command line and every second,
some output will be printed to show you above what point
the satellite is as well as where to point a telescope or
your eyes to find the object in the sky.&lt;/p&gt;

&lt;h1 id=&quot;what-is-tle&quot;&gt;What is TLE?&lt;/h1&gt;

&lt;p&gt;TLE stands for two-line element set. You’ll actually notice
that I use 3LE, which stands for 3-line element set, and it
is &lt;em&gt;exactly&lt;/em&gt; the same, save for the fact that a 3LE set has
an additional line at the top that states the name of the
satellite. This is what a 3LE set looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 ISS (ZARYA)
1 25544U 98067A   19174.05036204  .00001525  00000-0  33398-4 0  9995
2 25544  51.6442 332.2030 0008185  74.7737  30.3832 15.51219884176168
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A TLE set would just be the same thing but with the line
starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; removed. For the purposes of
making things easier to understand, I’ll primarily refer
to both 3LE and TLE as just TLE.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Two-line_element_set&quot;&gt;Wikipedia page&lt;/a&gt;
for TLE sets is actually surprisingly helpful and
informative. The main gist is that TLE is a way of
communicating the position and motion of a satellite
orbiting the Earth in as few numbers as possible. TLE sets
are readily available from &lt;a href=&quot;https://www.space-track.org/#/tle&quot;&gt;SpaceTrack.org’s TLE search
page&lt;/a&gt;, and you can look
for satellites in the &lt;a href=&quot;https://www.space-track.org/#/catalog&quot;&gt;satellite catalog&lt;/a&gt;.
The U.S. Air Force 18th Space Control Squadron produces
the TLE data sets by using a variety of sensing techniques
and calculating the TLE set data for publication on the
SpaceTrack website.&lt;/p&gt;

&lt;p&gt;Here are some additional reading items you might find
helpful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.space-track.org/documentation#/faq&quot;&gt;FAQ page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.space-track.org/documentation#tle&quot;&gt;TLE format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.space-track.org/documentation#legend&quot;&gt;Terminology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;decoding-tle&quot;&gt;Decoding TLE&lt;/h1&gt;

&lt;p&gt;It’s all well and good that we have the data in TLE format,
but how can that data be translated into usable numbers
that show us where to point a telescope for example?&lt;/p&gt;

&lt;p&gt;The first step is to refer to
&lt;a href=&quot;https://www.celestrak.com/NORAD/documentation/spacetrk.pdf&quot;&gt;SpaceTrack Report #3&lt;/a&gt;.
I’ll let the author(s) summarize:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The NORAD element sets [TLE sets] are “mean” values
obtained by removing periodic variations in a particular
way. In order to obtain good predictions, these periodic
variations must be reconstructed (by the prediction model)
in exactly the same way they were removed by NORAD. Hence,
inputting NORAD element sets into a different model (even
though the model may be more accurate or even a numerical
integrator) will result in degraded predictions. The NORAD
element sets must be used with one of the models described
in this report in order to retain maximum prediction
accuracy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially, the report lays out the mathematical models
for reconstructing the orbit of a particular satellite
from the data given by the TLE data set. Now there are
5 different models that the report lays out, SGP, SGP4/8
and SDP4/8. These are collectively known as “simplified
perturbation models” and take into account atmospheric
drag, gravitational drag caused by the Earth’s oblate
shape, the Earth’s spin, and various other factors in order
to predict the motion of the satellite over time.&lt;/p&gt;

&lt;p&gt;Since my primary goal was to figure out the position of
the International Space Station, I selected SGP4. As far as
I am aware, SGP4 and SDP4 are the most commonly used
models, this can be checked with the &lt;code class=&quot;highlighter-rouge&quot;&gt;MEAN_ELEMENT_THEORY&lt;/code&gt;
entry for each satellite entry’s OMM data.&lt;/p&gt;

&lt;p&gt;Translating all of the formulae into working C code was
not super challenging. There is even working FORTRAN that
I referred to whenever I was having trouble figuring out
what the intent of a formula was. However, there are quite
a few variable values that are missing as well as this
part:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Solve Kepler’s equation for (E + ω)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and the changes made to the model with a perigee at
different distances, which really confused me. That being
said, combined with looking at the FORTRAN listings on
SpaceTrack Report #3 as well as with the LizardTail website
&lt;a href=&quot;https://www.lizard-tail.com/isana/tle/lib/sgp4.js&quot;&gt;source&lt;/a&gt;
and the
&lt;a href=&quot;https://www.celestrak.com/publications/AIAA/2006-6753/AIAA-2006-6753.pdf&quot;&gt;Revisiting Spacetrack Report #3&lt;/a&gt;
code listings in the appendix, I was able to reconstruct
the entire mathematical model in C code with most of the
constants updated to the modern values. I don’t think it is
entirely perfect, but the numbers it produces look pretty
correct to me nonetheless.&lt;/p&gt;

&lt;p&gt;Now if you ask me, I’d say that the finer details of the
model itself aren’t actually that important. I can’t say
for sure what the purpose of each and every calculation is.
Again, the model takes into account the many different
variables that affect the gravitational pull and drag
experienced by a satellite, but that is as far as the
extent of my knowledge about the perturbation models goes.&lt;/p&gt;

&lt;p&gt;(Apologies to those readers who may have clicked on this to
get an understanding of how the perturbation models work,
that’s simply something I never even needed to know to
implement the model in code. If anyone does understand, I’d
love to learn)&lt;/p&gt;

&lt;h1 id=&quot;conversion-between-coordinate-systems&quot;&gt;Conversion Between Coordinate Systems&lt;/h1&gt;

&lt;p&gt;Now having implemented the SGP4 model, you might think that
we can now extract the data we need. Not so. The SGP4 model
produces 2 vectors, specifying the position and velocity
(meters per second) of the satellite. &lt;code class=&quot;highlighter-rouge&quot;&gt;fate&lt;/code&gt; actually
provides an additional 2 vectors called “unit orientation
vectors.” These are used  to derive the position and
velocity vectors.&lt;/p&gt;

&lt;p&gt;The problem is that the reference frame for the
position vector uses the ECI coordinate grid, which means
that we get 3 values in X, Y, and Z. This doesn’t help me,
because all I want to know is latitude and longitude to the
ISS.&lt;/p&gt;

&lt;p&gt;I won’t go into specifics, but these three articles are
extremely informative and detailed, and even an idiot like
myself was able to understand what is being discussed. I
highly recommend reading the entirety of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.celestrak.com/columns/v02n01/&quot;&gt;Orbital Coordinate Systems, Part I&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.celestrak.com/columns/v02n02/&quot;&gt;Orbital Coordinate Systems, Part II&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.celestrak.com/columns/v02n03/&quot;&gt;Orbital Coordinate Systems, Part III&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As far as the high-level overview goes, it is worth taking
a look at what ECI really is. ECI stands for
“Earth-centered inertial,” Earth-centered meaning that the
origin is at the center of the Earth and inertial meaning
that it doesn’t move with the rotation of the Earth itself.&lt;/p&gt;

&lt;p&gt;Calculating the look angle in azimuth rotation from true
north and inclination angle from the horizon is relatively
complex because you need to turn your own latitude and
longitude into ECI coordinates as well and utilize some
trigonometry to determine the angle created between the
coordinates. Not so hard, right? Unfortunately, the
complication comes from the fact that the Earth spins,
causing a number of issues. Firstly, this means that the
Earth is not a perfect sphere; it is in fact an oblate
spheroid that bulges slightly at the equator. Because the
standard latitude and longitude account for the ellipsoidal
shape of the Earth, they are said to be geodetic. On the
other hand, ECI considers the Earth as a perfect sphere.
If that wasn’t enough, the Earth’s spin also means that
your position is dependent on time.&lt;/p&gt;

&lt;p&gt;In order to calculate everything, the current time is
taken, and then converted to a single Julian date. This is
then converted to Greenwich Mean Sidereal Time (GMST),
which allows one to determine the rotation of the Earth
without the fluctuations in a solar day. This solves the
second problem, locating the observer taking into account
the Earth’s rotation. Now, we can use trigonometry to
convert from the geodetic latitude and longitude to the
geocentric ECI coordinates. As a matter of fact, the
implementation of this part
&lt;a href=&quot;https://github.com/AgentTroll/fate/blob/70311dab1664ffa3278c4af0e3f8f96f859f9efc/eci.c#L12-L22&quot;&gt;the implementation&lt;/a&gt;
looks deceptively simple. Now that we’ve solved both
problems, we then have the coordinates of both the observer
and the coordinates of the satellite in the same reference
frame. Since both are in ECI coordinates, we can just use
simple trigonometry to determine the angle which to point
an instrument or the angle to look at in order to locate
the satellite.&lt;/p&gt;

&lt;p&gt;Calculating the position of the satellite above the Earth
(called the sub-point) is a bit more simple. Essentially,
we need to reverse the process of finding look angle and
convert ECI into geodetic coordinates. Because longitude
runs parallel to the Earth’s oblateness, we only need to
factor in the current time in GMST to determine the Earth’s
rotation. Then, we can compute the longitude with trig.
To calculate geodetic latitude, we first calculate the
geocentric latitude, which is rather straightforward trig.
Since latitude is affected by the Earth’s oblateness, we
then run a transformation which moves the angle closer
and closer to geodetic latitude, until the diffence in
improvement to the value becomes smaller than is worth
calculating. This value is then close enough to the
geodetic latitude to accept.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This has only been a high-level overview of the
calculations needed to convert the available data into a
usable format, and then converting that format into
something that is understandable, like geodetic latitude
and longitude, and the look angles. I myself don’t even
know all of the specifics. Working on this project was a
fascinating insight into the work done by astrophysicists
and mission planners to determine how to get satellites and
rockets into the correct orbits, and not only that, but to
track them and create models for the orbital mechanics that
affect the motion of the satellites through space.&lt;/p&gt;

&lt;p&gt;Not only do I not usually talk about the C language, but I
didn’t really go into any specifics of it in this
particular blog post. That being said, I did talk a little
bit about astronomy and space, which are both topics that
I’m very curious to learn more about. I’m sure that every
one of us watched a rocket launch, watched Neil Armstrong
take humanity’s first steps on another planet, or simply
read the news about the Opportunity rover. I’m absolutely
certain that others have been inspired by spaceflight and
can relate to wanting to advance space exploration in the
future, if not the present.&lt;/p&gt;

&lt;p&gt;I, for one, certainly would like to.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is about my fate project, something I finished in August of last year. I’ve been on a long journey with some other Java-related projects more recently, but I’d simply like the chance to go back to one of my most significant C projects I’ve ever written. I think it would also be a good chance to revisit what I learned in the process of writing fate as well, because Tim Dodd of Everyday Astronaut posted a video recently that had some discussion about inclination and azimuth, and despite wrangling with that for weeks to understand how it worked, I still had to pause the video and think through what he had said.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 4</title><link href="https://agenttroll.github.io/blog/2019/06/17/lessons-learned-debugging-part-4.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 4" /><published>2019-06-17T23:26:40-07:00</published><updated>2019-06-17T23:26:40-07:00</updated><id>https://agenttroll.github.io/blog/2019/06/17/lessons-learned-debugging-part-4</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/06/17/lessons-learned-debugging-part-4.html">&lt;p&gt;I’m bored, let’s write another blog post, see if I can
turn my boredom into something helpful for other
people.&lt;/p&gt;

&lt;h1 id=&quot;avoid-using-hardcoded-strings&quot;&gt;Avoid Using Hardcoded Strings&lt;/h1&gt;

&lt;p&gt;While this may be controversial, it is my opinion that
production-quality code should never have magic String
values, or you should at least never use quotes if you are
not assigning a constant.&lt;/p&gt;

&lt;p&gt;A magic String is a raw &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;string value&quot;&lt;/code&gt; that you pass
directly to a a method for example. They are called “magic”
because the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;string value&quot;&lt;/code&gt; magically makes the code work.
It may not be entirely clear what the purpose of the String 
is, or why the String has the value that it does when you
are doing code review.&lt;/p&gt;

&lt;p&gt;Firstly, production-quality code should essentially have no
errors due to a misspelled String constant. String 
constants, especially ones that are long or used multiple
times are commonly misspelled. If you extract magic Strings
into a constant, you can reuse the constant multiple times
so long as you ensure that the original assigned constant
is spelled correctly. Pulling Strings into a constant
forces you to slow down and focus on the task of writing
the constant itself, which reduces the chance of making
spelling mistakes. It is incredibly disappointing when the
project has a few spelling errors here and there that make
the development cycle that much longer to fix for a rather
trivial issue that can be entirely avoided.&lt;/p&gt;

&lt;p&gt;Secondly, always using &lt;code class=&quot;highlighter-rouge&quot;&gt;static final&lt;/code&gt; constants forces you
to place them at the top of the file, which means that it
is easier for you to look over each String and review the
spelling, capitalization, etc. You can go over all your
Strings at once if you have them in a single class holding
all constants, so code review is extremely easy.&lt;/p&gt;

&lt;p&gt;Finally, using constants allows you to make your code 
easier to understand and extensible. By having named 
constants take the place of magic Strings, the constant
name can be used to document the purpose of the code. For
example, examine the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reply&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What do you think the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;reply&quot;&lt;/code&gt; String does? Now examine
the code when the magic String value is replaced with a
constant:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REPLY_FORMAT_CFG_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;reply&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REPLY_FORMAT_CFG_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now when you read over the code, you understand that the
String is actually a configuration key that specifies the
format for a reply message. Constant names give context and
help programmers avoid mistakes by identifying the purpose
of the value, which will help avoid copy-paste errors. If
you wanted to change the String in the future, you will be 
able to easily find the constant and change all the uses of
that particular constant as well.&lt;/p&gt;

&lt;p&gt;As always, rules do have exceptions, and there are places
where a constant name is probably extra work. I myself
don’t even use constants that often for Strings, even 
though I should definitely do it more. For example, when
I am writing a configuration file wrapper, I will probably
forgo with the constants, since configuration keys are
pretty unique, their usage is pretty clear, I know myself
and my peers probably can tell the intent of the String,
and I’m only using it once, in the wrapper file itself.
That being said, I do make copy-paste mistakes as well as
mispell the config key names sometimes, both issues that
I could avoid by always using constants instead of using a
magic String value.&lt;/p&gt;

&lt;p&gt;In short, it may seem like extra work, but having a policy
to reduce the usage of magic Strings, and as a matter of
fact, magic values in general (numbers are even more 
difficult to guess the purpose of), will reduce the chance
of making mistakes in this area as well. You get out what
you put in, in a way.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I usually put a few ending thoughts here, but there’s not
really much to end on today.&lt;/p&gt;

&lt;p&gt;As is customary, I leave with the following wisdom from 
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve been doing a little but of Bukkit stuff, a little bit
of Java-general stuff here and there, I might do a 
C-related post later on. I’ve never really talked about my
interest in astronomy so a little bit about how my
&lt;a href=&quot;https://github.com/AgentTroll/fate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fate&lt;/code&gt;&lt;/a&gt; works would be
a good start.&lt;/p&gt;

&lt;p&gt;I’ve also recently finished my 
&lt;a href=&quot;https://github.com/AgentTroll/pbft-java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;&lt;/a&gt;
project as well, and I’m eager to talk about the different
decisions I made over the course of the project.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m bored, let’s write another blog post, see if I can turn my boredom into something helpful for other people.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 3</title><link href="https://agenttroll.github.io/blog/2019/06/03/lessons-learned-debugging-part-3.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 3" /><published>2019-06-03T18:48:55-07:00</published><updated>2019-06-03T18:48:55-07:00</updated><id>https://agenttroll.github.io/blog/2019/06/03/lessons-learned-debugging-part-3</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/06/03/lessons-learned-debugging-part-3.html">&lt;p&gt;Been another while since I’ve last written something, so
here goes for another post in the series.&lt;/p&gt;

&lt;h1 id=&quot;keep-method-line-counts-to-30-lines-or-less&quot;&gt;Keep method line counts to 30 lines or less&lt;/h1&gt;

&lt;p&gt;As a general rule of thumb, your methods should probably
never, ever exceed 30 SLOC. As a matter of fact, this is
one of the rules from the “The Power of Ten” article I’ve
been referencing at the end of every post in this series:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rule: No function should be longer than what can be 
printed on a single sheet of paper in a standard reference 
format with one line per statement and one line per
declaration. Typically, this means no more than about 60 
lines of code per function.&lt;/p&gt;

  &lt;p&gt;Rationale: Each function should be a logical unit in the 
code that is understandable and verifiable as a unit. It is 
much harder to understand a logical unit that spans 
multiple screens on a computer display or multiple pages 
when printed. Excessively long functions are often a sign 
of poorly structured code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While this rule does say that you can use a maximum of 60
lines per method, I myself recommend using 30 lines. “The
Power of Ten” primarily refers to C code, which usually
more verbose than Java is since it requires more 
low-level instructions to do the same thing that the Java
library might provide in a single line. The fact that 
engineers at NASA can launch satellites into space and 
control robots on another planet from right here on Earth
means that you probably can accomplish whatever end-goal
you have in mind without writing any methods exceeding 30
lines of code.&lt;/p&gt;

&lt;h1 id=&quot;rationale-points&quot;&gt;Rationale Points&lt;/h1&gt;

&lt;p&gt;Not all of the points in the rationale make much sense for
us Java developers, however, there same principles still
apply.&lt;/p&gt;

&lt;h4 id=&quot;it-helps-reduce-clutter&quot;&gt;It Helps Reduce Clutter&lt;/h4&gt;

&lt;p&gt;One of the reasons you should do this piggybacks off of the
Part 1 post - keeping your methods below a certain number
of lines helps reduce mental clutter. You can only see a
limited amount of logic before you’ll need to scroll, which
means that you will hide some of the context outside of the
viewport. By keeping the number of SLOC in a method to a 
minimum, you will have a much easier time reviewing your
code as you go along because you know that it is doing one
specific thing. You will boost your productivity because
you aren’t bogged down with which variables you have
initialized and what other logic you need to implement, you
instead focus on the one purpose the method has.&lt;/p&gt;

&lt;h4 id=&quot;keeping-your-methods-short-is-good-design&quot;&gt;Keeping Your Methods Short Is Good Design&lt;/h4&gt;

&lt;p&gt;The second reason is because it is simply good design.
Methods should do exactly one thing and one thing only.
Joshua Bloch (author of &lt;em&gt;Effective Java&lt;/em&gt;, former Google 
Software engineer, current professor at CMU) says that
API designers (which applies here as well) should adhere
to the “Principle of Least Astonishment” 
(&lt;a href=&quot;https://youtu.be/heh4OeB9A-c?t=2910&quot;&gt;How To Design A Good API and Why it Matters&lt;/a&gt;).
This means that when you read the method name, you should
never be surprised by what the method is going to do, i.e.
the method should perform exactly the function it was
designed to do and nothing more. Too often, I will see
novice developers write methods with a generic name that
is doing too much, especially listener methods which are
like super-methods with the utter amount of logic that
needs to be performed for a method that is named something
entirely generic such that you cannot actually &lt;em&gt;tell&lt;/em&gt; what
is going on.&lt;/p&gt;

&lt;h4 id=&quot;splitting-up-your-methods-encourages-documentation&quot;&gt;Splitting Up Your Methods Encourages Documentation&lt;/h4&gt;

&lt;p&gt;Finally, the third reason is that method names can be used
as documentation. If you’re doing a little bit of work that
needs to be explained, you can extract that portion of code
to a method with a descriptive name rather than adding a
comment. For example, I myself am guilty of violating this
lesson a few odd times, one of them involving the code
needed to parse an item lore. The code looks a little bit
like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemMeta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enchantment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ench&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enchantments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enchName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ench&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enchName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sublist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While this snippet looks succinct in its current form,
this portion of code is embedded within dozens of lines of
code above and below. In Java, method calls are essentially
free (or at least so insignificant that if you aren’t an
engineer working at Oracle it isn’t worth optimizing), and
you don’t even need to use a method more than once to have
a method. It costs next to nothing to add another method to
improve readability, reduce clutter, and to document the
code. The improved code would look something like so:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemMeta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseAndTrimLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseAndTrimLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enchantment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ench&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enchantments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enchName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ench&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enchName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sublist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, while reading through &lt;code class=&quot;highlighter-rouge&quot;&gt;#parseLore(ItemMeta)&lt;/code&gt;, you
immediately know what 9 odd lines of code are doing without
having to read over it. As an added bonus, you can focus on 
getting the high-level logic of the &lt;code class=&quot;highlighter-rouge&quot;&gt;#parseLore(ItemMeta)&lt;/code&gt; 
method down right, before moving on to debugging 
lower-level methods such as &lt;code class=&quot;highlighter-rouge&quot;&gt;#parseAndTrimLore()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While this isn’t to say that comments are always bad or
they are always a code smell, but a certain &lt;a href=&quot;https://blog.codinghorror.com/coding-without-comments/&quot;&gt;programming
mantra&lt;/a&gt; 
reasons that commenting is a poor practice because it acts
as a crutch or as an excuse for writing code that isn’t
understandable. If you focus on writing your code so that
it is easily understandable, you will reduce the amount of
bugs in your code because you are forced to slow down and
think through all the moving parts of your code. It will be
easier for yourself as well as other developers to do code
review, because your code is declarative and the intentions
of the developer are more clear. As the article author puts
it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if your feel your code is too complex to understand 
without comments, your code is probably just bad&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;in-practice&quot;&gt;In Practice&lt;/h1&gt;

&lt;p&gt;It is important to note that as is with many rules, there
are exceptions to the rule, both the 30 SLOC limit as well
as getting rid of all your comments. I personally comment
my code all the time, but if I’m breaking 30 SLOC, I better
have a damn good reason for doing so. Otherwise, it is a
good idea to split a super-method into smaller methods.
In the future, if I ever refactor my code or if I need to
modify my super-method to not do something, I can just use
the existing sub-methods, or remove a call to a sub-method
respectively without modifying existing code. This helps
improve extensibility and productivity in the long run,
even if it takes a bit longer now to extract portions
of your code into a different method.&lt;/p&gt;

&lt;p&gt;Many IDEs will probably have a linter, or if you aren’t
running checkstyle or something, you can use SonarQube or
something of the like attached to your CI pipeline to do
checks on the SLOC of your methods. IntelliJ IDEA’s linter
settings for method length is this particular entry here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://agenttroll.github.io/blog/img/lld-idea-settings.png&quot; alt=&quot;IDEA Settings Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s usually helpful to include along with it lambda length
as well, probably 15-20 lines for lambdas is a little too
much (at that point, pull the lambda entire lambda into a
method, or split the lambda logic into methods).&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is very similar to the 
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/03/20/lessons-learned-debugging-part-1.html&quot;&gt;Part 1&lt;/a&gt;
reasoning in terms of keeping your code short and
organized. The effect of making changing your programming
practices is enormous, and in time, you will start to spend
less time debugging your code. Remember that the majority
of development time is debugging, not actually writing 
anything. If you are saving debugging time and instead
writing your code a little more slowly, but getting it 
right the first time, you are saving a significant amount
of time and costs down the road.&lt;/p&gt;

&lt;p&gt;As is customary, I leave with the following wisdom from 
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While these tips are not necessarily rules that are
responsible for keeping people alive, incorporating the
same philosophy into your programming repertoire will help
you in the long run.&lt;/p&gt;</content><author><name></name></author><summary type="html">Been another while since I’ve last written something, so here goes for another post in the series.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 2</title><link href="https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 2" /><published>2019-04-08T22:03:10-07:00</published><updated>2019-04-08T22:03:10-07:00</updated><id>https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html">&lt;p&gt;One of the recurring problems that will cause you headaches
is the throwing of exceptions where you &lt;em&gt;don’t want them to
be thrown&lt;/em&gt;. Among these exceptions, one of the most elusive
is &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-concurrentmodificationexception&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;?&lt;/h1&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt;, or a CME, as I will
refer to it from here on out, is caused by a change, or a
modification, to a collection while iterating over it.
The most common example of this happening is through
something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reason you cannot do this is because it will cause the
Iterator to lose track of where it is. For example, in a
collection with 10 elements, if you remove the 3rd item and
the iterator is on the 4th element, what is the iterator
supposed to do? Is it supposed to now be on the 5th element
because everything shifts down? Are you supposed to stay on
the same 4th element and shift with the removal of the
item? It’s easier just to avoid the consistency issues and
throw an exception instead. We will get into how to get
around this later.&lt;/p&gt;

&lt;p&gt;A for-each loop is simply syntax sugar over an &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator&lt;/code&gt;.
In an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;, the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator#next()&lt;/code&gt; checks to
ensure that &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; has not changed, where &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; is
an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; that changes whenever the &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; has a
modification (such as through the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;#add(...)&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;#remove(...)&lt;/code&gt;). From the &lt;a href=&quot;https://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/util/ArrayList.java#l884&quot;&gt;ArrayList source&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkForComodification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedModCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConcurrentModificationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expectedModCount&lt;/code&gt; is the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; when the
iterator is constructed, or when the for-loop begins. A CME
is so serious of an exception because often, one can get
away without throwing the exception during testing. If a
collection contains only one element, the &lt;code class=&quot;highlighter-rouge&quot;&gt;modCount&lt;/code&gt; will
change after &lt;code class=&quot;highlighter-rouge&quot;&gt;Itr#checkForComodification()&lt;/code&gt; has been
called, and no CME will be thrown. This is an issue because
one might populate a collection with only a single element
for the purposes of testing. It may be only one player,
because you are the only one testing the plugin, or it may
be only one object that you are storing to make sure that
something works. This is something that tends to slip into
production because it appears to work during testing.&lt;/p&gt;

&lt;p&gt;As a reminder, this can happen with any collection except
those that are thread-safe, so a &lt;code class=&quot;highlighter-rouge&quot;&gt;HashSet&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedList&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; are all succeptible to throwing a CME if you
iterate and modify at the same time.&lt;/p&gt;

&lt;h1 id=&quot;be-wary-of-iteration-and-unforeseen-side-effects&quot;&gt;Be Wary of Iteration and Unforeseen Side-Effects&lt;/h1&gt;

&lt;p&gt;One way to avoid making mistakes is to reuse paradigms that
are well understood, and that is known to already work. On
the opposite end, it is also imperative to recognize
certain paradigms that have a tendency to fail. Iteration
through Collections is one of those paradigms that you
should be on the lookout for. The simplicity of loops and
the monotony of perhaps writing them hundreds if not
thousands of times over can lower one’s guard against them.&lt;/p&gt;

&lt;p&gt;The trick is to proceed with caution when writing loops.
Ensure that you are truly only reading from them, and never
modifying the collection in the process.&lt;/p&gt;

&lt;p&gt;There are a few important exceptions to this where you are
completely safe from CME:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You are using an indexed loop. If you remove
something, you are in control of the loop index, so
it’s up to you to correct for the index of any item
shifting (if you are not using an indexed removal,
that is).&lt;/li&gt;
  &lt;li&gt;You are using a thread-safe collection. Iterators
provided by those classes are only weakly-consistent,
and it can potentially take time for modifications to
show up. If you are simply throwing away elements,
there’s really nothing to worry about.&lt;/li&gt;
  &lt;li&gt;If you are using a safe method of modifying the
collection such as through &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator#remove()&lt;/code&gt; or
using &lt;code class=&quot;highlighter-rouge&quot;&gt;#removeIf(...)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will also need to be cautious of side-effects of
methods called in the loop. For example, the following
snippet of code will throw a CME:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getViewers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closeInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upon initial inspection, it looks completely safe, it
doesn’t appear to be modifying the collection returned by
&lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory#getViewers()&lt;/code&gt;. However, this is another reason
why CMEs are so insidious. &lt;code class=&quot;highlighter-rouge&quot;&gt;HumanEntity#closeInventory()&lt;/code&gt;
interally removes the viewer from the &lt;code class=&quot;highlighter-rouge&quot;&gt;#getViewers()&lt;/code&gt;
collection, and so by closing the inventory, it will modify
the collection while you are still in a loop. This is only
one example from the Bukkit API, but I’m sure there are
more, I’ve just never personally had to deal with them.&lt;/p&gt;

&lt;p&gt;In this case, where you are not able to change the
&lt;code class=&quot;highlighter-rouge&quot;&gt;#closeInventory()&lt;/code&gt; method because it is written in the
API, you would make a copy of that collection and then
iterate over it:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Inventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getViewers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closeInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works because the new collection is a different
&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; and therefore uses a different iterator than
the actual collection of viewers. We can remove items from
the actual collection without affecting the elements in the
copy, and therefore no CME is thrown.&lt;/p&gt;

&lt;p&gt;It is tempting to use a workaround to creating an entirely
new deep copy of the collection, such as by using
&lt;code class=&quot;highlighter-rouge&quot;&gt;Collections#unmodifiableCollection(...)&lt;/code&gt;, or even by using
Google Guava’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterables.concat(...)&lt;/code&gt; to “hack” in a new
iterator. However, the problem is that both of these are
non-solutions because they &lt;em&gt;still depend on the underlying
iterator&lt;/em&gt;. You MUST create a new collection in order for
this to work.&lt;/p&gt;

&lt;h1 id=&quot;other-solutions&quot;&gt;Other Solutions&lt;/h1&gt;

&lt;p&gt;Instances such as the Inventory example don’t come up too
often, and sometimes you just need to run some unrelated
code to process the removed elements, or even just remove
a few elements from a loop outright.&lt;/p&gt;

&lt;p&gt;Nowadays, the most effective solution would be to use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;#removeIf(...)&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can even use this to process the elements that should
be removed if you so wish:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For those of us stuck on Java 7, or for reasons I might not
have forseen, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator#remove()&lt;/code&gt; in order to
do the same thing:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will also allow you to only partially iterate by using
&lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; if you so desire. A shortened form that scopes the
iterator for only a single loop will look like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove-me&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of these code snippets will have the same effect of
removing &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;s starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;remove-me&lt;/code&gt;, so choose
whatever one you see fit. Once again, these will not work
if methods you are calling have the side effect of removing
the element from the collection anyways, such as 
demonstrated in the previous section, so you will be stuck
with having to deep-copy the entire collection for that.&lt;/p&gt;

&lt;p&gt;(I’m not sure why the API designers decided not to produce
a copy of the collection there. In the modern age of
Java 8, I would have personally returned a &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;, but
that luxury didn’t exist when &lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory&lt;/code&gt; was designed.
In fact, there should be no reason really why the returned
collection is mutable, at the very least, it needs to be
unmodifiable because other cleanup procedures need to be
run for someone to actually stop “viewing” an inventory.
Perhaps this could be a PR or something to return a
deep-copy as a defensive programming measure)&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There are solutions to CME, but it is up to the programmer
to actually be vigilant, and to never let their guard down
in spite of the appearance of simplicity of a loop. You
must train yourself to recognize and check yourself when
you are writing loops, because a CME might also slip past
during testing as I’ve discussed before. This paradigm is
the second lesson in this series of posts.&lt;/p&gt;

&lt;p&gt;I leave with the following wisdom from &lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While these tips are not necessarily rules that are
responsible for keeping people alive, incorporating the
same philosophy into your programming repertoire will help
you in the long run.&lt;/p&gt;</content><author><name></name></author><summary type="html">One of the recurring problems that will cause you headaches is the throwing of exceptions where you don’t want them to be thrown. Among these exceptions, one of the most elusive is ConcurrentModificationException.</summary></entry></feed>