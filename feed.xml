<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://agenttroll.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://agenttroll.github.io/blog/" rel="alternate" type="text/html" /><updated>2020-03-23T00:28:57-07:00</updated><id>https://agenttroll.github.io/blog/</id><title type="html">Inside a Troll</title><subtitle>Thoughts of a Java developer</subtitle><entry><title type="html">Lessons Learned Debugging: Part 11</title><link href="https://agenttroll.github.io/blog/2020/03/21/lessons-learned-debugging-part-11.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 11" /><published>2020-03-21T19:54:10-07:00</published><updated>2020-03-21T19:54:10-07:00</updated><id>https://agenttroll.github.io/blog/2020/03/21/lessons-learned-debugging-part-11</id><content type="html" xml:base="https://agenttroll.github.io/blog/2020/03/21/lessons-learned-debugging-part-11.html">&lt;p&gt;I didn’t even realize that I haven’t written a post this
year yet. Event handlers are key components of plugins
because they are used as an entry point to most plugin
logic. Think of plugins like WorldGuard, minigame plugins
and other game features like crates, quests etc. All of
them use event handlers as an intrinsic component of their
primary function. Yet, many plugin developers, even those
who should know better, seem to write event handlers that
break the functionality of other plugins or prevent other
plugins from being able to listen to events.&lt;/p&gt;

&lt;h1 id=&quot;event-handlers-should-play-nice&quot;&gt;Event Handlers Should Play Nice&lt;/h1&gt;

&lt;p&gt;The source for a lot of misunderstanding about how event
handlers work is the &lt;a href=&quot;https://hub.spigotmc.org/javadocs/spigot/org/bukkit/event/EventHandler.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@EventHandler&lt;/code&gt;&lt;/a&gt;
annotation. The purpose of this annotation, first and
foremost, is to mark methods which are to be called by the
plugin manager when events are fired. Secondly, it provides
to options: and &lt;code class=&quot;highlighter-rouge&quot;&gt;priority&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoredCancelled&lt;/code&gt;. While
these options both have defaults, those defaults are not
always correct. In fact, many developers don’t even know
what they do or how changing them can impact other plugins.
Let’s take a look at how using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@EventHandler&lt;/code&gt;
annotation &lt;em&gt;correctly&lt;/em&gt; can help plugins maintain
compatibility with each other.&lt;/p&gt;

&lt;h1 id=&quot;event-priorities&quot;&gt;Event Priorities&lt;/h1&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;priority&lt;/code&gt; option allows developers to tell the plugin
manager when, with respect to other plugin event handlers,
they want the event handler to be called. This can be
thought of as the server storing a list of event handlers
to be called each time the appropriate event is being
called. Changing the event priority can allow you to have
your event handler called prior to other event handlers,
or cede to other event handlers to be called first. This
operates on a per-handler basis, meaning that the priority
of event handlers allows them to be reordered with any
other event handler, regardless of whether they belong to
the same plugin or not.&lt;/p&gt;

&lt;p&gt;The first common misconception about event priority is that
it allows you to detect an event earlier. This is false.
Event handlers with different priorities receive events at
the same time. For example, an event handler listening for
&lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerMoveEvent&lt;/code&gt; will not receive &lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerMoveEvent&lt;/code&gt; any
sooner or respond any faster to a player moving by changing
the priority of the event. What changes with different
priorities is the &lt;em&gt;order&lt;/em&gt; that event listeners are called,
&lt;strong&gt;not&lt;/strong&gt; &lt;em&gt;when&lt;/em&gt;. Ultimately, all events are called with
something like the following line:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Bukkit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPluginManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All event handlers are called by
&lt;code class=&quot;highlighter-rouge&quot;&gt;PluginManager#callEvent(Event)&lt;/code&gt;, so it doesn’t make any
sense for an event to somehow be fired sooner by changing
the event handler priority.&lt;/p&gt;

&lt;p&gt;The second common misconception about event priority is the
order that event handlers are called with respect to their
priority. Many novice developers believe that a
&lt;code class=&quot;highlighter-rouge&quot;&gt;EventPriority.LOW&lt;/code&gt; event handler is handled after
&lt;code class=&quot;highlighter-rouge&quot;&gt;EventPriority.HIGH&lt;/code&gt;, event handler. In fact, the opposite
is true: higher priority events are called &lt;em&gt;later&lt;/em&gt; than
lower priority events. From the JavaDoc page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;First priority to the last priority executed:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;LOWEST&lt;/li&gt;
    &lt;li&gt;LOW&lt;/li&gt;
    &lt;li&gt;NORMAL&lt;/li&gt;
    &lt;li&gt;HIGH&lt;/li&gt;
    &lt;li&gt;HIGHEST&lt;/li&gt;
    &lt;li&gt;MONITOR&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Registered events utilize an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; to organize event
handlers of the same priority, so two event handlers with
&lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL&lt;/code&gt; priority are executed in insertion order or the
same order they were registered in.&lt;/p&gt;

&lt;p&gt;To understand why this is the case, we need to look at why
you would even want to change your event priority in the
first place.&lt;/p&gt;

&lt;p&gt;The purpose of a &lt;code class=&quot;highlighter-rouge&quot;&gt;HIGH&lt;/code&gt; priority event handler is such that
it has a greater precedence over what happens as a result
of an event being fired. As such, it should fire later than
a &lt;code class=&quot;highlighter-rouge&quot;&gt;LOW&lt;/code&gt; priority event handler because it would be able to
override anything that the &lt;code class=&quot;highlighter-rouge&quot;&gt;LOW&lt;/code&gt; priority event handler
does if it so wishes.&lt;/p&gt;

&lt;p&gt;The crux of many compatibility issues is event handlers
being set to the wrong priority. One personal example is a
plugin that creates mines that used an event handler set to
&lt;code class=&quot;highlighter-rouge&quot;&gt;HIGHEST&lt;/code&gt; priority to detect &lt;code class=&quot;highlighter-rouge&quot;&gt;BlockBreakEvent&lt;/code&gt;s. While the
developer might have thought this was a good idea since
they might want to override any other plugin when it comes
to preventing a block in the mine from being broken at
certain times, this prevented me from being able to use
&lt;code class=&quot;highlighter-rouge&quot;&gt;BlockBreakEvent&lt;/code&gt; to change whether or not the event would
be cancelled. There are a number of hacky workarounds to
this (such as changing the event priority of the plugin or
renaming your plugin jar file so your plugin loads later or
incorrectly using the &lt;code class=&quot;highlighter-rouge&quot;&gt;MONITOR&lt;/code&gt; priority), but the point
still stands: using the wrong priority makes it difficult
for other plugins to provide additional features and
functionality.&lt;/p&gt;

&lt;p&gt;So what is the correct event priority to use? These are not
hard and fast rules, obviously, but in general:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you don’t know, leave it alone. The default priority
  is &lt;code class=&quot;highlighter-rouge&quot;&gt;NORMAL&lt;/code&gt;, which is the priority most event handlers
  should use. This is a safe option regardless of what your
  event handler does.&lt;/li&gt;
  &lt;li&gt;If you want other plugins to utilize your plugin’s
  functionality as a principal feature use &lt;code class=&quot;highlighter-rouge&quot;&gt;LOW&lt;/code&gt;. For
  example, protection plugins should use this because
  other plugins depend on whether or not an event is
  allowed (that the event is not cancelled).&lt;/li&gt;
  &lt;li&gt;If you need to override the event handler of another
  plugin, then it is acceptable to use &lt;code class=&quot;highlighter-rouge&quot;&gt;HIGH&lt;/code&gt; priority&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your plugin &lt;strong&gt;requires&lt;/strong&gt; a certain priority for your
event handler to function correctly on its own (i.e. not
because some other plugin is being overridden), &lt;strong&gt;it is
broken&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Avoid using &lt;code class=&quot;highlighter-rouge&quot;&gt;HIGHEST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MONITOR&lt;/code&gt; priorities, even if
you know you are using them correctly. The purpose of a
&lt;code class=&quot;highlighter-rouge&quot;&gt;MONITOR&lt;/code&gt; event priority is for listeners that do not make
any changes to the event, e.g. they don’t cancel or modify
the event the handler listens for in any way. However, this
precludes other plugins from checking for any state changes
to your plugin as a result of an event because the
&lt;code class=&quot;highlighter-rouge&quot;&gt;MONITOR&lt;/code&gt; priority event handlers always run last. As I’ve
already discussed, a &lt;code class=&quot;highlighter-rouge&quot;&gt;HIGHEST&lt;/code&gt; priority event listener
requires other event listeners to use &lt;code class=&quot;highlighter-rouge&quot;&gt;MONITOR&lt;/code&gt; in order
to override them or some other hack, which means that your
plugin impedes other developers from writing correct,
well-defined code.&lt;/p&gt;

&lt;p&gt;Now just to make sure we are all clear, when I say that
something is incorrect, I don’t mean it is disallowed or
that anything bad happens when you do something like
mutate an event inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;MONITOR&lt;/code&gt; event handler. However,
compatibility is based on plugins agreeing to follow the
same “rules.” Breaking these rules without knowing what
you are doing potentially causes other plugins which do
follow these rules to break as well. This is why it is your
responsibility to “play nice” with other plugins by using
the correct event priorities.&lt;/p&gt;

&lt;p&gt;As a side note, I personally believe it is a mistake to use
an enum as an event priority. Event handlers in different
plugins can have many layers, even more than there are enum
constants to use in the &lt;code class=&quot;highlighter-rouge&quot;&gt;EventPriority&lt;/code&gt; enum. The standard
way to implement priorities is through a numbering system,
e.g. low priority events use 0 and high priority events use
something like 100. This allows much wider range of event
handlers to build off the functionality of other plugins.
That being said, I do concede that these issues may still
exist if developers use &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer.MAX_VALUE&lt;/code&gt;, for example,
and that too many event handlers overriding each other
generally are very fragile. Nonetheless, food for thought.&lt;/p&gt;

&lt;h1 id=&quot;ignore-cancelled-events&quot;&gt;Ignore Cancelled Events&lt;/h1&gt;

&lt;p&gt;Another commonly misused (actually unused would probably be
more fitting) option is &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled&lt;/code&gt;. The purpose of
this annotation is for that event handlers to be skipped
when the event is cancelled by some other event handler
running before it. The default value of &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled&lt;/code&gt;
is &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, meaning that the event handler runs regardless
of whether the event has been cancelled or not. This is the
source for some confusion as many people seem to suggest
checking if an event is being cancelled by another plugin
when &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled&lt;/code&gt; is not specified. As a matter of
fact, your event handler will run anyway if you do not
explicitly use &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled = true&lt;/code&gt;, so this advice is
a waste of time at best.&lt;/p&gt;

&lt;p&gt;A great many event handlers lack this option when they
should be using it. For example, event handlers that
rely on player actions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;BlockBreakEvent&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerInteractEvent&lt;/code&gt; that lack &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled = true&lt;/code&gt;
are generally incorrect. These events are commonly
cancelled by a variety of different plugins, especially
protection plugins such as WorldGuard. This means that
logic that should never ever be executed under any
circumstances, such as spawning a boss inside someone
else’s territory or land claim occurs even when a
protection plugin has cancelled the event. This has been
source of multiple bugs in my personal experience. This
allows players the possibility of griefing the server and
potentially throw the server economy into chaos if they
are able to figure out how to exploit this incorrect
behavior when it is not correctly handled by the plugin.&lt;/p&gt;

&lt;p&gt;The usefulness of &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled&lt;/code&gt; comes from the fact
that you can avoid running any extra logic from an event
that is going to be cancelled (i.e. so that it seems that
the event never even occurred in the first place). You can
boost performance by a considerable amount simply through
the reduction in the amount of logic being run on top of
maintaining compatibility with other plugins.&lt;/p&gt;

&lt;p&gt;In my opinion, &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled = true&lt;/code&gt; should be the
default. You need a compelling reason to always run an
event handler even when some other plugin has cancelled
the event. For example, a logging plugin might not want
to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled = true&lt;/code&gt; if they want to log every
action and the result of that action. Some events also
cannot be cancelled, which is another reason why it might
not be necessary to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled = true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In general, prefer to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled = true&lt;/code&gt;. Once
you determine that your event handler actually does need to
run even when the event is cancelled, then you can remove
this option and use the default of &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This has been a pretty text and detail-heavy post, so I
hope the justification behind the correct &lt;code class=&quot;highlighter-rouge&quot;&gt;@EventHandler&lt;/code&gt;
options to use is clear enough at this point. I’m still
working on a few personal projects of mine so the next
blog post probably won’t be out for another while since I’m
trying to juggle school along with my own projects
currently, and potentially some work in the near future if
I find the time for that.&lt;/p&gt;

&lt;p&gt;While event priorities are not often the source for bugs,
the lack of &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled&lt;/code&gt; most definitely has caused a
few major bugs. My personal opinion is that the latter of
the two is not set to a sane default, so always make sure
to &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled = true&lt;/code&gt; first and think about it later,
because it is much easier to debug an event handler that
doesn’t run than it is to debug an event handler that is
incorrectly written to handle an edge-case scenario that
should have been cancelled.&lt;/p&gt;

&lt;p&gt;And once again, I leave with the following quote from
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code
that is used to control the airplane that you fly on, the
nuclear power plant a few miles from where you live, or the
spacecraft that carries astronauts into orbit. The rules
act like the seat-belt in your car: initially they are
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">I didn’t even realize that I haven’t written a post this year yet. Event handlers are key components of plugins because they are used as an entry point to most plugin logic. Think of plugins like WorldGuard, minigame plugins and other game features like crates, quests etc. All of them use event handlers as an intrinsic component of their primary function. Yet, many plugin developers, even those who should know better, seem to write event handlers that break the functionality of other plugins or prevent other plugins from being able to listen to events.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 10</title><link href="https://agenttroll.github.io/blog/2019/12/22/lessons-learned-debugging-part-10.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 10" /><published>2019-12-22T17:19:55-08:00</published><updated>2019-12-22T17:19:55-08:00</updated><id>https://agenttroll.github.io/blog/2019/12/22/lessons-learned-debugging-part-10</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/12/22/lessons-learned-debugging-part-10.html">&lt;p&gt;This is a follow-up of sorts to
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6.html&quot;&gt;Part 6&lt;/a&gt;
of this series of posts. I felt that the topic of inventory
management is so important for most servers that it is
worth taking a look at a few more ways players get access
to items that they shouldn’t have in the first place. These
are logical oversights that developers tend to forget about
which players exploit in order to get access to those
items.&lt;/p&gt;

&lt;h1 id=&quot;there-are-many-ways-to-get-items-you-shouldnt-have&quot;&gt;There Are Many Ways To Get Items You Shouldn’t Have&lt;/h1&gt;

&lt;p&gt;Of course, as I’ve stated before, any exceptions or logical
errors will often lead to “duplication”-style bugs where
players get more of the item than they are supposed to.
However, the lack of logic or logical oversight where you
forget to check something or forget to prevent access to
inventory items are just as serious. As I will also again
reiterate, inventories and item management in Bukkit is a
death trap. There are so many different things that can go
wrong and so many different creative ways to exploit flawed
logic that most developers will need to break a server’s
economy multiple times before becoming proficient in being
able to spot some of these bugs while they are writing
their code. I’ve made a list of some of the common ones
I’ve made myself.&lt;/p&gt;

&lt;h1 id=&quot;item-stacking&quot;&gt;Item Stacking&lt;/h1&gt;

&lt;p&gt;One important way that servers reduce lag is through
stacking items, or using a single item entity to represent
many items of exactly the same type. For example, if you
kill a zombie and it drops 3 rotten flesh items, then a
stacked item automatically prevents 2 of the rotten flesh
items from spawning, instead marking the one item that does
spawn as a “stack of 3.” If the entire server consists of
killing zombies, then you cut the number of entities
globally by 66%, which is a massive performance boost.&lt;/p&gt;

&lt;p&gt;Regardless, developers often forget about this
functionality when dropping items. Items that are supposed
to be behind walls or otherwise not supposed to despawn
can be collected by players if they drop an item of the
same type. Oftentimes, developers try to fix this by
causing the oldest item to become the “stacked” item, but
this doesn’t actually fix it either because then players
who accidentally drop their items will &lt;em&gt;lose&lt;/em&gt; them instead.&lt;/p&gt;

&lt;p&gt;In my personal opinion, it should be the burden of the item
stacking plugin to not mess up and stack up items it
shouldn’t. The scope of these plugins should be limited to
high-impact actions such as mass mob drops rather than
items dropped by players. However, this cannot account for
every possible scenario. There are times where there simply
isn’t a way around items being automatically stacked. In
this case, there must be a way provided to flag items your
plugin drops as “do not stack me.” This usually comes in
the form of a persistent data container or some metadata
added to an item entity. It can also be some collection
provided by the item stacking plugin which other plugins
can use to blacklist items entities from being stacked.
There are no easy catchall solutions for this, and it just
comes with familiarity and anticipating how the actions of
other plugins need to coexist.&lt;/p&gt;

&lt;p&gt;As a minor aside, the same sort of concept exists for item
cleanup plugins as well, which remove item entities over a
sufficient age to prevent item entities spawned an eternity
ago and never being picked up from taking up server memory
and CPU. You need to anticipate that the item you are
dropping might need to be persistent, so you need to both
cancel anything that picks up the item entity, destroys the
item entity, or item cleaning plugins from deleting the
item using any of the 3 different options I discussed above
(persistent data container, metadata or blacklist
collection).&lt;/p&gt;

&lt;h1 id=&quot;custom-inventory-holders&quot;&gt;Custom Inventory Holders&lt;/h1&gt;

&lt;p&gt;I’ve made a fair few plugins where I’ve needed to make my
own “inventory holder.” Things such as blocks that can
store items such as a mineral generator or custom backpacks
that are held by items.&lt;/p&gt;

&lt;p&gt;This is again another place where you need to be careful of
people getting items or losing their items. First of all,
it is imperative that once you remove the inventory holder,
the you must also &lt;em&gt;close the inventory to all viewers as
well&lt;/em&gt;. Otherwise, players with access to the inventory
after you finish managing it effectively extend the
lifetime of the inventory. Things such as automated mineral
generators will continue filling their inventory and
players may continue to place items into the defunct
inventory. One notorious example of this in the real world
is the inventory for managing NPC entities or minion
entities. If you do not close the inventory when the holder
is removed, then you can remove the holder an unlimited
number of times, thus “giving back” to the player whatever
item they used to spawn the holder.&lt;/p&gt;

&lt;p&gt;As far as closing the inventories for each viewer goes,
I’ve written yet another blog post about this in the &lt;a href=&quot;https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html&quot;&gt;2nd
edition&lt;/a&gt;
of this series. Make sure you don’t hit any CMEs in the
closing of inventories, or you may still end up with a
duplication bug!&lt;/p&gt;

&lt;h1 id=&quot;hoppers&quot;&gt;Hoppers&lt;/h1&gt;

&lt;p&gt;Also note that players don’t actually need to have
inventories open to take items away from them! The stock
containers in Minecraft such as chests are can have their
items hoppered out if checks on such exploits are not
implemented by developers. Private chests and sign shops
are especially vulnerable to this kind of exploit.&lt;/p&gt;

&lt;p&gt;Again, the only real way to mitigate this kind of bug is to
realize the fact that most inventory handling code is
almost always flawed the first iteration. You can test all
you want, but if you don’t specifically think about how
players take advantage of gaps in your logic, then you’ll
never be able to test out this bug. Typically, when writing
inventory management code, I get a sense that I haven’t
implemented a sufficient number of protection checks (e.g.
&lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryMoveItemEvent&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BlockBreakEvent&lt;/code&gt; for blocks,
checks for where an inventory holder might be located in
case someone uses pistons, etc).&lt;/p&gt;

&lt;p&gt;People are coming up with new concepts and new ideas every
single day, and there again is no catchall solution to
ensuring that your plugins are exploit free except for cold
hard experience.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It’s disheartening to have to be so vague about many of the
issues I see with my own code and how to fix them. In all
honesty, I myself have not come up with perfect solutions
for them all either. One of my own flaws is that I don’t
actually play Minecraft all that often myself. I do try my
best to be up-to-date with the communities on the servers I
work for, but ultimately, I care a lot more about the code
on its own than the game. I definitely need to work on
that.&lt;/p&gt;

&lt;p&gt;While less relevant to this post since I don’t set any
rules (at least any hard and fast rules), this has been
the typical end note for the past 9 posts, so why not give
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;
another go:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code
that is used to control the airplane that you fly on, the
nuclear power plant a few miles from where you live, or the
spacecraft that carries astronauts into orbit. The rules
act like the seat-belt in your car: initially they are
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">This is a follow-up of sorts to Part 6 of this series of posts. I felt that the topic of inventory management is so important for most servers that it is worth taking a look at a few more ways players get access to items that they shouldn’t have in the first place. These are logical oversights that developers tend to forget about which players exploit in order to get access to those items.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 9</title><link href="https://agenttroll.github.io/blog/2019/10/14/lessons-learned-debugging-part-9.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 9" /><published>2019-10-13T23:27:30-07:00</published><updated>2019-10-13T23:27:30-07:00</updated><id>https://agenttroll.github.io/blog/2019/10/14/lessons-learned-debugging-part-9</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/10/14/lessons-learned-debugging-part-9.html">&lt;p&gt;The problem I usually see with novice developers when they
are debugging is that they test what their code is supposed
to do, but they are suprised when their code works when it
isn’t supposed to.&lt;/p&gt;

&lt;h1 id=&quot;check-your-code-isnt-running-inadvertently&quot;&gt;Check Your Code Isn’t Running Inadvertently&lt;/h1&gt;

&lt;p&gt;It sounds ridiculous, but really think about it for a
moment. The majority of time, you are probably either
writing or fixing code that runs some kind of process or
logic. Only 1 or 2 lines of code are checking if all of
that code is even supposed to be executing. You don’t
actually spend that much time on it. There are a variety of
different places this happens. In my case, I often forget
to check what item type the player is holding whenever a
&lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerInteractEvent&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;BlockPlaceEvent&lt;/code&gt; is being called.
This leads to the event handler logic being executed for
every single interaction, or a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; being
thrown if they aren’t even holding anything. Another place
I’ve been burned by this is when handling
&lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerCommandPreprocessEvent&lt;/code&gt;, where I’m forgetting to
check what command is even being run. Every command then
causes the logic to be executed, even though the intention
was for only one command or one group of commands to be
handled.&lt;/p&gt;

&lt;h1 id=&quot;the-debugging-process&quot;&gt;The Debugging Process&lt;/h1&gt;

&lt;p&gt;A large quantity of bugs I’ve found comes just from playing
the game normally. Usually, when people say they are
“playtesting,” they are referring to testing one specific
thing or plugin. However, my argument is that many bugs
stem from the code running when it isn’t intended to. The
problem with the aforementioned playtesting is that the
tester is specifically looking for something to happen
because they perform some action. The problem with this
targeted style of playtesting is that you can’t tell
whether or not say, placing a specific block, will cause
the plugin to do whatever it needs to do, or if placing
&lt;em&gt;any&lt;/em&gt; block will cause the plugin to do that as well.&lt;/p&gt;

&lt;p&gt;This is why it is important to actually play the game as
if the plugin didn’t exist for a certain time period. Sure,
it takes a little bit more time, and good programmers tend
to not make any mistakes in this area. However, I believe
there is merit to this even if you don’t find any bugs.
When I play someone else’s game and I run into a
game-breaking bug, I sometimes feel like the developers
don’t even play their own game. Bugs that are obscure to a
developer are often obvious to players because it impacts
standard gameplay. When you say,”that didn’t come up in
testing,” of course it fucking didn’t, because if you are
playtesting just to test the plugin, you were playing the
game in the way that a developer would, not a player. Finding
the bugs from a development standpoint is important, but you
need to recognize who your product is targeted towards: the
player. The point of all this is to say that you should play
your own game &lt;em&gt;as a player would&lt;/em&gt; for some fixed minimal
amount of time as a part of the debugging process. It
doesn’t even need to be that long, 15-30 minutes should do
it.&lt;/p&gt;

&lt;p&gt;One example of this is when I was writing a hack around
dispensers firing EXP bottles. However, I didn’t notice
the fact that droppers could also fire EXP bottles as well.
This lead to a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; as I tried to cast a
&lt;code class=&quot;highlighter-rouge&quot;&gt;Dropper&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Dispenser&lt;/code&gt;. In hindsight, this was a stupid
mistake on my part because one should always typecheck
before doing a cast. However, this is something that would
have easily been caught if I just played the game on the
same server that the players used. When I was testing this
plugin in a controlled test server, I couldn’t account for
what other players were doing. Had I instead tested on the
same environment that players were actually using, this
would have easily been found before being deployed. This
brings us to another point about how the testing
environment should as closely replicate the production
evinronment as possible, but that is a topic for another
blog post.&lt;/p&gt;

&lt;h1 id=&quot;fix-your-thinking&quot;&gt;Fix Your Thinking&lt;/h1&gt;

&lt;p&gt;On the other hand, fixing the fact that your code might be
running inadvertently during development rather than
testing requires a lot of practice. It took me almost a
full year to really start hitting all the conditions on a
consistent basis. You need to spend almost as much time
thinking about the conditions at which you are either going
to “do” or “not do” any subsequent actions as the amount of
time you are spending actually writing those actions.&lt;/p&gt;

&lt;p&gt;One thing that helps immensely is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;if-return&lt;/code&gt; blocks
rather than building a long chain of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;s. For example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EventHandler&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Logic&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Prefer something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EventHandler&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Logic&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Writing your code this way forces you to invert your
thinking in a way. Instead of thinking, “if this is the
case, do this,” you need to think “if this shouldn’t
be done, then return.” This is significantly more effective
because it drastically simplifies your logic.&lt;/p&gt;

&lt;p&gt;Sure, it takes up more lines of code. Sure, it’s a little
more writing. However, not only does it separate the
conditions and control flow from your actual execution
logic, it reduces the indentation of your code. It makes it
significantly easier to read. When you isolate your control
flow in this way, it is easier to see what conditions you
are constantly checking for. This makes code review so much
easier. Once you hit some condition that doesn’t hold true,
you don’t need to think about it anymore since you
&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;.  On the other hand, if you have several nested
&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements, the reviewer has to keep all of the
conditions in their head because all of the previous
statements impact all of the logic afterwards as well.
Finally, conditions are common accross many different types
of event handlers and situations. If you can easily build a
repertoire of conditions you are checking really often over
time, it will be harder for you to forget in the future.&lt;/p&gt;

&lt;p&gt;The list of benefits of using &lt;code class=&quot;highlighter-rouge&quot;&gt;if-return&lt;/code&gt; keeps going on
and on. I cannot stress enough how beneficial this
technique is.&lt;/p&gt;

&lt;h1 id=&quot;condition-counting&quot;&gt;Condition Counting&lt;/h1&gt;

&lt;p&gt;As an interesting side discussion, I want to include an
excerpt from
&lt;a href=&quot;https://www.fastcompany.com/28121/they-write-right-stuff&quot;&gt;They Write the Right Stuff&lt;/a&gt;,
an article that discusses the lengths that the authors of
the Space Shuttle software go to in order to ensure that
their code is bug free:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The group has so much data accumulated about how it does
its work that it has written software programs that model
the code-writing process. Like computer models predicting
the weather, the coding models predict how many errors the
group should make in writing each new version of the
software. True to form, if the coders and testers find too
few errors, everyone works the process until reality and the
predictions match.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I think that bug-finding models of software are a
little extreme for writing plugins, especially when lives
aren’t exactly at stake here, I think there is still merit
in the idea of expecting there to be some number of
conditions. As you get more experienced, you’ll probably
get a feel for how many &lt;code class=&quot;highlighter-rouge&quot;&gt;if-return&lt;/code&gt; statements you should
be writing. If you think there are too few, your intuition
might be indicating something. I’m not saying that I can
clearly advocate for consciously thinking about this, as
you are writing code. I certainly don’t. I the situations
vary far too much for this sort of thing to be worthwhile.
That being said, it would be a lie for me to say that I’ve
never thought something along the lines of “I don’t think
that’s enough code.” Something that looks too good to be
capable of handling all edge cases may well be!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There are a variety of techniques you can use to mitigate
the bugs involving logic that shouldn’t be run from
creeping into your code. This includes playtesting as a
player would, using &lt;code class=&quot;highlighter-rouge&quot;&gt;if-return&lt;/code&gt; statements, and possibly
condition counting if you are interested in a little
exercise.&lt;/p&gt;

&lt;p&gt;These blog posts probably will come with less frequency in
the coming months since I want to focus on college. I’ve
also got my current personal project,
&lt;a href=&quot;https://github.com/AgentTroll/gate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gate&lt;/code&gt;&lt;/a&gt; that I’m
desparately close to finishing and I want to complete, so
I’ll probably be focusing on that, then on my newest
project, &lt;a href=&quot;https://github.com/AgentTroll/liftoff&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;liftoff&lt;/code&gt;&lt;/a&gt;
before focusing back on blogging and finishing the
On Thread Safety post that continually is on TODO…&lt;/p&gt;

&lt;p&gt;As always, I always leave readers with the following quote
from
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code
that is used to control the airplane that you fly on, the
nuclear power plant a few miles from where you live, or the
spacecraft that carries astronauts into orbit. The rules
act like the seat-belt in your car: initially they are
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">The problem I usually see with novice developers when they are debugging is that they test what their code is supposed to do, but they are suprised when their code works when it isn’t supposed to.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 8</title><link href="https://agenttroll.github.io/blog/2019/08/09/lessons-learned-debugging-part-8.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 8" /><published>2019-08-09T02:03:35-07:00</published><updated>2019-08-09T02:03:35-07:00</updated><id>https://agenttroll.github.io/blog/2019/08/09/lessons-learned-debugging-part-8</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/08/09/lessons-learned-debugging-part-8.html">&lt;p&gt;One of the most frustrating things about a large plugin
ecosystem is that at one point or another, you will need to
start handling the dependencies between each plugin for
particular actions - e.g. who gets to break what block and
where they are allowed. How can you constrain the scope of
some certain plugin, due to the functionality of another
plugin, or how can you bypass something?&lt;/p&gt;

&lt;h1 id=&quot;have-one-plugin-handle-protection-checks&quot;&gt;Have One Plugin Handle Protection Checks&lt;/h1&gt;

&lt;p&gt;On most servers, you’ll find some sort of system for
protection, whether it be protecting players from damage
or protecting blocks from being broken. For example, most
Skyblock servers will disallow all damage to players while
they are on their island. This is problematic in some cases
because you actually want players to take damage. In other
cases, a protection plugin doesn’t handle an edge case
involving new capabilities you’ve written for, say, a boss
entity. You’ll find that in order to handle these edge
cases, it often requires you to write the same code over
and over again, and that each time you add a new feature
that needs to interoperate with existing features, these
edge case handlers are either thrown out the window or
simply don’t work anymore. I’ve seen bugs introduced almost
every feature update due to the fact that protection must
either be checked or overridden for each and every single
feature independently. If the boilerplate for doing this
could be eliminated or reduced, then it would be easier to
write your checks to protection plugins without worrying
about forgetting something. Doing something that is easy
means that you’ll do it more often, and before long, it
will become second-nature rather than something that you
explicitly need to think about.&lt;/p&gt;

&lt;p&gt;Luckily, there is an elegant solution to the potentially
messy business of interdependent protections. You’ll need
a single plugin to handle protection for your specific
server ecosystem. All protection checks can be described
by the following function:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In many cases, one can boil down &lt;em&gt;all&lt;/em&gt; protection checks to
a single method. For example, the if you are writing a
plugin for a skyblock server, then almost all protection
is determined by which island a player belongs to and what
island is being affected by that player. Here’s what a
boiled-down check if an action &lt;code class=&quot;highlighter-rouge&quot;&gt;isAllowed&lt;/code&gt; would look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For ASkyBlock, a player may belong to a few different
islands due to co-oping. A server running ASkyBlock might
want to use this to determine whether something
&lt;code class=&quot;highlighter-rouge&quot;&gt;isAllowed&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;island&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;island&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is our base ruleset. Since all actions, whether they
be block placement, which islands players can enter, block
breaking, who can be damaged and when, etc. is determined
by the island the respective parties belong to, we now only
need to translate players, entities, and locations to
islands. In fact, it is conceivable that one can cover
most, if not all possible use cases with just definitions
to translate those 3 objects. Further, it is possible
through the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionType&lt;/code&gt; to make this both type-safe
and extensible in case plugins want to add their own
translation methods:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProtectionHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;translateAffector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;translateTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PLAYER_PLACE_BLOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;translateAffector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affectorId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUniqueId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playerIsland&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SkyBlockApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayerIsland&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;affectorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coopIslands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;SkyBlockApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayerCoops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;affectorId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;coopIslands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playerIsland&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coopIslands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;translateTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SkyBlockApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIslandAtLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;translateAffector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;translateTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The beauty of using this is that the translation methods
can take into account other factors, such as if there is
another plugin that controls the finer-grained permissions.
For example, when I worked at MineSaga, one could enable or
disable the ability of co-oped players to place blocks. By
only having to take this into account once through the use
of &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionType&lt;/code&gt; constants, you no longer need to remember
to check with that plugin each time you do a protection
check. Each plugin fewer that you need to check is one
fewer check you can possibly forget. If you recall my last
blog post, you can throw all of your protection handling
code into a
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/07/24/lessons-learned-debugging-part-7.html&quot;&gt;central library&lt;/a&gt;.
If you ever add a new plugin that actually adds new
behavior that the &lt;code class=&quot;highlighter-rouge&quot;&gt;isAllowed&lt;/code&gt; check needs to handle, all
of your plugins using the protection handler provided by
the core plugin benefit from a change to just that one
core plugin to account for that new check. Additionally,
this means that only new plugins will need to depend on a
single core plugin that also handles protection. Assuming
that you don’t need to add any &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionType&lt;/code&gt;s, you can get
away with not even modifying the core plugin. You can
focus your efforts on implementing features instead of
writing hacky and fragile code just to make sure your
protection ruleset is being honored.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BlockPlaceEvent&lt;/code&gt; is not one of the things that you usually
need to check with a protection handler, since that
function is normally handled by whatever protection plugin
you are using. You can exploit this by calling
&lt;code class=&quot;highlighter-rouge&quot;&gt;BlockPlaceEvent&lt;/code&gt; for every block that needs to be checked,
then seeing if it has been cancelled. The framework I’ve
discussed is useful for cases where there is not an
existing event handled by protection plugins. For example,
if a minion (on MineSaga, a zombie entity) “places” a
block, it would be a good idea to translate the minion’s
owner UUID to whichever island that player belongs to in
order to check if the minion &lt;code class=&quot;highlighter-rouge&quot;&gt;isAllowed&lt;/code&gt; to place that
block:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Minion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINION_PLACE_BLOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Overide&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;translateAffector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Minion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ownerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playerIsland&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SkyBlockApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayerIsland&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ownerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coopIslands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;SkyBlockApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlayerCoops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ownerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;coopIslands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playerIsland&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coopIslands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Island&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;translateTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PLAYER_PLACE_BLOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;translateTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The extensibility of this system is a valuable feature
because it means that one doesn’t need to go through the
trouble of storing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Player&lt;/code&gt; object itself in order to
perform protection checks which depend on the fact that
the something performing some modification action is a
player. It could be a boss entity or a minion entity as
demonstrated by the above snippet.&lt;/p&gt;

&lt;p&gt;However, for the sake of completeness, let’s assume for a
moment that you have a really bad skyblock plugin, or a
really bad protection plugin that doesn’t handle
&lt;code class=&quot;highlighter-rouge&quot;&gt;BlockPlaceEvent&lt;/code&gt;. What would, say, a multiblock place event
listener look like?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EventHandler&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPlace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlockPlaceEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBlockPlaced&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ProtectionHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MINION_PLACE_BLOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Set block, remove item, etc...&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not so bad!&lt;/p&gt;

&lt;h1 id=&quot;overriding-protections&quot;&gt;Overriding Protections&lt;/h1&gt;

&lt;p&gt;Now that we’ve covered how protection checks can be done in
an elegant, extensible way, how do we handled overriding an
existing protection plugin?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before I get into this section, a small personal
anecdote:&lt;/p&gt;

  &lt;p&gt;The correct way to write protection event listeners is to
use an &lt;code class=&quot;highlighter-rouge&quot;&gt;EventPriority.LOW&lt;/code&gt; event handler method so that
non-protection plugins can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCancelled&lt;/code&gt; without
having to change their priority. Unfortunately, I’ve seen
a number of excessively dumb plugins which set their
protection listeners to &lt;code class=&quot;highlighter-rouge&quot;&gt;EventPriority.HIGHEST&lt;/code&gt; (or in
extreme cases, &lt;code class=&quot;highlighter-rouge&quot;&gt;EventPriority.MONITOR&lt;/code&gt;), under the
assumption that they want their event listener to take
precedence. For the love of all that is good in this
world &lt;strong&gt;please stop doing this&lt;/strong&gt;. This causes issues with
plugins that need to piggyback off of that protection to
have no way of checking whether or not an event will be
cancelled without doing hacks like scheduling a task to
check if the event is cancelled once all event listeners
have run or refiring the event and storing it to make
sure it doesn’t get handled in an infinite loop, etc.
I’ve had to write an enchanted pickaxe plugin that
shouldn’t run any enchantments if a block was broken
outside of a mine. However, the mine plugin, which
handled block break protection registered their listener
with &lt;code class=&quot;highlighter-rouge&quot;&gt;EventPriority.HIGHEST&lt;/code&gt;, and in the interests of
keeping &lt;code class=&quot;highlighter-rouge&quot;&gt;EventPriority.MONITOR&lt;/code&gt; clear, I unregistered
their listener from the &lt;code class=&quot;highlighter-rouge&quot;&gt;BlockBreakEvent&lt;/code&gt;’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;HandlerList&lt;/code&gt; and re-registered it under a lower
priority.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unlike writing protection checks, overriding protection is
independent. If we are overriding a protection, that means
that the protection itself is irrelevant (otherwise, we
wouldn’t really be overriding anything). Mind you, limits
can still be placed on where or when overriding is done.
However, this is up to each individual plugin, so it
wouldn’t make sense to include this feature in a central
core plugin.&lt;/p&gt;

&lt;p&gt;Overriding protection listeners can be done in two ways.
Firstly, you can bypass the listener entirely and manually
perform some action on its own. For example, if a plugin
cancels damage events, you can manually set the health of
an entity instead. Secondly, you can set a listener to a
higher priority and then use
&lt;code class=&quot;highlighter-rouge&quot;&gt;Cancellable#setCancelled(boolean)&lt;/code&gt; to &lt;em&gt;uncancel&lt;/em&gt; the
event if certain conditions are met. If you can’t edit the
source of a plugin using a scheduler to protect some region
or entity or block, then you can consider cancelling that
scheduler task and then running your own task which does
everything except for whatever protection you are
overriding.&lt;/p&gt;

&lt;p&gt;The short of it is that overriding a protection is much
easier than checking for a protection. You don’t need to
worry about the limitations for the former because you are
already overriding the protection. However, for the latter,
I’ve presented a good way of structuring a protection
handler to reduce boilerplate and reduce the number of bugs
you are getting from forgetting protection checks.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I have little else to say except for the tradition of
leaving readers with the following words from
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code
that is used to control the airplane that you fly on, the
nuclear power plant a few miles from where you live, or the
spacecraft that carries astronauts into orbit. The rules
act like the seat-belt in your car: initially they are
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">One of the most frustrating things about a large plugin ecosystem is that at one point or another, you will need to start handling the dependencies between each plugin for particular actions - e.g. who gets to break what block and where they are allowed. How can you constrain the scope of some certain plugin, due to the functionality of another plugin, or how can you bypass something?</summary></entry><entry><title type="html">Let’s Talk Privacy</title><link href="https://agenttroll.github.io/blog/2019/07/28/lets-talk-privacy.html" rel="alternate" type="text/html" title="Let's Talk Privacy" /><published>2019-07-28T15:41:15-07:00</published><updated>2019-07-28T15:41:15-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/28/lets-talk-privacy</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/28/lets-talk-privacy.html">&lt;p&gt;This post should come with a big red disclaimer that says
I’m not an expert, but since my screen is redshifted to
hell, plain black will have to do. I’m just a Java
programmer with a blog.&lt;/p&gt;

&lt;p&gt;With that out of the way, I am subscribed to
&lt;a href=&quot;https://t.me/hackernewslive&quot;&gt;Hacker News Live&lt;/a&gt; channel,
which posts updates regarding Google Chrome a few times,
every time with dozens of thumbs-ups and only a few
thumbs-down votes. A few weeks ago, I decided to just check
&lt;a href=&quot;https://www.siliconvalley.com/2019/06/21/google-chrome-has-become-surveillance-software-its-time-to-switch/&quot;&gt;the link&lt;/a&gt;,
which I found to be an interesting read indeed. It’s not
everyday you see almost 20 thumbs-ups on a single article
on the Hacker News Live channel, so there must either be a
really compelling point made or there are anti-Google bots
on the channel.&lt;/p&gt;

&lt;p&gt;That was the beginning of a pretty long journey.&lt;/p&gt;

&lt;h1 id=&quot;why-privacy-is-important&quot;&gt;Why Privacy is Important&lt;/h1&gt;

&lt;p&gt;If you don’t think privacy is important, then I doubt
anything I say will change your mind. That being said, I
think that it is a topic worth being informed on. I’m not
an expert on this subject, but there are plenty of people
who are and can convince you of the importance of privacy
if I fail to do so. I’ll be sure to give links.&lt;/p&gt;

&lt;p&gt;I wrote this
&lt;a href=&quot;https://twitter.com/AgentTrolldude/status/1154623948039962625&quot;&gt;tweet&lt;/a&gt;
a few days ago. The first link of course, is to the
“&lt;a href=&quot;https://en.wikipedia.org/wiki/Nothing_to_hide_argument&quot;&gt;Nothing to hide&lt;/a&gt;”
argument. The reasoning goes that if you have nothing to
hide, then you have nothing to fear. You can allow for
your privacy to be violated because you don’t care about
what people are going to find. This is far and away the
most common counterpoint I tend to hear about why people
shouldn’t care about privacy. This is a vastly flawed
argument in a number of ways. There are a lot of details
on the Wikipedia page I linked, but you can find further
information here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/privacy/wiki/index#wiki_why_should_i_care_about_privacy.3F&quot;&gt;r/privacy Wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.privacytools.io/&quot;&gt;privacytoolsIO Main page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The links above are a fantastic starting place to learn
more about privacy and why you should care. I’ll even
talk about why I care about privacy myself later on. But
first, I’ll get back to why “having nothing to hide” is a
terrible argument. First of all, it is overly presumptuous
and implies that only criminals should expect privacy. It
implies that law-abiding citizens should not be afraid of
having their personal information exposed, because no harm
can come to them if they can prove that they are completely
innocent. However, even if you don’t have anything to hide,
“&lt;a href=&quot;https://www.aclu.org/blog/national-security/secrecy/you-may-have-nothing-hide-you-still-have-something-fear&quot;&gt;you still have something to fear&lt;/a&gt;.”
If you did not care about your personal information, would
you be comfortable with someone using your identity to
&lt;a href=&quot;https://www.reddit.com/r/privacy/comments/3hynvp/how_do_you_counter_the_i_have_nothing_to_hide/&quot;&gt;commit a crime&lt;/a&gt;?
Would you let someone in to your bathroom to watch you
shower and use the toilet? Would you invite people passing
by to watch you sleep? Having nothing to hide is a poor
argument for not caring about privacy. The truth is, you
probably do have something to hide. You are not
infalliable. If you have nothing to hide, you probably need
to look harder. And even then, you &lt;em&gt;should not have
something to hide in order to expect privacy&lt;/em&gt;. You expect
privacy when you are using the bathroom or spending time
with your family. It would be creepy to have someone
staring through your window, watching your every move. But
you don’t have to take my word for it, there are lots of
arguments for and against having anything to hide and
whether that entitles you to privacy. Let’s keep moving.&lt;/p&gt;

&lt;p&gt;According to the linked r/privacy wiki:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;there is an ever increasing portion of our lives which is
being recorded by corporations and governments, and these
records can be used to our disadvantage, at any time, now
or any-time in the future&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Corporations and governments have an immense amount of
power armed with the data they have collected from users
and citizens. If you do have something to hide (which you
almost certainly do, otherwise, do not ever lock your doors
again), the question now becomes can they be accountable
for that data. I believe I read an article which I’m
currently unable to find about how Google’s reCAPTCHA v3
technology could even be used to detect Parkinsons based
on the movement of a user’s mouse. This is a fantastic way
to inform people who may not have been diagnosed yet. But
on the other hand, this information may also be
inadvertently published, for example, to insurance
companies who will raise your premiums. Even if Google
never ends up doing this, deducing health conditions based
simply on mouse movements is a testament to the data
collection power of Internet corporations. Even if Google
cannot collect this data, someone else may exploit this
technology themselves. Even if you don’t care if your rates
increase, even if you don’t care if everybody in the whole
world knew you had Parkinsons, it isn’t like it would help
you to be in that situation. &lt;em&gt;Even if it did help&lt;/em&gt;, it
might hurt others. Even if companies and governments are
good stewards of your data, assuming that no nefarious
employees access that data, assuming that no one is able to
read your data when you are sending it, assuming that there
is “no one out to get you,” and assuming a plethora of
other unrealistic expectations about how your data is
handled, privacy still matters to you. The mere fact that
you do not care about your privacy is an exploitable data
point, because you be expected to give up your data
needlessly. And this is in the best possible scenario.
In reality, companies profit off of collecting and selling
data. Allowing yourself to be complacent is like putting
your wallet with all of your cash on the ground. Some
people will try to find to owner or report it to police,
but others are going to make a profit. Even if you do not
value your own personal information, &lt;em&gt;someone else will&lt;/em&gt;.
Your data cannot help you if the government has access to
both exculpatory information and incriminating information
if their sole goal is to arrest you. It doesn’t matter if
you have not committed a crime and it doesn’t matter that
you have nothing to hide.&lt;/p&gt;

&lt;p&gt;All of this is not to say that your information has been
or will be used against you. Only that it may be, and that
it is a very real threat. You may not be impacted yourself,
but others already have. Look no further than the
totalitarian governments. If you think that you don’t have
anything to hide, think again, because chances are, you
probably do.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zdnet.com/article/a-case-against-online-privacy/&quot;&gt;One article&lt;/a&gt;
claims that services that collect data
“provide […] some value.” Let’s say that you aren’t like
me and you do care about ads. You think that being tracked,
having your preferences recorded, and having a slower
browser is a good thing because you benefit in the end.
But the argument is severely flawed. The author
subsequently points fingers at ISPs since they allegedly
don’t provide you a better service, they give data to
the cops, and they don’t tell you you are being tracked.
These are all debunked by Facebook’s
&lt;a href=&quot;https://www.facebook.com/policy.php&quot;&gt;Data Policy&lt;/a&gt;,
which states that they also comply with law enforcement,
and by Comcast’s
&lt;a href=&quot;https://www.xfinity.com/corporate/customers/policies/customerprivacy#to-provide-and-improve-the-services&quot;&gt;Customer Privacy Notice&lt;/a&gt;,
which literally says that they collect traffic and use
the data they collect to improve their services. I’m sure
other ISPs will have similar policies. But never mind that
fact, the whole point is that there still is value to be
gained from expectation of privacy, even if you think you
benefit from not having that expectation. Again, just
because the data isn’t being abused right now doesn’t mean
it won’t be in the future (on the other hand, as I keep
saying, it doesn’t mean that it &lt;em&gt;will&lt;/em&gt; either). The data
and the conclusions that can be drawn from it are powerful
bargaining tools if they reveal information that you don’t
want people to know. But let’s say that you don’t care.
That does not mean that you shouldn’t be entitled to be
able to control the data advertising companies collect.
Like I will describe in the reasons why I personally care
about privacy, I state that it is about controlling my
information. If you do not care about your information,
you are implicitly allowing for that information to be
released about yourself. So although you don’t care about
the data being collected itself, you do care about
controlling it. Even if you don’t do anything to hide
that data in the first place, your lack of control is in
of itself your decision. You should have the option halt
the collection of data if that is your choice as well.
Allowing your personal data to be collected is as much of
a decision based on your privacy preference as is not
allowing it to be.&lt;/p&gt;

&lt;p&gt;There are so many more points and counterpoints that I can’t
list them all here. Instead, I’ll leave more links so you
can read them yourself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.gseis.ucla.edu/faculty/agre/arguments.html&quot;&gt;Arguments Against Privacy and What’s Wrong With Them&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.livemint.com/Opinion/03L1A2tOAFw6sXpsu4cweL/The-problem-with-the-right-to-privacy.html&quot;&gt;The problem with the right to privacy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spreadprivacy.com/three-reasons-why-the-nothing-to-hide-argument-is-flawed/&quot;&gt;Three Reasons Why the “Nothing to Hide” Argument is Flawed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theatlantic.com/technology/archive/2013/02/why-does-privacy-matter-one-scholars-answer/273521/&quot;&gt;Why Does Privacy Matter? One Scholar’s Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;edit-2019-20-11-210125&quot;&gt;EDIT 2019-20-11 21:01:25:&lt;/h1&gt;

&lt;p&gt;I found yet another gem a few days ago but I seem to be
unable to figure out where it came from. Nevertheless, I
feel that it is worth putting here: the “I have nothing to
hide” argument is inherently flawed because your digital
life and the profiles that Internet companies build on
their users is so vast and complex that you might not even
realize that you have something to hide in the first place.&lt;/p&gt;

&lt;h4 id=&quot;why-i-care&quot;&gt;Why I Care&lt;/h4&gt;

&lt;p&gt;I myself have my own personal reasons to care about
privacy.&lt;/p&gt;

&lt;p&gt;In no particular order, I care about my privacy because I
think that it is important for me to control my personal
information. For example, the front page of my GitHub
profile has my name right on it, but it’s not like I go
around on public forums announcing my name. This is a
deliberate choice. While I’m not keeping my identity
private, I think an important part of privacy is the
element of control. I’m not preventing anyone from finding
out who I am, because I post plenty of that information on
the web. If people are curious, they can find out more
about me. There are going to be creeps online of course,
but from my own personal experience, I feel that having
this information in public has benefitted me much more than
it has been a detriment. It has helped me connect with
people on more than one occaision. But you may be curious,
how does controlling my data relate to privacy? Here is
what the
&lt;a href=&quot;https://iapp.org/about/what-is-privacy/&quot;&gt;IAPP&lt;/a&gt; has to say
on that matter:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Broadly speaking, privacy is the right to be let alone,
or freedom from interference or intrusion. Information
privacy is the right to have some control over how your
personal information is collected and used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By making my information less visible in some contexts and
more so in others, I am controlling my privacy. However,
in other contexts, that could also mean hiding my
information more or less completely. For example, I share
my Discord information with very few people, same deal with
my Steam account. I don’t share my passwords with anyone.
Privacy doesn’t mean that you explicitly need to hide
anything, only that you are in control of information.&lt;/p&gt;

&lt;p&gt;Secondly, I care about my privacy because I think that some
of my information shouldn’t fall into the hands of hackers.
Online accounts often link information such as birthdate,
phone number, friendships, etc. Many companies have privacy
policies that say that your information is encrypted or
stored safely and all of that. However, the IAPP states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While security is necessary for protecting data, it’s not
sufficient for addressing privacy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And they’re right. There are many examples of this being
exhibited in the real world, such as in the case of
&lt;a href=&quot;https://newsroom.fb.com/news/2018/09/security-update/&quot;&gt;Facebook&lt;/a&gt;
just last year. The truth is, once you give your data to
a company, it is stored inside of a black box. I don’t
want to sound like a consspiracy theorist or anything,
but I don’t want my data to be in the hands of someone
I don’t know, running software that might have
vulnerabilities, or servers that are behind on security
updates. I expect that companies I give my personal
information to protect that information. Even companies
proclaim themselves to
&lt;a href=&quot;https://blog.mozilla.org/firefox/firefox-data-privacy-promise/&quot;&gt;protect your privacy&lt;/a&gt;
make
&lt;a href=&quot;https://www.reddit.com/r/firefox/comments/anxfz8/firefox_is_spyware_extension_recommendation/eg1hekf/&quot;&gt;mistakes&lt;/a&gt;
as well. (See the comments, the main post is entirely
outrage bait and spreading FUD).&lt;/p&gt;

&lt;p&gt;The simple fact is, I personally don’t see why companies
should have access to data that they don’t need. I don’t
care if they encrypt it, I don’t care if it is anonymized
or if they never sell it, or if they don’t even have it
stored in the first place. Why am I sending this data then?
That would be analogous to going out to lunch and then
suddenly informing everyone there of my personal health
issues. Not only would this be completely inappropriate,
but the information I’m announcing is completely unecessary
because I’m going to eat, not going to the doctor. To apply
this to a browser for example, why is Google Chrome sending
information back to Google when my browser would work
completely fine without that data sent anywhere? I don’t
care what is being sent, why is it even sent in the first
place?&lt;/p&gt;

&lt;p&gt;Finally, I personally care about my privacy because
tracking takes up my computer’s resources. Loading ads
and spyware implanted on websites that are designed to
track you takes up CPU, RAM, and battery power. If I’m on
a slow WiFi connection, I want every little bit of
bandwidth to load the fucking website, not a bunch of ads.
I’d be happy to donate my money to subscription-based
services such as reputable news sites and content creators
if it means getting rid of ads and they get 100% of the
revenue. Nevermind the fact that advertising companies
want to collect every bit of data possible about me to
“tailor” their ads, I literally just don’t want my battery
to be drained any faster than it already is by being
tracked.&lt;/p&gt;

&lt;h1 id=&quot;what-you-can-do&quot;&gt;What You Can Do&lt;/h1&gt;

&lt;p&gt;I will warn you before this that when regarding privacy,
many of the sources that you’ll run into are not shy about
coming off as tinfoil hatters. I’ve found sources that run
articles about the fall of capitalism, the end of the
world, etc., which can be expected of people who tend to be
paranoid, if not overly so at times. However, privacy and
security are real issues that governments are interested in
as well, and I advise that you ignore the more extreme
conspiracy theorizing and select the portions of the
articles that are rational, or the ones that match your
own
&lt;a href=&quot;https://ssd.eff.org/en/module/your-security-plan&quot;&gt;threat profile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Again, I will reference the r/privacy wiki that I linked
early in this blog post. It has a lot of references to
many different tools to minimize or take control of the
data being collected on you. Another great resource is
not only looking at other reputable sources of information
on privacy-respecting software such as
&lt;a href=&quot;https://prism-break.org/en/&quot;&gt;PRISM Break&lt;/a&gt;, but also
looking at discussions about privacy and the strengths and
weaknesses of different services on their GitLab
&lt;a href=&quot;https://gitlab.com/prism-break/prism-break/issues&quot;&gt;issues&lt;/a&gt;
page as well.&lt;/p&gt;

&lt;p&gt;I don’t give a comprehensive list here, but it should be
enough to give you an idea of my personal preferences and
where you can find more information. In general, if you
use any software or website that visits the Internet, you
should check on its Privacy Policy and look for informed
opinions about whether or not that service respects your
privacy. Being informed is the most powerful defense for
your freedoms and your right to privacy.&lt;/p&gt;

&lt;h4 id=&quot;web-browser&quot;&gt;Web Browser&lt;/h4&gt;

&lt;p&gt;Another great resource is the
&lt;a href=&quot;https://spyware.neocities.org/articles/browsers.html&quot;&gt;Spyware Watchdog&lt;/a&gt;,
with the linked page going to a comparison of different
web browsers. I personally use Ungoogled Chromium because
I prefer a Chromium based browser that had all of the
spyware disabled right out of the box. I have the following
extensions installed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bitwarden&lt;/li&gt;
  &lt;li&gt;Cookie AutoDelete&lt;/li&gt;
  &lt;li&gt;Decentraleyes&lt;/li&gt;
  &lt;li&gt;EditThisCookie&lt;/li&gt;
  &lt;li&gt;HTTPS Everywhere&lt;/li&gt;
  &lt;li&gt;NoScript&lt;/li&gt;
  &lt;li&gt;Privacy Badger&lt;/li&gt;
  &lt;li&gt;uBlock Origin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are plethora of different extensions for Firefox as
well, but since I’ve moved on from using Firefox, I won’t
list them here. I personally prefer the UI on Chromium
and I liked not having to configure anything.&lt;/p&gt;

&lt;p&gt;As an extended note, be aware that Chromium is &lt;strong&gt;NOT&lt;/strong&gt; the
same as Ungoogled Chromium! Using the stock Chromium is
just as risky for your privacy as using Google Chrome. You
can find Ungoogled Chromium &lt;a href=&quot;https://github.com/Eloston/ungoogled-chromium&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;os&quot;&gt;OS&lt;/h4&gt;

&lt;p&gt;If you are not using Linux, I highly recommend switching.
Since I already use Debian by default, I have little to say
on this matter. You should read up
&lt;a href=&quot;https://www.privacytools.io/operating-systems/#os&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;search-engine&quot;&gt;Search Engine&lt;/h4&gt;

&lt;p&gt;&lt;del&gt;I personally use StartPage. I’ve used DuckDuckGo in the
past but I’ve personally found StartPage to be a lot better
in terms of search results.&lt;/del&gt; Your milage may vary. Again,
see
&lt;a href=&quot;https://www.privacytools.io/providers/search-engines/&quot;&gt;privacytoolsIO&lt;/a&gt;
for more alternatives.&lt;/p&gt;

&lt;h1 id=&quot;edit-2019-20-11-210125-1&quot;&gt;EDIT 2019-20-11 21:01:25:&lt;/h1&gt;

&lt;p&gt;StartPage was &lt;a href=&quot;https://blog.privacytools.io/delisting-startpage/&quot;&gt;delisted&lt;/a&gt;
on privacytoolsIO and I can no longer recommend them in
good conscience. I now personally use privacytoolsIO’s
Searx instance, which can be found
&lt;a href=&quot;https://search.privacytools.io/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;deleting-accounts&quot;&gt;Deleting Accounts&lt;/h4&gt;

&lt;p&gt;Before writing this article, I had hundreds of logins. I’ve
sent dozens and dozens of emails to the different sites
that I’ve had accounts on asking for them to delete accounts
I no longer use. Before deleting your account, you should
try to obfuscate some of your personal data if you see fit.
You can read each website’s privacy policies if you don’t
know who to contact to delete your account. Deleting your
account means that the data is (hopefully) removed from
the service provider’s servers, and you will (hopefully)
reduce the size of your digital footprint. You can reduce
the chance of having an account compromised if you don’t
have as many accounts.&lt;/p&gt;

&lt;h4 id=&quot;spread-the-word&quot;&gt;Spread the Word&lt;/h4&gt;

&lt;p&gt;If you’ve made it this far, you probably at least care
about privacy enough to think that it is an issue worth
promoting. Tell your friends, advise them to move away
from using services that track users and services that do
not respect their users’ privacy. Privacy is an issue of
complacency. It is easy to have your rights taken away and
your freedoms to be violated if you never knew you had them
in the first place. At worst, at least people will be more
informed if they do not choose to control their personal
data.&lt;/p&gt;

&lt;p&gt;These are only some of the ways that I’ve tried to control
my data and my privacy. There are of course, many more
ways to improve even what I’ve listed here, and there are
other services that are worth giving up that the reader
might be using that I don’t know of. Evaluate what your
risk profile is, minimize your digital footprint, and
assert your right to privacy.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Obviously, this isn’t a programming-related post, but I
still hope that you’ve learned something nevertheless.
Privacy is not only about the here and now, but also about
the future. Now that we are hearing more and more of the
media publicizing hacks for political gain such as the
Clinton email leak and the Cambridge Analytica scandal, it
is more important than ever to take a hard look at how much
we really value our privacy, and by extension, how much we
value our democracy. Privacy is obviously a controversial
issue because it is so politically charged, but I’ve tried
my best to try to stay neutral on this matter. I don’t
think it matters what political party you subscribe to, or
how much you think you care about your privacy, it is an
important issue in the digital age.&lt;/p&gt;</content><author><name></name></author><summary type="html">This post should come with a big red disclaimer that says I’m not an expert, but since my screen is redshifted to hell, plain black will have to do. I’m just a Java programmer with a blog.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 7</title><link href="https://agenttroll.github.io/blog/2019/07/24/lessons-learned-debugging-part-7.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 7" /><published>2019-07-24T00:07:20-07:00</published><updated>2019-07-24T00:07:20-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/24/lessons-learned-debugging-part-7</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/24/lessons-learned-debugging-part-7.html">&lt;p&gt;I haven’t explicitly identified it until now, but it seems
that I have a habit of putting exactly the same thing in my
introductory paragraph in basically all of the posts in
this series. This particular lesson doesn’t sound all that
bad at first, but I can assure you that I have literally
crashed a server by not following it.&lt;/p&gt;

&lt;h1 id=&quot;strongly-consider-whether-you-can-put-something-in-a-shared-library&quot;&gt;Strongly Consider Whether You Can Put Something In a Shared Library&lt;/h1&gt;

&lt;p&gt;There are so, so many benefits to having a centralized
core library you can depend on for your plugins with
virtually no drawbacks whatsoever.&lt;/p&gt;

&lt;p&gt;The first thing that comes to mind, of course, is having
a set of pre-written classes available to you. For example,
menus, handy utilities for things such as I/O, databases,
and data management primitives. Chances are, if you are not
using a central library, you are writing a significant
amount of boilerplate in your non-trivial plugins. If that
is the case, you should consider generifying what you have
written so that it fits the purpose of multiple plugins.
Although you might be spending more time now trying to
write part of your core library and also the plugin that
currently needs it, you will spend less time writing the
same boilerplate later on. You can significantly increase
productivity if you aren’t stuck writing basically the
same thing for every plugin you write each time you write
a new plugin. Secondly, it is inevitable that you will
make mistakes, and as hard as I try to push for care and
slowing down to think through your code, even I myself
make mistakes as well. If you are writing similar or even
the same code on each of your plugins, ALL of your plugins
need to be updated in the case that you find out you’ve
been doing it wrong the entire time. On the other hand, if
all of your plugins depend on just one library, you only
need to fix the bug once. The counterargument is often that
you can minimize the impact of a mistake if you spot it
when you write the same thing again. However, this is
wishful thinking. This is not how it works in the real
world. I would strongly argue that writing boilerplate is a
mindless activity. You are not likely to catch that you are
making a mistake if you are writing the same code you wrote
last time. On top of that, the more you get used to the
same workflow, the more complacent you become, and more
importantly, the bigger the cost of fixing that said code
once it breaks. Think of it this way: if you only write the
code once, then you only have that one chance to make a
mistake. If you are writing the same code over and over
again, you take that risk every. Single. Time. Thirdly,
even if you Ctrl+C and Ctrl+V your code, there are still
no guarantees. It might work for small snippets of code,
but once you get to large amounts of boilerplate such as
when writing inventory GUIs for example, then things start
to fall apart. You &lt;em&gt;still&lt;/em&gt; suffer from the possibility that
the snippet you’ve been copying from is also wrong as well.
You are not only duplicating what works across your entire
codebase, you are also duplicating anything that
potentially doesn’t. Again, the impact of a bug can be
mitigated, but the cost of fixing it cannot. Do yourself a
favor. When you are writing a lot of boilerplate that can
be abstracted away, consider putting it on your core
library.&lt;/p&gt;

&lt;p&gt;A core library is not only good for putting your own code,
but the code of others as well. You can shade various
common dependencies into your core. The following argument
is terrible, for obvious reasons, but you are reducing the
total JAR sizes of all your plugins if only the one core
plugin contains a big library. But, for those of you who
are for some inexplicable reason scared of large JARs, then
throwing everything into one super JAR file might help
settle your conscience. For me personally, I need to
configure certain libraries such as Guice that need their
own namespaces each time I shade it using Maven, so it
helps if I don’t even need to write anything extra by
using a &lt;code class=&quot;highlighter-rouge&quot;&gt;provided&lt;/code&gt; dependency on the central library. This
isn’t to say that you should put every single dependency in
your core library, but commonly used libraries like
HikariCP are always helpful to have lying around,
especially when a significant portion of your plugin
ecosystem might depend on it. Again, I’m going back to the
JAR size argument, but it also can’t hurt to reduce the
amount of time it takes to download every other plugin if
only the super JAR takes a long time since it has all the
libraries shaded into it.&lt;/p&gt;

&lt;p&gt;Finally, a core library can be used to enforce a specific
standard or policy. For example, if you are including
MySQL utilities, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; to provide
the MySQL credentials to all the plugins using that core
library. The server owner will not need to configure the
credentials more than once. Secondly, by having a library
of different utilities, you can centralize the way a
certain action is performed. For example, you might want
to make sure that caching is done in a particular way, or
that all of the caches used on the various dependent
plugins are configured to have a specific eviction time.
By including this into the core library, you can enforce
that specific policy on all of your plugins. You can even
have a hierarchy of core plugins if certain developers
prefer some other ways, or would like to use open-source
core libraries instead. By changing specific portions of
their desired library to comply with the “master” core
library, they can use both the “master” and their custom
core in conjunction, or simply utilize the custom
library if the desired features are fully reimplemented.&lt;/p&gt;

&lt;p&gt;It may actually take longer to maintain a core library
if you are developing it alongside whatever plugin
you need to complete because you are abstracting away some
feature, but I can assure you that this effort is well
worth it. Because your core library matures in the long
run, it is a net gain rather than a loss as it becomes more
and more useful. Had I have had the foresight to write my
boilerplate into a centralized library, I would not have
crashed servers and caused multitudes of plugins to have
independent visual glitches as a result of making one
mistake.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;As has been tradition, I leave with the following from
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code
that is used to control the airplane that you fly on, the
nuclear power plant a few miles from where you live, or the
spacecraft that carries astronauts into orbit. The rules
act like the seat-belt in your car: initially they are
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve recently become more interested in Internet privacy.
I consider myself to be relatively informed on the topic,
but there are a lot of things that I’ve found that I didn’t
know about within the past few weeks. I’ll be doing a post
on that soon, because I think it is an issue worth talking
about. And for readers who don’t think privacy is an
important issue, I only ask that you hear me out. I’m not a
popular blogger by any means, so if you are reading my blog
in the first place, that probably indicates that you don’t
have anything better to do anyways. I encourage you to use
that time to become at least a little bit more informed :).&lt;/p&gt;

&lt;h1 id=&quot;addenum-2019-08-14-0315&quot;&gt;Addenum 2019-08-14 03:15&lt;/h1&gt;

&lt;p&gt;I hadn’t actually thought of this earlier, but I’ve
recently run into another situation where a standardized
library would have made life a lot easier. Especially in
teams with several developers, providng a single paradigm
provided by a core plugin makes the code easier for other
developers to parse and less error prone. Because you can
be assured that some portion of the code that calls on a
standardized function works, you can debug and review code
much faster at a reduced cost.&lt;/p&gt;</content><author><name></name></author><summary type="html">I haven’t explicitly identified it until now, but it seems that I have a habit of putting exactly the same thing in my introductory paragraph in basically all of the posts in this series. This particular lesson doesn’t sound all that bad at first, but I can assure you that I have literally crashed a server by not following it.</summary></entry><entry><title type="html">What The Fuck Does Guice ‘zip file closed’ Exception Mean?</title><link href="https://agenttroll.github.io/blog/2019/07/18/what-the-fuck-does-guice-zip-file-closed-exception-mean.html" rel="alternate" type="text/html" title="What The Fuck Does Guice 'zip file closed' Exception Mean?" /><published>2019-07-18T01:00:15-07:00</published><updated>2019-07-18T01:00:15-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/18/what-the-fuck-does-guice-zip-file-closed-exception-mean</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/18/what-the-fuck-does-guice-zip-file-closed-exception-mean.html">&lt;p&gt;I’ve had a lot of time to work with &lt;a href=&quot;https://github.com/google/guice&quot;&gt;Guice&lt;/a&gt;
when I worked with Skytropia. However, working on a
personal project with more up-to-date versions of Spigot
and Guice, I was met with the strangest possible exception.
But what does it mean? Honestly, I haven’t quite figured it
all out myself either.&lt;/p&gt;

&lt;p&gt;That being said, the “solution” is deceptively simple and
if you’re just here for that, scroll down and skip the
introductory fluff.&lt;/p&gt;

&lt;h1 id=&quot;the-setup&quot;&gt;The Setup&lt;/h1&gt;

&lt;p&gt;Obviously, it would be out of place if I didn’t show what
I’m running. Here’s the Java/OS info:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System Info: Java 11 (OpenJDK 64-Bit Server VM 11.0.3+7) Host:  Linux 4.19.0-5-amd64 (amd64)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now here’s the server info:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[01:05:37 INFO]: This server is running Paper version git-Paper-133 (MC: 1.14.3) (Implementing API version 1.14.3-R0.1-SNAPSHOT)
[01:05:37 INFO]: Previous version: git-Paper-123 (MC: 1.14.3)
[01:05:37 INFO]: You are 1 version(s) behind
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this is my dependencies &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.inject&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;guice&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.2.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.guava&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;guava&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.inject.extensions&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;guice-assistedinject&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.2.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I am using relocations to move &lt;code class=&quot;highlighter-rouge&quot;&gt;com.google.inject&lt;/code&gt; to a
different package. It is worth noting that you can get an
equally strange error if you shade Guice in the same
namespace, but that applies to all plugins (and the server
namespace as well, which is why you should NEVER shade
database drivers in a plugin, relocation doesn’t work). The
error will obviously look a little bit different, but if I
recall, it should be an &lt;code class=&quot;highlighter-rouge&quot;&gt;IllegalAccessException&lt;/code&gt; or
something similar. That being said, this post is &lt;strong&gt;not&lt;/strong&gt;
on that topic.&lt;/p&gt;

&lt;h1 id=&quot;the-error&quot;&gt;The Error&lt;/h1&gt;

&lt;p&gt;Now onto the error. This is what I have been tearing my
hair over the last hour:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 2019-07-18 00:30:34,444 Log4j2-TF-1-AsyncLogger[AsyncContext@70dea4e]-1 ERROR An exception occurred processing Appender File com.google.common.util.concurrent.UncheckedExecutionException: java.lang.IllegalStateException: zip file closed
        at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2217)
        at com.google.common.cache.LocalCache.get(LocalCache.java:4154)
        at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:4158)
        at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:5147)
        at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:5153)
        at com.google.inject.internal.util.StackTraceElements.forMember(StackTraceElements.java:71)
        at com.google.inject.internal.Messages.formatParameter(Messages.java:286)
        at com.google.inject.internal.Messages.formatInjectionPoint(Messages.java:273)
        at com.google.inject.internal.Messages.formatSource(Messages.java:229)
        at com.google.inject.internal.Messages.formatSource(Messages.java:220)
        at com.google.inject.internal.Messages.formatMessages(Messages.java:90)
        at com.google.inject.ConfigurationException.getMessage(ConfigurationException.java:73)
        at org.apache.logging.log4j.core.impl.ThrowableProxy.&amp;lt;init&amp;gt;(ThrowableProxy.java:134)
        at org.apache.logging.log4j.core.impl.ThrowableProxy.&amp;lt;init&amp;gt;(ThrowableProxy.java:122)
        at org.apache.logging.log4j.core.async.RingBufferLogEvent.getThrownProxy(RingBufferLogEvent.java:330)
        at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:61)
        at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)
        at org.apache.logging.log4j.core.layout.PatternLayout$PatternSelectorSerializer.toSerializable(PatternLayout.java:455)
        at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:232)
        at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:217)
        at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)
        at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:177)
        at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:170)
        at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:161)
        at org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender.append(RollingRandomAccessFileAppender.java:218)
        at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:156)
        at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:129)
        at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:120)
        at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)
        at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:448)
        at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:433)
        at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:417)
        at org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy.log(AwaitCompletionReliabilityStrategy.java:79)
        at org.apache.logging.log4j.core.async.AsyncLogger.actualAsyncLog(AsyncLogger.java:337)
        at org.apache.logging.log4j.core.async.RingBufferLogEvent.execute(RingBufferLogEvent.java:161)
        at org.apache.logging.log4j.core.async.RingBufferLogEventHandler.onEvent(RingBufferLogEventHandler.java:45)
        at org.apache.logging.log4j.core.async.RingBufferLogEventHandler.onEvent(RingBufferLogEventHandler.java:29)
        at com.lmax.disruptor.BatchEventProcessor.processEvents(BatchEventProcessor.java:168)
        at com.lmax.disruptor.BatchEventProcessor.run(BatchEventProcessor.java:125)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: zip file closed
        at java.util.zip.ZipFile.ensureOpen(ZipFile.java:686)
        at java.util.zip.ZipFile.getEntry(ZipFile.java:315)
        at java.util.jar.JarFile.getEntry(JarFile.java:240)
        at java.util.jar.JarFile.getJarEntry(JarFile.java:223)
        at org.bukkit.plugin.java.PluginClassLoader.findClass(PluginClassLoader.java:101)
        at org.bukkit.plugin.java.PluginClassLoader.findClass(PluginClassLoader.java:85)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        at com.google.inject.internal.util.StackTraceElements$1.load(StackTraceElements.java:49)
        at com.google.inject.internal.util.StackTraceElements$1.load(StackTraceElements.java:45)
        at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3716)
        at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2424)
        at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2298)
        at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2211)
        ... 41 more
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My reaction was immediate. What. The. Fuck.&lt;/p&gt;

&lt;p&gt;What is this supposed to even mean? None of this makes any
sense. Why is Guice even in this stacktrace? Where does the
stacktrace even come from? How is the logger looping back
to Guice in the first place? I mean from the looks of it,
it kinda looked like it had something to do with logging,
but there are several things out of place here - it deals
with the class loader, and Guice had something to do with
it. So obviously, the knee-jerk reaction was incorrect.
(I &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -fR logs/&lt;/code&gt; anyways for good measure, but no dice).&lt;/p&gt;

&lt;p&gt;So how am I supposed to fix it?&lt;/p&gt;

&lt;h1 id=&quot;lets-google-it&quot;&gt;Let’s Google It&lt;/h1&gt;

&lt;p&gt;I was actually unable to find anything about this specific
exception. The only thing I could find were questions like
&lt;a href=&quot;https://stackoverflow.com/q/50693221/3308999&quot;&gt;these&lt;/a&gt; where
they were having issues with the Java version, but that
can’t be right because the exceptions don’t match up first
of all, and second, I know for a fact that Java 11 works
completely fine since I’ve used Guice in the past on Java
11 platforms. Finally, I know that assisted inject isn’t
the issue either because I literally commented it out in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; and made the necessary deletions without
effect.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/q/54174855/3308999&quot;&gt;This&lt;/a&gt; also
came up, but this is another lifeless StackOverflow post
with no answers to it.&lt;/p&gt;

&lt;h1 id=&quot;debugging&quot;&gt;Debugging&lt;/h1&gt;

&lt;p&gt;Since I know that Guice is part of the problem, I decided
to comment out all the initialization it is doing, from
creating the injector to the usages of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Injector#getInstance(...)&lt;/code&gt;. Since I was using a newer
Guice version, perhaps simply having the classes in the JAR
or perhaps the relocation could be messing with something?
The answer was no, the exception didn’t come up with simply
the files in the JAR. This means that when I’m initializing
something, obviously there was something wrong with either
the way I’m configuring or my constructors, or something
along those lines.&lt;/p&gt;

&lt;p&gt;I uncommented &lt;code class=&quot;highlighter-rouge&quot;&gt;Guice#createInjector(...)&lt;/code&gt; and ran again
with no exception. Good, configuration should probably be
fine as-is unless I forgot something, but I’ll have to
start uncommenting the usages of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Injector#getInstance(...)&lt;/code&gt; to know for sure. As I
uncommented those lines, I finally hit an exception, but
it wasn’t the big long meaningless one I pasted above, it
was a readable Guice configuration exception. As it turns
out, I failed to configure a binding for &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin&lt;/code&gt;, which I
used in place of the actual main class. However, using
&lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin&lt;/code&gt; in the first place was a mistake. The particular
class I was working with belonged specifically to the
project and wasn’t a utility or anything, so it was
supposed to use the main class rather than a generic
&lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin&lt;/code&gt;. Since I already had my plugin module correctly
configured, I simply fixed the constructor to take the main
class instead. Ta da, no more exception. In the end, it
turns out that by fixing that configuration exception, the
big meaningless one also went away as well.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In the end, my best guess is that there is an issue with
loading the classes that are contained in the exception
trace, which led to the large spaghetti exception that I
pasted to be printed out. An exception caused by printing
an exception. I’m not sure why the underlying exception
that I solved was printed in plaintext when I suddenly
commented out a few lines, but by fixing the actual error,
it won’t be thrown, and therefore the pasted exception
won’t be thrown either. I’m not sure why this even occurs
in the first place, what the problem is with exceptions
that require class loading and such. Perhaps it is needed
to find line numbers or something to display more
debugging information? Perhaps because it ends up having
to resolve classes through &lt;code class=&quot;highlighter-rouge&quot;&gt;PluginClassLoader&lt;/code&gt;, and the JAR
file has already been read, it can’t read from the closed
JAR stream? I honestly can only speculate. That being said,
it is ironic that something which may have originally been
intended to expedite the debugging process actually
hindered it in this case. Go figure.&lt;/p&gt;

&lt;p&gt;I’m working on getting the project out as soon as I can.
This is simply a quick post I decided to write in case
anyone else also runs into this issue.&lt;/p&gt;

&lt;h1 id=&quot;quick-update-2019-07-21-2347&quot;&gt;Quick update 2019-07-21 23:47&lt;/h1&gt;

&lt;p&gt;I figured out that it has something to do with unchecked
exceptions being thrown; if you wrap all of your code
that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;Injector#getInstance(...)&lt;/code&gt; with a try-catch
block and print with &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception#printStackTrace()&lt;/code&gt; instead,
you can print the actual exception. Since
&lt;code class=&quot;highlighter-rouge&quot;&gt;#getInstance(...)&lt;/code&gt; should only be used in a few entry
points, it should be relatively straightforward (if it
is being used literally everywhere, you’ve probably missed
the point of Guice…).&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve had a lot of time to work with Guice when I worked with Skytropia. However, working on a personal project with more up-to-date versions of Spigot and Guice, I was met with the strangest possible exception. But what does it mean? Honestly, I haven’t quite figured it all out myself either.</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 6</title><link href="https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 6" /><published>2019-07-13T20:42:05-07:00</published><updated>2019-07-13T20:42:05-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/13/lessons-learned-debugging-part-6.html">&lt;p&gt;This is another one of those “watch out when you’re doing
XYZ” rather than a specific thing to do (or not do).&lt;/p&gt;

&lt;h1 id=&quot;be-careful-handling-inventories&quot;&gt;Be Careful Handling Inventories&lt;/h1&gt;

&lt;p&gt;Inventories are basically death traps in the world of
Bukkit programming. It is surprisingly easy to get
exceptions, duplication bugs (for the uninitiated: bugs
that allow players to obtain more of an item than intended,
often disrupting the in-game economy), and even &lt;a href=&quot;https://agenttroll.github.io/blog/2018/04/13/keeping-inventories-open.html&quot;&gt;crash the
server&lt;/a&gt;
just handling inventories and &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Writing event handlers for &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryClickEvent&lt;/code&gt; and
dealing with any use-case for &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemStack&lt;/code&gt; should be
approached with caution.&lt;/p&gt;

&lt;h1 id=&quot;exceptions-in-event-handlers&quot;&gt;Exceptions in Event Handlers&lt;/h1&gt;

&lt;p&gt;As a reminder from the
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5.html&quot;&gt;previous post in this series&lt;/a&gt;,
exceptions thrown can cause problems. For example, when
event handlers modify the quantity of items as a result of
some action, an inadvertent exception may terminate the
handler before it reaches the portion of the code that
removes the item, or updates the inventory for that matter.
One way to get around this is to always modify the item in
whatever desired fashion, e.g. reducing its quantity,
before actually executing the action associated with using
that item. However, this isn’t a perfect solution because
errors could crop up before, such as when you are verifying
the item type or pre-conditions. On top of that, that also
leaves server owners with the responsibility of either
refunding or replacing the items that are consumed but no
action is done in the case that the code following the
item modification fails.&lt;/p&gt;

&lt;p&gt;Again, there isn’t a catch-all solution to this problem. Of
course, exceptions will sometimes leak through the cracks,
as is with all programming errors. The key is to reduce its
frequency by taking care to think through the logic and the
possible edge cases that might occur.&lt;/p&gt;

&lt;p&gt;As a real-life anecdote, one of the duplication bugs I had
to deal with was a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; because I didn’t
account for the fact that both dispenser and dropper blocks
could fire &lt;code class=&quot;highlighter-rouge&quot;&gt;BlockDispenseEvent&lt;/code&gt;. What happened was an
exception occurred before the item was supposed to be
removed from the dispenser, which means that it would get
dispensed as a result of the event failing to be cancelled,
and the item would not leave the dispenser, which allowed
people to have an infinite item generator.&lt;/p&gt;

&lt;h1 id=&quot;nullpointerexceptions-galore&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;s Galore&lt;/h1&gt;

&lt;p&gt;Returning back to the basics, many novice programmers
struggle to use &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryClickEvent&lt;/code&gt; and check items.
As someone who has frequented the Bukkit Forums and the
SpigotMC forums for years on end, I’ve seen countless
threads where &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; is thrown simply from
checking the &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemMeta&lt;/code&gt;. Luckily, these days, it gets
harder and harder to find these threads, thanks to the
efforts to document nullability in the API.&lt;/p&gt;

&lt;p&gt;Back before the more recent API versions, what was &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;
and what wasn’t was basically guesswork that you needed to
keep stored in the back of your mind once you figured it
out. There are plenty of places you can quickly run into
trouble - starting from getting the inventory slot itself
to retrieving the &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemMeta&lt;/code&gt;, to the individual methods
like &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemMeta#getDisplayName()&lt;/code&gt;. This was further
compounded by the inconsistent use of &lt;code class=&quot;highlighter-rouge&quot;&gt;Material#AIR&lt;/code&gt; to
denote an empty/no item. For example, in
&lt;code class=&quot;highlighter-rouge&quot;&gt;PlayerInteractEvent&lt;/code&gt;, I believe that using &lt;code class=&quot;highlighter-rouge&quot;&gt;getItem()&lt;/code&gt;
from the event would return &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; for empty, but
&lt;code class=&quot;highlighter-rouge&quot;&gt;Player#getItemInHand()&lt;/code&gt; would return an &lt;code class=&quot;highlighter-rouge&quot;&gt;AIR&lt;/code&gt; item. In
fact, &lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory#getItem(int)&lt;/code&gt; would return &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; as well
and any setter accepted a &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; item as empty, so the
inconsistent use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AIR&lt;/code&gt; material obviously doesn’t
make a whole lot of sense. Regardless, I digress. The point
is, even for more advanced programmers, the Bukkit
inventory API is still difficult terrain to navigate.&lt;/p&gt;

&lt;p&gt;Honestly the best advice I can really give is find one way
to do things and stick with it. This is a controversial
view for obvious reasons; you should be experimenting and
all that. However, when you are writing code at a
professional level where results are expected and errors
are only tolerable at the very best, you should leave the
experimentation and use what you know works.&lt;/p&gt;

&lt;p&gt;Honestly, you don’t need to take it from my mouth how to
write better code. The “on-board shuttle group” writes
the code that launches astronauts into space. There is no
room for error when human lives are on the line.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the on-board shuttle group produces grown-up software,
and the way they do it is by being grown-ups. It may not be
sexy, it may not be a coding ego-trip — but it is the
future of software. When you’re ready to take the next
step — when you have to write perfect software instead of
software that’s just good enough — then it’s time to grow
up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;a href=&quot;https://www.fastcompany.com/28121/they-write-right-stuff&quot;&gt;They Write the Right Stuff&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This is especially true for an environment like Bukkit
development, where tests end at play testing and software
verification is virtually non-existent. The way you reduce
bugginess is by writing code right - the first time.&lt;/p&gt;

&lt;h1 id=&quot;innocent-looking-code-might-still-fail&quot;&gt;Innocent-looking Code Might Still Fail!&lt;/h1&gt;

&lt;p&gt;Often, it is the most innocuous piece of code that fails.&lt;/p&gt;

&lt;p&gt;Another anecdoate of mine is where a generator which
simply fills an inventory with valuable items such as
mineral (diamond/emerald/etc.) blocks. When it was removed,
it is possible for someone which you’ve given access to
the generator to retain the inventory. Although the
generator was removed, the generator’s inventory was still
open. Because I assumed that the generator was unreachable
after removal, all of the items in the inventory would drop
on the floor so people wouldn’t lose those items. To save a
bit of performance, I didn’t clear any items from the
inventory because it could be arbitrarily big. However,
people doubled their payday by first having a buddy open
the inventory, before removing the generator. The buddy
still has access to all the items that dropped, and
collects both the dropped items as well as the uncleared
inventory.&lt;/p&gt;

&lt;p&gt;The lesson here is simple: don’t make any assumptions about
the code you are writing! It helps to try and write your
code to be &lt;em&gt;correct&lt;/em&gt; the first time around - had I not
simply assumed the inventory would be unreachable, I would
have just cleared everything at the end. If someone
discovers this, it would then just be a UI bug and I’d just
need to make sure to close all of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Inventory#getViewers()&lt;/code&gt; prior to dropping everything.
Don’t prioritize performance over correctness. Ironically,
this was &lt;em&gt;still&lt;/em&gt; not even the end of the story, because
closing the inventories from that collection caused a CME.
If you want to learn more about that, you can check out the
&lt;a href=&quot;https://agenttroll.github.io/blog/2019/04/08/lessons-learned-debugging-part-2.html&quot;&gt;second installment&lt;/a&gt;
in this series :).&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;While I don’t often get the chance to say this, I hope
you’ve learned something new from my own experiences. I
speak with very people who talk about my blog, so I can
only speculate as to whether actual people are truly being
impacted.&lt;/p&gt;

&lt;p&gt;As is customary at the end of every post in this series,
I leave with the following wisdom from
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code
that is used to control the airplane that you fly on, the
nuclear power plant a few miles from where you live, or the
spacecraft that carries astronauts into orbit. The rules
act like the seat-belt in your car: initially they are
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gathering information and learning is one way to
add to your repertoire of programming knowledge outside of
literally just writing your own personal projects. As you
gain more experience, you will write better and better
software. I promise.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is another one of those “watch out when you’re doing XYZ” rather than a specific thing to do (or not do).</summary></entry><entry><title type="html">Lessons Learned Debugging: Part 5</title><link href="https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5.html" rel="alternate" type="text/html" title="Lessons Learned Debugging: Part 5" /><published>2019-07-02T20:22:15-07:00</published><updated>2019-07-02T20:22:15-07:00</updated><id>https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/07/02/lessons-learned-debugging-part-5.html">&lt;p&gt;This isn’t a bugginess lesson, but if you’re ever going to
progress beyond a novice-level plugin developer (or even a
Java developer for that matter), then you’ll need to figure
out how to ensure data integrity.&lt;/p&gt;

&lt;h1 id=&quot;minimize-data-loss-in-case-of-catastrophe&quot;&gt;Minimize Data Loss In Case of Catastrophe&lt;/h1&gt;

&lt;p&gt;This is not a very pointed piece of advice (more on that in
a bit), but the whole idea is to design your plugins around
making sure that as much of your data is kept somewhere
safe so that in the event of a catastrophe, a bad weather 
event knocks out your server, you get hacked, your server
crashes, etc., you can recover at least some, hopefully
most of your data. This isn’t some external threat that you
can hope to avoid, this is &lt;strong&gt;inevitable&lt;/strong&gt;. You cannot hope
to continue avoiding these types of events forever, and 
take it from me, I learned it the hard way.&lt;/p&gt;

&lt;p&gt;If you are writing plugins and getting paid to do so, you
MUST have some sort of mechanism to minimize data loss.
Servers fail all the time; it is not a matter of if, it is
a matter of when. It is not a choice, it is a 
responsibility.&lt;/p&gt;

&lt;h1 id=&quot;how-to-protect-your-data&quot;&gt;How to Protect Your Data&lt;/h1&gt;

&lt;p&gt;The most effective way to minimize data loss is through
autosaving to disk. Autosaving writes a reconstructible
state, which means that the exact properties, settings,
objects, whatever type of data being stored in your plugin
at the exact moment in time can be derived from the data 
that you save. This means that you should act like your 
plugin is calling then &lt;code class=&quot;highlighter-rouge&quot;&gt;onDisable&lt;/code&gt; method without actually
having the server shut down every X minutes. It should not
be up to the developer to decide how long the autosave
interval is, and therefore, this should be configurable.
That being said, 15-30 minutes is a good sweet spot. 
Writing data to disk ensures that the data cannot be lost
if the server itself crashes, or a power outage occurs.
Even if a disk failure occurs, data can sometimes be 
recovered from the disk. Preferably, &lt;em&gt;secure&lt;/em&gt; backups are
made every so often as well, which means that it is 
possible to snapshot the disk state and prevent the 
autosaves from going to waste even if the disk is
inadvertently destroyed, or access to the server is 
completely lost or deleted altogether.&lt;/p&gt;

&lt;p&gt;It is important to note that even autosaves are a point of
failure. For example, the following code is not an 
effective way to save data:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem is that multiple things could possibly go wrong
here. It may not even be possible to open a new 
&lt;code class=&quot;highlighter-rouge&quot;&gt;BufferedWriter&lt;/code&gt; if the OS exhausts the available file 
handles. A more effective solution looks like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way, even if the file cannot be written to, at least
it might possibly be recovered by parsing the log file or
by piping the console output somewhere (the parser of this
data need not be written beforehand, but the data itself 
should at least be available). Additionally, even if 
individual &lt;code class=&quot;highlighter-rouge&quot;&gt;Data#serialize()&lt;/code&gt; methods fail, it will not
prevent other data from being saved.&lt;/p&gt;

&lt;p&gt;Plugins also need to be extremely careful about exceptions
thrown in the &lt;code class=&quot;highlighter-rouge&quot;&gt;onEnable&lt;/code&gt; method. Because errors during 
startup cause plugins to be disabled (often with empty 
data), this means that the data file will be overwritten
because of a parsing error and all the data will disappear.
However, ignoring this error is also problematic because it
will not prevent the plugin from overwriting all of the 
data on shutdown with the new data. There are multiple
avenues to solving this, including backing up every server
startup, using a ring buffer style system where the file
is copied to a (or multiple) temporary files each time, or
by using a log file that records changes rather than a
file which records the singular state of the plugin. The 
most effective solution I personally am aware of is the
second option, where temporary files are used to store a
backup of the data, but only in case an exception occurs:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onEnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This isn’t perfect, because the exception could possibly
stem from the fact that file handles have been exhausted,
so the “safest” option is going with a backup every 
startup, but this is a lightweight solution for what a
rather serious potential issue, so I personally go with it.&lt;/p&gt;

&lt;p&gt;Another useful way to ensure data integrity is to turn off
autorestart. Autorestarting is really helpful and keeps 
players happy when a server goes down due to a one-off 
error, but in the long run, the safest option is to make 
sure that a server that goes down stays down until the 
issue is identified. The issue doesn’t necessarily need to
be entirely resolved (only a band-aid needs to be put over
such as removing a plugin while it is fixed), but ensuring
that plugins do not start up again only to enter an endless
loop of crashing the server and starting it up again will
ensure that the data that is backed up stays until it can
be properly restored and the error can be properly
investigated. For example, if you are saving in the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;onEnable&lt;/code&gt; to the same backup file whenever an exception 
is thrown, then it will do little good for you because the
autorestart might erase both the original and the backup as
well if the original is now empty.&lt;/p&gt;

&lt;p&gt;These are just a few of the pointed pieces of advice I
have. I’m certain that there are more ways to reduce data
vulnerability, but this is a very broad problem that has
a large variety of different solutions.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Just because autosaving is an integral part of maintaining
data integrity does not mean that you need to be paranoid.
However, it does mean that you need to be prudent and look
use extra caution when writing mission-critical portions of
your plugin.&lt;/p&gt;

&lt;p&gt;Again repeating my custom, I leave with the following wisdom
from 
&lt;a href=&quot;http://spinroot.com/gerard/pdf/P10.pdf&quot;&gt;The Power of Ten&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the rules seem Draconian at first, bear in mind that
they are meant to make it possible to check code where very
literally your life may depend on its correctness: code 
that is used to control the airplane that you fly on, the 
nuclear power plant a few miles from where you live, or the 
spacecraft that carries astronauts into orbit. The rules 
act like the seat-belt in your car: initially they are 
perhaps a little uncomfortable, but after a while their use
becomes second-nature and not using them becomes 
unimaginable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re tuned in with my blog, you can expect some more
of posts in the “Lessons Learned Debugging” series in the
near future. I don’t have any big projects that I want to
talk about (yet), but if I find or write one, I’ll be sure
to write about that first. As of the writing of this post,
I’m still open to Bukkit development opportunities, so if
you’re hiring, check my 
&lt;a href=&quot;https://agenttroll.github.io/&quot;&gt;main website&lt;/a&gt; under 
“Professional Experience” to see if I’m still looking for
work.&lt;/p&gt;</content><author><name></name></author><summary type="html">This isn’t a bugginess lesson, but if you’re ever going to progress beyond a novice-level plugin developer (or even a Java developer for that matter), then you’ll need to figure out how to ensure data integrity.</summary></entry><entry><title type="html">Implementing PBFT in Java</title><link href="https://agenttroll.github.io/blog/2019/06/23/implementing-pbft-in-java.html" rel="alternate" type="text/html" title="Implementing PBFT in Java" /><published>2019-06-23T17:23:35-07:00</published><updated>2019-06-23T17:23:35-07:00</updated><id>https://agenttroll.github.io/blog/2019/06/23/implementing-pbft-in-java</id><content type="html" xml:base="https://agenttroll.github.io/blog/2019/06/23/implementing-pbft-in-java.html">&lt;p&gt;Following up with my &lt;a href=&quot;&quot;&gt;previous post&lt;/a&gt; about one of my 
prior projects, I have another post about yet another
project that I’ve recently finished, 
&lt;a href=&quot;https://github.com/AgentTroll/pbft-java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-pbft&quot;&gt;What is PBFT?&lt;/h1&gt;

&lt;p&gt;PBFT stands for Practical Byzantine Fault Tolerance. PBFT
is an algorithm developed by Miguel Castro and Barbara
Liskov that allows replicated systems to tolerate what are
called Byzantine faults. Since some readers don’t know what
a Byzantine fault is, here is what Wikipedia has to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Byzantine fault […] is a condition of a computer 
system, particularly distributed computing systems, where 
components may fail and there is imperfect information on 
whether a component has failed. The term takes its name 
from an allegory, the “Byzantine Generals Problem”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Wikipedia page on the 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Two_Generals%27_Problem&quot;&gt;“Two Generals’ Problem”&lt;/a&gt;
has a good description of what the Byzantine General’s
Problem is, but the general gist is that a consensus has
to be made upon a decision or computation where one of the
parties involved may be compromised, may be malicious, or
could be faulty. When applied to computing systems, a set
of replica computers will need to decide on the correct
course of action even though other computers may send 
erroneous data or not even send any data at all.&lt;/p&gt;

&lt;p&gt;The PBFT algorithm is described by the paper authored by
Castro and Liskov, which can be read
&lt;a href=&quot;http://pmg.csail.mit.edu/papers/osdi99.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;client-implementation&quot;&gt;Client Implementation&lt;/h1&gt;

&lt;p&gt;I personally used a multitude of different sources when
developing this project as an abstraction to the PBFT 
algorithm, and even then, I am still confused on whether or
not I even got everything down correctly.&lt;/p&gt;

&lt;p&gt;For simplicity, I will refer to the configured fault 
tolerance to be &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; as in the PBFT paper, the number of
replicas that can have Byzantine faults while still 
allowing a safe consensus to be reached.&lt;/p&gt;

&lt;p&gt;The client implementation is very, very simple. Only two
messages need to be implemented, the sending and receiving
capability for one and the other, and the timeout.&lt;/p&gt;

&lt;p&gt;Requests are identified by their timestamp value, which 
count up from 0 instead of using the actual system clock 
since it is possible to send more than one message during 
the time it takes for &lt;code class=&quot;highlighter-rouge&quot;&gt;System#currentTimeMillis()&lt;/code&gt; to 
update its value.&lt;/p&gt;

&lt;p&gt;Once a REQUEST is sent to what is believed to be the 
primary, users will call the &lt;code class=&quot;highlighter-rouge&quot;&gt;Client#checkTimeout()&lt;/code&gt; method
in a loop, which will check to make sure that a REPLY is 
received within the configured timeout. If it isn’t, then a
REQUEST is then multicasted to all replicas.&lt;/p&gt;

&lt;p&gt;The client continuously waits for a REPLY message from 
replicas. As soon as it receives the &lt;code class=&quot;highlighter-rouge&quot;&gt;f + 1&lt;/code&gt;th REPLY 
message that matches a stored REPLY, then the result is
accepted and the timer is stopped.&lt;/p&gt;

&lt;h1 id=&quot;replica-implementation&quot;&gt;Replica Implementation&lt;/h1&gt;

&lt;p&gt;Replicas are vastly more complicated and have tons of 
moving parts that need to be considered for each message.&lt;/p&gt;

&lt;p&gt;In short, what a replica does is wait for REQUEST messages
and then go through a process to ensure that all other 
replicas also agree to go through the same process. Then,
it will send a REPLY message with the computed result. If
the replica waits for too long, it will try to vote out the
primary with a VIEW-CHANGE message in hopes of getting 
things going again.&lt;/p&gt;

&lt;h4 id=&quot;receiving-request&quot;&gt;Receiving REQUEST&lt;/h4&gt;

&lt;p&gt;If the replica already has already responded to a REQUEST
with the same client ID and the same timestamp, then it
means that the operation has already completed and it will
simply resend the cached REPLY for that operation.&lt;/p&gt;

&lt;p&gt;When a replica receives a REQUEST message that it didn’t
know about before, it will start a timer that will ensure
that things keep moving. If the replica isn’t the primary,
then it simply redirects the message to the primary 
instead.&lt;/p&gt;

&lt;p&gt;If the replica is a primary, then it will ensure that the
message shouldn’t be bufferred. If the number of requests
currently being handled is greater than the configured 
buffer limit, the primary puts it into a FIFO queue to be
executed at a later time.&lt;/p&gt;

&lt;p&gt;The primary then sends a PRE-PREPARE to all non-primaries
and relays the request to them, adding the sent message
to its log.&lt;/p&gt;

&lt;p&gt;Replicas identify accepted REQUEST messages using the
current view number and the sequence number that the 
primary assigns to it. The primary adds the multicasted
PRE-PREPARE message to a new ticket for that REQUEST.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;, I assume that the REQUEST message is 
included with the PRE-PREPARE message to simplify the 
encoding process. Users can decide whether or not to follow
suit, they can always set the REQUEST to null and utilize 
their own thing if they want to follow the an orthodox
implementation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;receiving-pre-prepare&quot;&gt;Receiving PRE-PREPARE&lt;/h4&gt;

&lt;p&gt;When a non-primary receives a PRE-PREPARE, it ensures that
the view number is equal to the view that replica currently
is in, and that the message sequence ID is between the 
specified water marks, otherwise it ignores the message.
The replica then checks to ensure the digest is correct, if
the replica already has a matching ticket (one that has the
same view number and sequence number), then it will also
check to make sure that the new PRE-PREPARE message doesn’t
have a digest different from the previous PRE-PREPARE. If
these two conditions aren’t met, then the replica also 
ignores the message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Digests are &lt;code class=&quot;highlighter-rouge&quot;&gt;byte[]&lt;/code&gt; arrays in &lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt;. Additionally,
ticketing is used because messages could arrive 
out-of-order, so I’m not sure if the PBFT paper specifies
that I should check the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt;
states every single time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having accepted the PRE-PREPARE message, the replica then
creates a new ticket. It then adds the PRE-PREPARE message 
to the log, and multicasts a PREPARE message to all known 
replicas, also adding that PREPARE message to the log.&lt;/p&gt;

&lt;p&gt;The replica will then attempt to check on the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt; states, executing the response to 
those states as necessary. More on that below.&lt;/p&gt;

&lt;h4 id=&quot;receiving-prepare&quot;&gt;Receiving PREPARE&lt;/h4&gt;

&lt;p&gt;When a replica receives a PREPARE, it will also check to
make sure that the view number is equal to the current view
number and the sequence number is within the water marks,
otherwise ignoring the message. It will create a new ticket
if one does not exist already, and append the PREPARE to
the log.&lt;/p&gt;

&lt;p&gt;The relevant condition is &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;. The ticket will scan
the messages added to the log for that ticket (again, the
same view number and the same sequence number). When it
hits a PRE-PREPARE, it will scan the log to check for
matching PREPARE messages whose digests also match. If
the scan hits the &lt;code class=&quot;highlighter-rouge&quot;&gt;2f&lt;/code&gt;th matching PREPARE message, then
the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; state becomes true and the replica responds
by multicasting a COMMIT message, adding the COMMIT to the
log.&lt;/p&gt;

&lt;p&gt;The replica will then attempt to check on the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt; states, executing the response to 
those states as necessary.&lt;/p&gt;

&lt;h4 id=&quot;recieving-commit&quot;&gt;Recieving COMMIT&lt;/h4&gt;

&lt;p&gt;When a replica receives a COMMIT, it will also check to
make sure that the view number is equal to the current view
number and the sequence number is within the water marks,
otherwise ignoring the message. It will create a new ticket
if one does not exist already, and append the COMMIT to
the log.&lt;/p&gt;

&lt;p&gt;The relevant condition here is &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt;. If we
know that the ticket has reached the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; phase, we
don’t need to rescan to make sure this is true. The ticket
then looks for matching COMMIT messages, and if it reaches
the &lt;code class=&quot;highlighter-rouge&quot;&gt;2f + 1&lt;/code&gt;th COMMIT, it will then execute the 
operation found from the REQUEST message. A REPLY message 
is sent back to the client with the result of the 
operation, and the ticket is then moved to the cache in 
case the same REQUEST is sent again. The client then stops
the timer for that REQUEST, if available.&lt;/p&gt;

&lt;p&gt;The replica will then attempt to check on the &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;committed-local&lt;/code&gt; states, executing the response to 
those states as necessary.&lt;/p&gt;

&lt;p&gt;If the sequence number is evenly divisible by some
configured number, then the replica will also multicast a
CHECKPOINT message and add it to its log.&lt;/p&gt;

&lt;h4 id=&quot;receiving-checkpoint&quot;&gt;Receiving CHECKPOINT&lt;/h4&gt;

&lt;p&gt;When a replica receives a CHECKPOINT, it will add it to its
log. If the log has &lt;code class=&quot;highlighter-rouge&quot;&gt;2f + 1&lt;/code&gt; CHECKPOINT messages from
itself and other replicas with the same sequence number as
the one that was received, it will then perform a garbage
collection by throwing away cached REPLY messages less than
or equal to the checkpoint, all CHECKPOINT messages below
that checkpoint, and will update the low water mark to the
checkpoint and the high water mark to the checkpoint plus
the configured checkpoint interval.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt; organizes CHECKPOINT messages by the sequence
number, but I &lt;em&gt;believe&lt;/em&gt; that it should be based on any 
CHECKPOINT with a sequence number greater than the given
checkpoint to make it stable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;what-about-view-changes&quot;&gt;What About View-changes?&lt;/h4&gt;

&lt;p&gt;Replicas will check the timers for all received REQUESTS in
a loop. If the timer expires, then the replica will skip 
all the other timers and become “disgruntled.” It will then
multicast a VIEW-CHANGE message to vote all replicas into
view &lt;code class=&quot;highlighter-rouge&quot;&gt;v + 1&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; represents the current view number.
The timeout will then double, and the timeout check loop 
continues. If it times out again, the VIEW-CHANGE will then
vote for &lt;code class=&quot;highlighter-rouge&quot;&gt;v + 2&lt;/code&gt; and the time doubles yet again, and so on.
A disgruntled replica only accepts 3 messages: CHECKPOINT,
VIEW-CHANGE, and NEW-VIEW. All other messages are ignored.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The PBFT algorithm specifies that the timeout shouldn’t 
double, but rather should increase by increments of the 
original timeout, so instead of 1T -&amp;gt; 2T -&amp;gt; 4T, the paper
specifies that it should be 1T -&amp;gt; 2T -&amp;gt; 3T if &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; 
represented the original timeout&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;receiving-view-change&quot;&gt;Receiving VIEW-CHANGE&lt;/h4&gt;

&lt;p&gt;When the “new primary” (the primary for view &lt;code class=&quot;highlighter-rouge&quot;&gt;v + 1&lt;/code&gt;)
receives a VIEW-CHANGE message, it will add it to its log.
If there are &lt;code class=&quot;highlighter-rouge&quot;&gt;2f&lt;/code&gt; VIEW-CHANGE messages in the log from
different replicas, then the new primary will then 
multicast a NEW-VIEW message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Technically, a multitude of items aren’t supposed to be 
included in the actual NEW-VIEW message, however, again,
for encoding simplicity, &lt;code class=&quot;highlighter-rouge&quot;&gt;pbft-java&lt;/code&gt; requires that the
NEW-VIEW message includes the full checkpoint proofs as
well as full PRE-PREPARE messages. If a more orthodox
implementation is desired, users are encouraged to add
their own messages to retrieve missing REQUESTs and
CHECKPOINTs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the replica isn’t the “new primary,” it will also add
the message to its log, but if it has &lt;code class=&quot;highlighter-rouge&quot;&gt;f + 1&lt;/code&gt; VIEW-CHANGE
messages in its log already from different replicas, then
it will “bandwagon” and also multicast a VIEW-CHANGE for
the new view as well.&lt;/p&gt;

&lt;h4 id=&quot;receiving-new-view&quot;&gt;Receiving NEW-VIEW&lt;/h4&gt;

&lt;p&gt;When a replica receives a NEW-VIEW message is received by a
primary, it will perform a garbage collection by removing
the VIEW-CHANGE messages still in the log and clear all
pending requests from the previous view. If the lowest
proven checkpoint it receives is greater than the current
low water mark, then the checkpoint is upgraded, the proof
is inserted into the log, and a garbage collection is done
as if a checkpoint was proven by CHECKPOINT messages.&lt;/p&gt;

&lt;p&gt;The replica then looks through all of the PRE-PREPARE 
messages, multicasting a corresponding PREPARE message
for them once the digest is checked with one generated for
the request. If the operation is &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, then it is a no-op
and skipped. Both PRE-PREPARE and PREPARE messages are
added to the log.&lt;/p&gt;

&lt;p&gt;The replica is then no longer disgruntled, removes all
outstanding timeouts, and then enters the new view.&lt;/p&gt;

&lt;p&gt;The new primary that is multicasting the NEW-VIEW message
does all of the above, skipping the portion that handles
the PRE-PREPARE messages and instead adds those 
PRE-PREPARES to the log without sending a PREPARE.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Most of the details for how I interpreted the PBFT protocol
is laid out here. The finer details of how to structure all
the data structures needed to store the messages and
determine quorum sizes still remain, and my implementation
can be found on GitHub with the link found at the top of
the post. PBFT is sort of like a gateway algorithm, there
are implementations of it like I believe Hyperledger and
other blockchain style applications, but there are other
BFT algorithms as well.&lt;/p&gt;

&lt;p&gt;I was initially interested in (P)BFT reading up on, as my
recent post unsurprisingly suggests, about Space(X).
According to &lt;a href=&quot;https://lwn.net/Articles/540368/&quot;&gt;LWN.net&lt;/a&gt;,
replication is used for avionics control on the Dragon
capsules, and the Byzantine Generals’ Problem is used to
resolve disagreements between the flight computers, so it
is very cool to see how BFT is applied not only to Earth
applications, but also in space as well. My particular
implementation of BFT probably isn’t up-to-par with what
the SpaceX engineers implemented, however. It definitely
wouldn’t be launching anything mission critical.&lt;/p&gt;

&lt;p&gt;I’ll probably go back around to adding new posts in my
“Lessons Learned Debugging” series for another long stretch
until I figure out what other things to talk about.&lt;/p&gt;</content><author><name></name></author><summary type="html">Following up with my previous post about one of my prior projects, I have another post about yet another project that I’ve recently finished, pbft-java.</summary></entry></feed>